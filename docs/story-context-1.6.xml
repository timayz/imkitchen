<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>6</storyId>
    <title>Freemium Tier Enforcement (10 Recipe Limit)</title>
    <status>Draft</status>
    <generatedAt>2025-10-13T19:45:00Z</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-1.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a free tier user</asA>
    <iWant>to understand my recipe limit</iWant>
    <soThat>I know when to upgrade to premium</soThat>
    <tasks>
      <task id="1" acs="1,2,6">
        <title>Add recipe_count tracking to User aggregate</title>
        <subtasks>
          <subtask>Add recipe_count field to UserAggregate (crates/user/src/aggregate.rs)</subtask>
          <subtask>Initialize recipe_count to 0 in user_created event handler</subtask>
          <subtask>Add RecipeCreated event handler to increment recipe_count</subtask>
          <subtask>Add RecipeDeleted event handler to decrement recipe_count</subtask>
          <subtask>Update read model projection to maintain recipe_count in users table</subtask>
        </subtasks>
      </task>
      <task id="2" acs="2,4">
        <title>Implement validate_recipe_creation command</title>
        <subtasks>
          <subtask>Create validate_recipe_creation function in crates/user/src/commands.rs</subtask>
          <subtask>Query user by ID from read model</subtask>
          <subtask>Check if tier == Free AND recipe_count >= 10</subtask>
          <subtask>Return UserError::RecipeLimitReached if limit exceeded</subtask>
          <subtask>Return Ok(()) if premium or under limit</subtask>
        </subtasks>
      </task>
      <task id="3" acs="1,3,8">
        <title>Display recipe count on recipe pages</title>
        <subtasks>
          <subtask>Add recipe count query to recipe list page handler</subtask>
          <subtask>Create recipe_count_badge component in templates/components/</subtask>
          <subtask>Show "X/10 recipes" for free users</subtask>
          <subtask>Show "Unlimited recipes" badge for premium users</subtask>
          <subtask>Display on recipe library page header</subtask>
        </subtasks>
      </task>
      <task id="4" acs="4">
        <title>Integrate validation in recipe creation flow</title>
        <subtasks>
          <subtask>Call validate_recipe_creation before recipe creation command</subtask>
          <subtask>Handle UserError::RecipeLimitReached in route handler</subtask>
          <subtask>Display upgrade prompt modal/message on error</subtask>
          <subtask>Include "Upgrade to Premium" button in error message</subtask>
          <subtask>Prevent recipe creation form submission if limit reached</subtask>
        </subtasks>
      </task>
      <task id="5" acs="1,2,3,4,5,6,7,8">
        <title>Test freemium enforcement</title>
        <subtasks>
          <subtask>Unit test: validate_recipe_creation with free user at 9 recipes → Ok</subtask>
          <subtask>Unit test: validate_recipe_creation with free user at 10 recipes → RecipeLimitReached</subtask>
          <subtask>Unit test: validate_recipe_creation with premium user at 50 recipes → Ok</subtask>
          <subtask>Integration test: Create 10 recipes as free user, 11th attempt returns 422</subtask>
          <subtask>Integration test: Delete recipe, recipe_count decrements, can create new recipe</subtask>
          <subtask>Integration test: Premium user can create unlimited recipes</subtask>
          <subtask>E2E test: Free user hits limit → sees upgrade prompt → upgrades → can create more</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Recipe count displayed on recipe management page (e.g., "7/10 recipes")</criterion>
    <criterion id="2">User can create recipes until limit reached</criterion>
    <criterion id="3">At 10th recipe, system shows "10/10 recipes - Upgrade for unlimited"</criterion>
    <criterion id="4">Attempting to create 11th recipe prevents creation, displays upgrade prompt</criterion>
    <criterion id="5">User can edit or delete existing recipes within limit</criterion>
    <criterion id="6">Deleting recipe frees up slot for new recipe</criterion>
    <criterion id="7">Recipe limit applies only to user-created recipes (not community-discovered)</criterion>
    <criterion id="8">Premium users see "Unlimited recipes" indicator</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-1.md</path>
        <title>Technical Specification - Epic 1: User Authentication and Profile Management</title>
        <section>AC-8.1 to AC-8.4 - Freemium Enforcement Acceptance Criteria</section>
        <snippet>
AC-8.1: Given a free-tier user has 9 recipes, when they create recipe #10, then creation succeeds and users.recipe_count = 10
AC-8.2: Given a free-tier user has 10 recipes, when they attempt to create recipe #11, then error "Recipe limit reached. Upgrade to premium for unlimited recipes" is displayed
AC-8.3: Given a premium user has 50 recipes, when they create recipe #51, then creation succeeds (no limit)
AC-8.4: Given recipe creation command validation calls user::validate_recipe_creation, when user is free-tier with 10 recipes, then UserError::RecipeLimitReached is returned
        </snippet>
        <reason>Authoritative acceptance criteria defining expected behavior for freemium enforcement</reason>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-1.md</path>
        <title>Technical Specification - Epic 1</title>
        <section>Commands/validate_recipe_creation</section>
        <snippet>
Function: user::validate_recipe_creation(user_id, executor) → UserResult&lt;()&gt;
Purpose: Validates whether user can create a new recipe based on tier and recipe_count
Implementation: Query user from read model, check tier == "free" &amp;&amp; recipe_count &gt;= 10, return UserError::RecipeLimitReached if limit exceeded
        </snippet>
        <reason>Implementation specification for the validation command required by this story</reason>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Section 3.2 - Data Models and Relationships</section>
        <snippet>
users table schema includes:
- tier: TEXT ("free" or "premium")
- recipe_count: INTEGER (tracks number of user-created recipes for freemium enforcement)
        </snippet>
        <reason>Database schema context showing existing tier and recipe_count fields in users table</reason>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR-15: Freemium Access Controls</section>
        <snippet>
Free tier users limited to 10 recipes maximum. Premium users access unlimited recipes, advanced scheduling preferences, and priority community features.
        </snippet>
        <reason>Product requirement defining the 10 recipe limit for free tier users</reason>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Story 1.6: Freemium Tier Enforcement</section>
        <snippet>
As a free tier user, I want to understand my recipe limit, so that I know when to upgrade to premium.
Key Capabilities: Recipe count display, creation limit at 10, upgrade prompts, premium bypass
        </snippet>
        <reason>Original story definition from epic breakdown providing context and scope</reason>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/aggregate.rs</path>
        <kind>aggregate</kind>
        <symbol>UserAggregate</symbol>
        <lines>16-37</lines>
        <snippet>
pub struct UserAggregate {
    pub user_id: String,
    pub email: String,
    pub password_hash: String,
    pub created_at: String,
    pub dietary_restrictions: Vec&lt;String&gt;,
    pub household_size: Option&lt;u8&gt;,
    pub skill_level: Option&lt;String&gt;,
    pub weeknight_availability: Option&lt;String&gt;,
    pub onboarding_completed: bool,
    pub tier: String, // "free", "premium"
    pub recipe_count: i32, // Already exists!
    pub stripe_customer_id: Option&lt;String&gt;,
    pub stripe_subscription_id: Option&lt;String&gt;,
}
        </snippet>
        <reason>User aggregate already has recipe_count field and tier field - foundation for freemium logic. Note: recipe_count already exists at line 32, tier at line 31.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/aggregate.rs</path>
        <kind>event-handler</kind>
        <symbol>user_created</symbol>
        <lines>51-69</lines>
        <snippet>
async fn user_created(&amp;mut self, event: evento::EventDetails&lt;UserCreated&gt;) -&gt; anyhow::Result&lt;()&gt; {
    self.user_id = event.aggregator_id.clone();
    self.email = event.data.email;
    self.password_hash = event.data.password_hash;
    self.created_at = event.data.created_at;
    self.tier = "free".to_string();
    self.recipe_count = 0; // Initialized to 0
    // ... other fields
    Ok(())
}
        </snippet>
        <reason>User creation already initializes recipe_count to 0 and tier to "free" - no changes needed here</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/error.rs</path>
        <kind>error-enum</kind>
        <symbol>UserError</symbol>
        <lines>1-36</lines>
        <snippet>
#[derive(Debug, Error)]
pub enum UserError {
    #[error("Email already exists")]
    EmailAlreadyExists,
    // ... other variants
    #[error("Validation error: {0}")]
    ValidationError(String),
}
        </snippet>
        <reason>Need to add UserError::RecipeLimitReached variant to this enum for freemium enforcement</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/commands.rs</path>
        <kind>command</kind>
        <symbol>register_user</symbol>
        <lines>37-105</lines>
        <snippet>
pub async fn register_user(
    command: RegisterUserCommand,
    executor: &amp;Sqlite,
    pool: &amp;SqlitePool,
) -&gt; UserResult&lt;String&gt; {
    // 1. Validate command
    // 2. Hash password
    // 3. Check email uniqueness
    // 4. Create UserCreated event
    // 5. Return user_id
}
        </snippet>
        <reason>Example of existing command pattern to follow when implementing validate_recipe_creation command</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/read_model.rs</path>
        <kind>projection</kind>
        <symbol>on_user_created</symbol>
        <lines>unknown</lines>
        <snippet>
// Read model projection handlers subscribe to events and update users table
// Need to add projections for RecipeCreated and RecipeDeleted events
        </snippet>
        <reason>Will need to add projection handlers to update recipe_count in users table when recipe events occur</reason>
      </artifact>
    </code>

    <dependencies>
      <rust>
        <dependency name="evento" version="1.3" features="sqlite-migrator">Event sourcing framework</dependency>
        <dependency name="sqlx" version="0.8" features="runtime-tokio,sqlite,chrono,uuid">Database queries</dependency>
        <dependency name="axum" version="0.8" features="macros">Web framework</dependency>
        <dependency name="askama" version="0.14">Template engine</dependency>
        <dependency name="validator" version="0.20" features="derive">Input validation</dependency>
        <dependency name="thiserror" version="1.0">Error handling</dependency>
        <dependency name="serde" version="1.0" features="derive">Serialization</dependency>
        <dependency name="tokio" version="1.40" features="full">Async runtime</dependency>
        <dependency name="uuid" version="1.10" features="v4,serde">ID generation</dependency>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="architecture">Event Sourcing: All state changes must be represented as events (RecipeCreated, RecipeDeleted) that trigger recipe_count updates</constraint>
    <constraint type="architecture">CQRS: Validation reads from users table read model, updates happen via event projections</constraint>
    <constraint type="domain">Freemium validation at domain boundary: validate_recipe_creation must be called BEFORE RecipeCreated event is emitted</constraint>
    <constraint type="domain">Recipe limit applies only to user-created recipes, not community-discovered recipes</constraint>
    <constraint type="domain">Premium tier bypasses all freemium restrictions (tier == "premium" skips limit check)</constraint>
    <constraint type="testing">TDD enforced with minimum 80% code coverage per architecture doc</constraint>
    <constraint type="testing">Test approach: Unit tests (validate_recipe_creation), Integration tests (HTTP endpoints), E2E tests (full user journey)</constraint>
    <constraint type="cross-domain">Recipe domain must call user::validate_recipe_creation before creating recipes</constraint>
    <constraint type="ux">Error message format: "Recipe limit reached. Upgrade to premium for unlimited recipes"</constraint>
    <constraint type="http">Recipe creation limit error returns 422 Unprocessable Entity with upgrade prompt</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>validate_recipe_creation</name>
      <kind>command</kind>
      <signature>pub async fn validate_recipe_creation(user_id: &amp;str, executor: &amp;Sqlite, pool: &amp;SqlitePool) -&gt; UserResult&lt;()&gt;</signature>
      <path>crates/user/src/commands.rs</path>
      <description>Validates whether user can create a new recipe based on tier and recipe_count. Returns Ok(()) if allowed, UserError::RecipeLimitReached if limit exceeded.</description>
      <usage>Called by recipe creation command before emitting RecipeCreated event</usage>
    </interface>
    <interface>
      <name>UserError</name>
      <kind>error-enum</kind>
      <signature>pub enum UserError { RecipeLimitReached, ... }</signature>
      <path>crates/user/src/error.rs</path>
      <description>Domain error enum that needs new RecipeLimitReached variant added</description>
      <usage>Returned by validate_recipe_creation when free user exceeds 10 recipe limit</usage>
    </interface>
    <interface>
      <name>UserAggregate</name>
      <kind>aggregate</kind>
      <signature>pub struct UserAggregate { recipe_count: i32, tier: String, ... }</signature>
      <path>crates/user/src/aggregate.rs</path>
      <description>User aggregate already has recipe_count (line 32) and tier (line 31) fields. Need to add event handlers for RecipeCreated and RecipeDeleted events.</description>
      <usage>Event handlers update recipe_count when recipe events occur</usage>
    </interface>
    <interface>
      <name>users table</name>
      <kind>read-model</kind>
      <signature>recipe_count INTEGER, tier TEXT</signature>
      <path>migrations/*.sql</path>
      <description>Read model table that mirrors recipe_count and tier for query optimization</description>
      <usage>Query by validate_recipe_creation to check limits, updated by event projections</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
Project follows Test-Driven Development (TDD) with minimum 80% code coverage. Testing framework: Rust native testing with tokio::test for async tests. Integration tests use in-memory SQLite database. E2E tests planned with Playwright. Test locations: crates/*/tests/ for unit tests, tests/ for integration tests, e2e/tests/ for end-to-end tests.
    </standards>

    <locations>
      <location>crates/user/tests/aggregate_tests.rs - Unit tests for aggregate event handlers</location>
      <location>crates/user/tests/command_tests.rs - Unit tests for domain commands</location>
      <location>tests/recipe_tests.rs - Integration tests for recipe HTTP endpoints (will need to create)</location>
      <location>tests/freemium_tests.rs - Integration tests for freemium enforcement (will need to create)</location>
      <location>e2e/tests/freemium.spec.ts - E2E tests for complete freemium user journey (future)</location>
    </locations>

    <ideas>
      <idea ac="1">Integration test: GET /recipes shows recipe count badge "7/10 recipes" for free user with 7 recipes</idea>
      <idea ac="1,8">Integration test: GET /recipes shows "Unlimited recipes" badge for premium user</idea>
      <idea ac="2">Unit test: validate_recipe_creation returns Ok(()) for free user with 9 recipes</idea>
      <idea ac="2,4">Unit test: validate_recipe_creation returns UserError::RecipeLimitReached for free user with 10 recipes</idea>
      <idea ac="3">Integration test: POST /recipes as free user with 9 recipes succeeds, users.recipe_count becomes 10, response shows "10/10 recipes - Upgrade for unlimited"</idea>
      <idea ac="4">Integration test: POST /recipes as free user with 10 recipes returns 422 with upgrade prompt message</idea>
      <idea ac="5">Integration test: PUT /recipes/:id as free user with 10 recipes succeeds (editing allowed)</idea>
      <idea ac="6">Integration test: DELETE /recipes/:id as free user with 10 recipes succeeds, recipe_count becomes 9, next POST /recipes succeeds</idea>
      <idea ac="7">Unit test: Verify RecipeCreated event increments recipe_count, but community recipe copy events do not</idea>
      <idea ac="3">Unit test: validate_recipe_creation returns Ok(()) for premium user with 50 recipes (no limit)</idea>
      <idea ac="1-8">E2E test: Register → Create 10 recipes → Hit limit with error → Upgrade to premium → Create 11th recipe successfully</idea>
    </ideas>
  </tests>
</story-context>
