<story-context id="bmad/bmm/workflows/4-implementation/story-context/8.6" v="1.0">
  <metadata>
    <epicId>8</epicId>
    <storyId>8.6</storyId>
    <title>Write Route Integration Tests and API Documentation</title>
    <status>Draft</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-8.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>backend developer and API consumer</asA>
    <iWant>comprehensive integration tests and API documentation for all meal planning routes</iWant>
    <soThat>route behavior is verified, frontend integration is smooth, and performance targets are met</soThat>
    <tasks>
      - Create comprehensive integration test suite covering all routes (&gt;85% coverage)
      - Write authentication/authorization integration tests (401, 403 responses)
      - Write error handling integration tests (400, 404, 500 scenarios)
      - Write JSON contract validation tests (schema validation)
      - Create API documentation (OpenAPI 3.0 spec)
      - Generate human-readable API documentation from OpenAPI spec
      - Verify all integration tests pass in CI/CD
      - Write performance tests for all routes (P95 latency targets)
      - Write test helpers and fixtures (setup_test_db, create_test_user, create_valid_jwt)
      - Document evento test pattern for future developers (unsafe_oneshot usage)
      - Review and consolidate all integration tests
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Integration test suite covers all routes (&gt;85% coverage)
    2. Tests verify authentication/authorization logic (401, 403 responses)
    3. Tests verify error handling (400, 404, 500 scenarios)
    4. Tests verify request/response JSON contracts (schema validation)
    5. API documentation created (OpenAPI spec or README)
    6. Documentation includes example requests/responses
    7. All integration tests pass in CI/CD
    8. Performance tests verify P95 &lt;500ms for all routes
  </acceptanceCriteria>

  <artifacts>
    <docs>
      - Technical Specification: /home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-8.md
        * Section: Test Strategy Summary - TDD approach, test pyramid, coverage targets
        * Section: APIs and Interfaces - Route signatures and response schemas
        * Section: Data Models and Contracts - Full JSON schemas
        * Section: Non-Functional Requirements - Performance P95 latency targets
        * Section: Traceability Mapping - All AC mapped to test ideas

      - OpenAPI Specification Template: Standard OpenAPI 3.0 format
        * Machine-readable API specification
        * Example: https://swagger.io/specification/

      - Evento Test Pattern Documentation: To be created at docs/testing/evento-test-pattern.md
        * Explanation of unsafe_oneshot for synchronous projection processing
        * Example test code snippets
    </docs>

    <code>
      - Example Test Pattern: /home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/tests/multi_week_projection_tests.rs
        * setup_test_db() helper: Creates in-memory SQLite database with schema
        * create_test_user(), create_test_recipe() helpers
        * unsafe_oneshot usage: Synchronous evento event processing in tests
        * Test structure: setup → action → unsafe_oneshot → assert read model

      - Existing Integration Tests (reference):
        * /home/snapiz/projects/github/timayz/imkitchen/crates/shopping/tests/integration_tests.rs
        * /home/snapiz/projects/github/timayz/imkitchen/crates/recipe/tests/recipe_epic6_tests.rs
        * Pattern: Tokio async tests, evento unsafe_oneshot, database assertions
    </code>

    <dependencies>
      - axum 0.7+ (test client for HTTP request simulation)
      - tokio 1.40+ (async test runtime)
      - sqlx 0.8+ (in-memory test database)
      - evento 1.5+ (unsafe_oneshot for test projections)
      - serde_json (JSON schema validation)
      - cargo-tarpaulin (coverage measurement)
    </dependencies>
  </artifacts>

  <constraints>
    - TDD Enforced: All routes implemented with tests first (Stories 8.1-8.5)
    - Test Pyramid: 70% integration tests, 20% unit tests, 10% performance tests
    - Test Isolation: Each test runs in database transaction, rolled back after completion
    - Evento Test Pattern: Use unsafe_oneshot for synchronous projection processing in tests
    - Coverage Target: &gt;85% line coverage for crates/api/src/routes/ (measured via cargo-tarpaulin)
    - CI/CD: Tests must pass in CI before merge, coverage enforced
    - Performance Targets: All routes &lt;500ms P95 (route overhead only, algorithm time excluded)
  </constraints>

  <interfaces>
    Test Helper Functions:
    ```rust
    // crates/api/tests/helpers.rs
    pub async fn setup_test_db() -&gt; (evento::Sqlite, sqlx::SqlitePool) {
        let pool = SqlitePoolOptions::new()
            .max_connections(1)
            .connect(":memory:")
            .await
            .unwrap();

        // Run evento migrations
        let mut conn = pool.acquire().await.unwrap();
        evento::sql_migrator::new_migrator::&lt;sqlx::Sqlite&gt;()
            .unwrap()
            .run(&amp;mut conn, &amp;Plan::apply_all())
            .await
            .unwrap();

        // Run application migrations
        sqlx::migrate!("../../migrations").run(&amp;pool).await.unwrap();

        let executor: evento::Sqlite = pool.clone().into();
        (executor, pool)
    }

    pub async fn create_test_user(db: &amp;SqlitePool, user_id: &amp;str) -&gt; User {
        sqlx::query("INSERT INTO users (id, email, password_hash) VALUES (?, ?, ?)")
            .bind(user_id)
            .bind(format!("{}@test.com", user_id))
            .bind("test_hash")
            .execute(db)
            .await
            .unwrap();
    }

    pub async fn create_test_recipes(db: &amp;SqlitePool, user_id: &amp;str, count: usize) -&gt; Vec&lt;Recipe&gt; {
        // INSERT INTO recipes with is_favorite = true
    }

    pub fn create_valid_jwt(user_id: &amp;str) -&gt; String {
        // Generate JWT token with user_id claim
    }

    pub fn app_with_test_state(db: SqlitePool, executor: EventoExecutor) -&gt; Router {
        // Build Axum router with authentication middleware
    }
    ```

    Evento Test Pattern:
    ```rust
    #[tokio::test]
    async fn test_route_with_evento_projection() {
        // Setup
        let (executor, pool) = setup_test_db().await;
        let user_id = create_test_user(&amp;pool, "test-user-id").await;
        create_test_recipes(&amp;pool, user_id, 10).await;

        // Call route handler
        let app = app_with_test_state(pool.clone(), executor.clone());
        let response = app
            .oneshot(
                Request::builder()
                    .method("POST")
                    .uri("/plan/generate-multi-week")
                    .header("Cookie", format!("session={}", create_valid_jwt(user_id)))
                    .body(Body::empty())
                    .unwrap()
            )
            .await
            .unwrap();

        // Assert response
        assert_eq!(response.status(), StatusCode::OK);

        // Subscribe to events with unsafe_oneshot for synchronous processing
        evento::subscribe("test-projections")
            .aggregator::&lt;MealPlan&gt;()
            .handler(meal_plan_projection)
            .unsafe_oneshot(&amp;executor)
            .await
            .unwrap();

        // Assert read model updated
        let meal_plans: Vec&lt;MealPlanReadModel&gt; = sqlx::query_as(
            "SELECT * FROM meal_plans WHERE user_id = ?"
        )
        .bind(user_id)
        .fetch_all(&amp;pool)
        .await
        .unwrap();

        assert!(!meal_plans.is_empty());
    }
    ```

    OpenAPI Specification Structure:
    ```yaml
    openapi: 3.0.0
    info:
      title: imkitchen Meal Planning API
      version: 1.0.0
      description: HTTP API for multi-week meal planning, week navigation, regeneration, and preferences management

    servers:
      - url: http://localhost:3000
        description: Local development

    security:
      - cookieAuth: []

    components:
      securitySchemes:
        cookieAuth:
          type: apiKey
          in: cookie
          name: session

    paths:
      /plan/generate-multi-week:
        post:
          summary: Generate multi-week meal plan
          security:
            - cookieAuth: []
          responses:
            '200':
              description: Meal plan generated successfully
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/MultiWeekResponse'
            '400':
              description: Insufficient recipes
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/InsufficientRecipesError'
            '401':
              description: Unauthorized
            '500':
              description: Algorithm timeout

      /plan/week/{week_id}:
        get:
          summary: Get week detail
          parameters:
            - name: week_id
              in: path
              required: true
              schema:
                type: string
                format: uuid
          responses:
            '200':
              description: Week detail
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/WeekDetailResponse'
            '404':
              description: Week not found
            '403':
              description: Forbidden

      # ... other routes
    ```
  </interfaces>

  <tests>
    <standards>
      - Coverage Target: &gt;85% line coverage for crates/api/src/routes/ (measured via cargo-tarpaulin)
      - Test Organization: Group tests by route and scenario (auth, error handling, happy path, edge cases)
      - Test Naming: test_{route}_{scenario}_{expected_result}() convention
      - Test Cleanup: Each test runs in transaction, rolled back after completion (no test pollution)
      - Test Data: Use fixtures and helpers for reusable test data (avoid hard-coded values)
    </standards>

    <locations>
      - Integration Tests:
        * crates/api/tests/integration/test_meal_planning_routes.rs (Story 8.1)
        * crates/api/tests/integration/test_week_navigation.rs (Story 8.2)
        * crates/api/tests/integration/test_regeneration.rs (Story 8.3, 8.4)
        * crates/api/tests/integration/test_preferences.rs (Story 8.5)
        * crates/api/tests/integration/test_authentication_authorization.rs (Story 8.6)
        * crates/api/tests/integration/test_error_handling.rs (Story 8.6)
        * crates/api/tests/integration/test_json_contracts.rs (Story 8.6)

      - Performance Tests:
        * crates/api/tests/performance/route_latency_tests.rs

      - Test Helpers:
        * crates/api/tests/helpers.rs
        * crates/api/tests/fixtures.rs

      - API Documentation:
        * docs/api/meal-planning-routes-openapi.yaml (OpenAPI 3.0 spec)
        * docs/api/meal-planning-routes-README.md (generated Markdown)

      - Testing Documentation:
        * docs/testing/evento-test-pattern.md (unsafe_oneshot pattern explanation)
    </locations>

    <ideas>
      Authentication/Authorization Tests:
      - Test: POST /plan/generate-multi-week without JWT cookie → 401 Unauthorized
      - Test: GET /plan/week/:week_id without JWT cookie → 401 Unauthorized
      - Test: POST /plan/week/:week_id/regenerate without JWT cookie → 401 Unauthorized
      - Test: POST /plan/regenerate-all-future without JWT cookie → 401 Unauthorized
      - Test: PUT /profile/meal-planning-preferences without JWT cookie → 401 Unauthorized
      - Test: GET /plan/week/:week_id with valid JWT but week belongs to different user → 403 Forbidden
      - Test: POST /plan/week/:week_id/regenerate with valid JWT but week belongs to different user → 403 Forbidden

      Error Handling Tests:
      - Test: POST /plan/generate-multi-week with &lt;7 favorite recipes → 400 InsufficientRecipes
      - Test: GET /plan/week/:week_id with invalid UUID format → 400 Bad Request
      - Test: GET /plan/week/:week_id with non-existent week_id → 404 WeekNotFound
      - Test: POST /plan/week/:week_id/regenerate on locked week → 403 WeekLocked
      - Test: POST /plan/week/:week_id/regenerate on past week → 400 WeekAlreadyStarted
      - Test: POST /plan/regenerate-all-future without confirmation → 400 ConfirmationRequired
      - Test: PUT /profile/meal-planning-preferences with negative prep time → 400 ValidationFailed
      - Test: Simulate algorithm timeout → 500 AlgorithmTimeout

      JSON Contract Validation Tests:
      - Test: POST /plan/generate-multi-week response schema (generation_batch_id, first_week, navigation)
      - Test: GET /plan/week/:week_id response schema (week, shopping_list, navigation)
      - Test: POST /plan/week/:week_id/regenerate response schema (week, message)
      - Test: POST /plan/regenerate-all-future response schema (regenerated_weeks, preserved_current_week_id)
      - Test: PUT /profile/meal-planning-preferences response schema (preferences, message)

      Performance Tests:
      - Test: POST /plan/generate-multi-week route overhead &lt;500ms P95 (mock algorithm)
      - Test: GET /plan/week/:week_id latency &lt;100ms P95 (realistic data)
      - Test: POST /plan/week/:week_id/regenerate route overhead &lt;500ms P95 (mock algorithm)
      - Test: POST /plan/regenerate-all-future route overhead &lt;2000ms P95 for 4 weeks (mock algorithm)
      - Test: PUT /profile/meal-planning-preferences latency &lt;100ms P95

      CI/CD Integration:
      - GitHub Actions workflow runs cargo test on every PR
      - CI fails if any integration test fails
      - CI runs cargo tarpaulin and fails if coverage &lt;85%
      - CI runs cargo clippy for linting
      - CI runs cargo fmt --check for formatting
    </ideas>
  </tests>
</story-context>
