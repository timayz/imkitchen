<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>3.13</storyId>
    <title>Next-Week-Only Meal Plan Generation</title>
    <status>Approved</status>
    <generatedAt>2025-10-23</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-3.13.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user generating or regenerating a meal plan</asA>
    <iWant>the system to always create plans starting from next Monday</iWant>
    <soThat>I have time to shop and prepare for the upcoming week without disrupting my current week's meals</soThat>
    <tasks>
      <task id="T1" status="pending">
        <title>Implement calculate_next_week_start() utility function</title>
        <description>Create helper function in meal_planning crate that returns next Monday based on current date using chrono::Weekday match pattern (see Technical Notes in story)</description>
        <location>crates/meal_planning/src/lib.rs or new utils.rs module</location>
        <acceptance-criteria>AC1, AC7</acceptance-criteria>
      </task>
      <task id="T2" status="pending">
        <title>Update post_generate_meal_plan HTTP handler</title>
        <description>Replace current start_date calculation (Utc::now()) with calculate_next_week_start() call in src/routes/meal_plan.rs:403</description>
        <location>src/routes/meal_plan.rs:260-473</location>
        <acceptance-criteria>AC2</acceptance-criteria>
      </task>
      <task id="T3" status="pending">
        <title>Update post_regenerate_meal_plan HTTP handler</title>
        <description>Enforce next-week-only constraint in regeneration handler - use calculate_next_week_start() instead of existing plan's start_date</description>
        <location>src/routes/meal_plan.rs:981-1070</location>
        <acceptance-criteria>AC3, AC4</acceptance-criteria>
      </task>
      <task id="T4" status="pending">
        <title>Add command validation for start_date</title>
        <description>Add validation in algorithm or command handler to reject start_date in past or current week - return MealPlanningError::InvalidWeekStart</description>
        <location>crates/meal_planning/src/algorithm.rs:284-296</location>
        <acceptance-criteria>AC4</acceptance-criteria>
      </task>
      <task id="T5" status="pending">
        <title>Update calendar and dashboard templates</title>
        <description>Modify Askama templates to display "Next Week's Meals" label and "Week of {next Monday} - {next Sunday}" date range</description>
        <location>templates/meal_plan.html, templates/dashboard.html</location>
        <acceptance-criteria>AC6</acceptance-criteria>
      </task>
      <task id="T6" status="pending">
        <title>Update GenerateMealPlanCommand structure</title>
        <description>Remove start_date parameter from command (if feasible) or document that it must be calculated via calculate_next_week_start() before creating command</description>
        <location>crates/meal_planning/src/commands.rs:8-18</location>
        <acceptance-criteria>AC2</acceptance-criteria>
      </task>
      <task id="T7" status="pending">
        <title>Write unit tests for calculate_next_week_start()</title>
        <description>Test all 7 weekdays return correct next Monday offset (Mon->+7, Tue->+6, ..., Sun->+1). Include edge case tests.</description>
        <location>crates/meal_planning/src/lib.rs or utils.rs (mod tests)</location>
        <acceptance-criteria>AC1, AC7</acceptance-criteria>
      </task>
      <task id="T8" status="pending">
        <title>Write integration tests for next-week enforcement</title>
        <description>Integration tests verifying POST /meal-plan/generate and /regenerate create plans with start_date = next Monday. Test validation rejection of past/current week dates.</description>
        <location>tests/meal_plan_integration_tests.rs</location>
        <acceptance-criteria>AC2, AC3, AC4</acceptance-criteria>
      </task>
      <task id="T9" status="pending">
        <title>Write E2E tests for week transition and visual indicators</title>
        <description>Playwright tests for week transition behavior (Sunday->Monday), dashboard/calendar labels showing correct next-week dates</description>
        <location>e2e/meal-planning.spec.ts</location>
        <acceptance-criteria>AC5, AC6</acceptance-criteria>
      </task>
      <task id="T10" status="pending">
        <title>Update documentation and comments</title>
        <description>Add inline comments documenting next-week-only business rule in key locations (commands, handlers, algorithm). Update tech spec if needed.</description>
        <location>Multiple files (crates/meal_planning/*, src/routes/meal_plan.rs)</location>
        <acceptance-criteria>All</acceptance-criteria>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1">
      <title>Next Week Calculation</title>
      <items>
        <item>System calculates "next week" as the Monday following the current week</item>
        <item>If today is Monday-Sunday, next week starts on the coming Monday</item>
        <item>Week boundaries always Monday-Sunday (Monday = start, Sunday = end)</item>
      </items>
    </criterion>
    <criterion id="AC2">
      <title>Generate Meal Plan (First Time)</title>
      <items>
        <item>When user clicks "Generate Meal Plan" for the first time</item>
        <item>System creates meal plan starting from next Monday</item>
        <item>Confirmation message: "Meal plan generated for Week of {Monday date}"</item>
        <item>Calendar displays next week (Monday-Sunday)</item>
      </items>
    </criterion>
    <criterion id="AC3">
      <title>Regenerate Meal Plan</title>
      <items>
        <item>When user clicks "Regenerate Meal Plan" on existing plan</item>
        <item>System archives current plan</item>
        <item>Creates new plan starting from next Monday (not current week)</item>
        <item>User confirmation required: "This will replace your meal plan for next week. Continue?"</item>
        <item>After regeneration, calendar shows next week</item>
      </items>
    </criterion>
    <criterion id="AC4">
      <title>Current Week Protection</title>
      <items>
        <item>System never overwrites or regenerates the current week's plan</item>
        <item>If user has an active plan for current week, it remains untouched</item>
        <item>Regeneration only affects next week forward</item>
      </items>
    </criterion>
    <criterion id="AC5">
      <title>Week Transition Behavior</title>
      <items>
        <item>On Sunday night/Monday morning when week transitions</item>
        <item>Previous "next week" becomes "current week"</item>
        <item>User can then generate a new "next week" plan</item>
        <item>System maintains one active plan at a time</item>
      </items>
    </criterion>
    <criterion id="AC6">
      <title>Visual Indicators</title>
      <items>
        <item>Dashboard shows "Next Week's Meals" section</item>
        <item>Calendar header displays: "Week of {next Monday date} - {next Sunday date}"</item>
        <item>Clear labeling distinguishes current week vs next week</item>
      </items>
    </criterion>
    <criterion id="AC7">
      <title>Edge Cases</title>
      <items>
        <item>If today is Sunday, next week starts tomorrow (Monday)</item>
        <item>If today is Monday, next week starts in 7 days</item>
        <item>Timezone handling uses user's local timezone</item>
      </items>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-3.md</path>
        <title>Technical Specification: Intelligent Meal Planning Engine</title>
        <section>Overview - Key Business Rule</section>
        <snippet>All meal plan generation and regeneration operations create plans for **next week only** (Monday-Sunday starting from the Monday following the current week). This forward-looking approach gives users time to shop and prepare without disrupting the current week's meals.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-3.md</path>
        <title>Technical Specification: Intelligent Meal Planning Engine</title>
        <section>MealPlan Aggregate - Commands</section>
        <snippet>Commands: GenerateMealPlan, ReplaceMealSlot, RegenerateMealPlan. Events: MealPlanGenerated, MealSlotReplaced, MealPlanRegenerated, RecipeUsedInRotation, RotationCycleReset</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-3.md</path>
        <title>Technical Specification: Intelligent Meal Planning Engine</title>
        <section>Algorithm Pseudocode - Step 4</section>
        <snippet>Generate meal slots (7 days Ã— 3 meals = 21 slots). Note: start_date is always Monday (week convention)</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>Week Start Convention</section>
        <snippet>All week-based data structures in imkitchen use **Monday as the first day of the week**. This applies to meal plans, shopping lists, calendar displays, and all date calculations. Week start dates are always Mondays in ISO 8601 format.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>Next-Week-Only Meal Planning</section>
        <snippet>All meal plan generation and regeneration operations create plans for **next week only** (the Monday-Sunday period starting from the Monday following the current week). This business rule ensures users have adequate time to shop and prepare, prevents disruption of in-progress meals, and simplifies the MVP by avoiding multi-week plan management.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic 3 - Story 3.1</title>
        <section>Acceptance Criteria #5</section>
        <snippet>Meal plan always starts from next Monday (see Story 3.13 - Next-Week-Only Generation)</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic 3 - Story 3.7</title>
        <section>Acceptance Criteria #4</section>
        <snippet>Regenerated plan always starts from next Monday (see Story 3.13 - Next-Week-Only Generation)</snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/commands.rs</path>
        <kind>domain-command</kind>
        <symbol>GenerateMealPlanCommand</symbol>
        <lines>8-18</lines>
        <reason>Command structure for meal plan generation - needs modification to enforce next-week-only constraint (remove start_date parameter, calculate internally)</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/commands.rs</path>
        <kind>domain-command</kind>
        <symbol>RegenerateMealPlanCommand</symbol>
        <lines>41-50</lines>
        <reason>Command structure for regeneration - implementation must enforce next-week calculation</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>domain-service</kind>
        <symbol>MealPlanningAlgorithm::generate</symbol>
        <lines>284-296</lines>
        <reason>Core algorithm that accepts start_date parameter - must validate it is next Monday</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/meal_plan.rs</path>
        <kind>http-route</kind>
        <symbol>post_generate_meal_plan</symbol>
        <lines>260-262, 403</lines>
        <reason>HTTP handler currently calculates start_date as "today" - must change to calculate_next_week_start()</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/meal_plan.rs</path>
        <kind>http-route</kind>
        <symbol>post_regenerate_meal_plan</symbol>
        <lines>981-983</lines>
        <reason>HTTP handler for regeneration - must enforce next-week-only constraint</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/events.rs</path>
        <kind>domain-event</kind>
        <symbol>MealPlanGenerated</symbol>
        <reason>Event that captures start_date - used for read model projection</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/read_model.rs</path>
        <kind>cqrs-projection</kind>
        <symbol>project_meal_plan_generated</symbol>
        <reason>Projection handler - no changes needed, but validates start_date persisted correctly</reason>
      </file>
    </code>
    <dependencies>
      <rust>
        <chrono version="0.4">Date/time handling for next week calculation, weekday operations (Weekday enum), Local timezone support</chrono>
        <evento version="1.4">Event sourcing framework - aggregates, commands, events, projections</evento>
        <sqlx version="0.8">Database queries for read models (meal_plans table)</sqlx>
        <axum version="0.8">HTTP routing framework for handlers</axum>
        <askama version="0.14">Template rendering for calendar views with date formatting</askama>
        <serde version="1.0">JSON serialization for rotation state and API responses</serde>
        <uuid version="1.10">Aggregate/entity IDs</uuid>
        <anyhow version="1.0">Error handling</anyhow>
        <thiserror version="2.0">Custom error types for domain errors</thiserror>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="C1">Event Sourcing Architecture: All changes to MealPlan aggregate must be via evento events (MealPlanGenerated, MealPlanRegenerated). Direct database writes to read models are prohibited.</constraint>
    <constraint id="C2">CQRS Pattern: Commands write to evento event stream; queries read from SQLx read models (meal_plans, meal_assignments tables). Read models updated via projection handlers.</constraint>
    <constraint id="C3">Monday-First Weeks: All week start dates must be Mondays. System enforces this via date validation and calculation.</constraint>
    <constraint id="C4">Rotation Integrity: Recipe rotation state must be preserved across regenerations. Rotation cycle only resets when all favorites used once.</constraint>
    <constraint id="C5">Command Validation: All commands must validate business rules before emitting events (e.g., minimum 7 recipes, active plan status, authorization).</constraint>
    <constraint id="C6">Testing Requirements (TDD): Story 3.13 requires unit tests for calculate_next_week_start(), integration tests for command handlers, E2E tests for user flows. Minimum 80% code coverage.</constraint>
    <constraint id="C7">Date Format: All dates stored/transmitted as ISO 8601 strings (YYYY-MM-DD). Use chrono::NaiveDate for parsing/formatting.</constraint>
    <constraint id="C8">Timezone Handling: Use chrono::Local for user's local timezone. Server-side calculations respect user timezone context.</constraint>
    <constraint id="C9">Single Active Plan: Only one meal plan can be active per user at any time. Enforce via database unique constraint (user_id, is_active=true).</constraint>
    <constraint id="C10">Immutability: Events are immutable once committed. Use new events to represent state changes (e.g., MealPlanRegenerated creates new assignments, doesn't modify existing).</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>MealPlanningAlgorithm::generate</name>
      <kind>domain-service</kind>
      <signature>pub fn generate(start_date: &str, favorites: Vec&lt;RecipeForPlanning&gt;, constraints: UserConstraints, rotation_state: RotationState, seed: Option&lt;u64&gt;) -> Result&lt;(Vec&lt;MealAssignment&gt;, RotationState), MealPlanningError&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs:284</path>
      <usage>Must be called with next Monday as start_date. Returns meal assignments for 7 days (21 meals) and updated rotation state.</usage>
    </interface>
    <interface>
      <name>evento::save / evento::commit</name>
      <kind>framework-api</kind>
      <signature>evento::save::&lt;MealPlanAggregate&gt;(aggregator_id).data(&event_data).metadata(&meta).commit(executor).await</signature>
      <usage>Persist domain events to evento event store. All MealPlan state changes must use this API.</usage>
    </interface>
    <interface>
      <name>evento::load</name>
      <kind>framework-api</kind>
      <signature>evento::load::&lt;MealPlanAggregate, _&gt;(executor, aggregator_id).await</signature>
      <usage>Reconstitute MealPlan aggregate from event stream for commands (e.g., regeneration)</usage>
      </interface>
    <interface>
      <name>RotationState::from_json / to_json</name>
      <kind>domain-model</kind>
      <signature>pub fn from_json(json: &str) -> Result&lt;Self, serde_json::Error&gt;; pub fn to_json(&self) -> Result&lt;String, serde_json::Error&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
      <usage>Serialize/deserialize rotation state for event storage. Used in GenerateMealPlanCommand and MealPlanRegenerated event.</usage>
    </interface>
    <interface>
      <name>chrono::Weekday</name>
      <kind>library-enum</kind>
      <signature>enum Weekday { Mon, Tue, Wed, Thu, Fri, Sat, Sun }</signature>
      <usage>Use for calculating days until next Monday in calculate_next_week_start() function.</usage>
    </interface>
    <interface>
      <name>chrono::Local::now().date_naive()</name>
      <kind>library-fn</kind>
      <signature>pub fn date_naive() -> NaiveDate</signature>
      <usage>Get today's date in user's local timezone for next-week calculation.</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      <para>imkitchen follows strict TDD requirements with 80% minimum code coverage (enforced via cargo tarpaulin). All domain logic must have unit tests; all HTTP routes must have integration tests; all critical user flows must have E2E tests using Playwright.</para>
      <para>Test organization: Unit tests live in same file as implementation (mod tests); integration tests in tests/ directory; E2E tests in e2e/ directory.</para>
      <para>Event sourcing tests: Use evento test utilities to verify event emissions, aggregate state reconstruction, and projection correctness.</para>
    </standards>
    <locations>
      <location>crates/meal_planning/src/algorithm.rs (mod tests section)</location>
      <location>crates/meal_planning/src/commands.rs (mod tests section)</location>
      <location>tests/meal_plan_integration_tests.rs</location>
      <location>e2e/meal-planning.spec.ts (Playwright)</location>
    </locations>
    <ideas>
      <idea criteria="AC1">Unit test: calculate_next_week_start() returns correct Monday for all 7 weekdays (Mon->+7days, Tue->+6days, ..., Sun->+1day)</idea>
      <idea criteria="AC1">Unit test: Week boundaries validation (start=Monday, end=Sunday, 7 days apart)</idea>
      <idea criteria="AC2">Integration test: POST /meal-plan/generate creates plan with start_date = next Monday</idea>
      <idea criteria="AC2">Integration test: Confirmation message includes correct Monday date in ISO format</idea>
      <idea criteria="AC3">Integration test: POST /meal-plan/regenerate creates plan with start_date = next Monday (not current week)</idea>
      <idea criteria="AC3">Integration test: Regeneration archives old plan (is_active=false) and creates new active plan</idea>
      <idea criteria="AC4">Integration test: Attempt to regenerate with start_date in past/current week returns validation error</idea>
      <idea criteria="AC4">Unit test: Command validation rejects start_date <= today</idea>
      <idea criteria="AC5">E2E test: Week transition Sunday->Monday correctly updates next week calculation</idea>
      <idea criteria="AC6">Integration test: Calendar template receives "Next Week's Meals" label when plan is next week</idea>
      <idea criteria="AC6">Integration test: Dashboard displays correct date range "Week of {Monday} - {Sunday}"</idea>
      <idea criteria="AC7">Unit test: Edge case - today is Sunday, next week starts tomorrow (Monday)</idea>
      <idea criteria="AC7">Unit test: Edge case - today is Monday, next week starts in 7 days</idea>
      <idea criteria="AC7">Integration test: Timezone handling uses chrono::Local for user's timezone</idea>
    </ideas>
  </tests>
</story-context>
