<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>10</epicId>
    <storyId>3</storyId>
    <title>Bug Fixing and Edge Case Handling</title>
    <status>Approved</status>
    <generatedAt>2025-10-27</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-10.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>identify, triage, and fix bugs discovered during testing</iWant>
    <soThat>the enhanced meal planning system is robust and handles edge cases gracefully before production deployment</soThat>
    <tasks>
      - Bug discovery and tracking (via E2E and performance tests)
      - Critical bug fixing (deployment blockers)
      - Medium bug fixing (or defer to future release)
      - Edge case handling implementation (0 recipes, >100 recipes, invalid dates)
      - User-friendly error messages (no stack traces)
      - Regression test suite (TDD for bug fixes)
      - Bug fix changelog documentation
    </tasks>
  </story>

  <acceptanceCriteria>
    1. All critical bugs fixed (blocker for deployment)
    2. Medium bugs triaged (fix or defer to future release)
    3. Low bugs documented (known issues list)
    4. Edge cases handled gracefully (no crashes)
    5. Error messages user-friendly (no stack traces shown)
    6. Regression tests added for fixed bugs
    7. Bug fix changelog documented
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-10.md</path>
        <title>Technical Specification: Story 10.3</title>
        <section>Story 10.3: Bug Fixing and Edge Case Handling (lines 759-786)</section>
        <snippet>Authoritative acceptance criteria, bug triage criteria, edge case requirements, error handling validation</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-10.md</path>
        <title>Security - Error Handling</title>
        <section>Non-Functional Requirements - Security (lines 544-562)</section>
        <snippet>No stack traces in user-facing errors, Request IDs for debugging, graceful degradation</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-10.md</path>
        <title>Reliability - Graceful Error Handling</title>
        <section>Non-Functional Requirements - Reliability (lines 564-581)</section>
        <snippet>All error states render user-friendly messages, graceful degradation, no crashes</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic 10, Story 10.3</title>
        <section>Epic 10, Story 10.3 (lines 2339-2360)</section>
        <snippet>User story statement, prerequisites (Story 10.1, 10.2 testing reveals bugs), technical notes (bug tracking, regression tests)</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>src/errors.rs</path>
        <kind>error-handling</kind>
        <symbol>AppError</symbol>
        <lines>N/A (to be created/updated)</lines>
        <reason>Custom error type implementing IntoResponse for user-friendly error messages, Request ID integration</reason>
      </artifact>
      <artifact>
        <path>tests/regression/</path>
        <kind>test-directory</kind>
        <symbol>Regression tests</symbol>
        <lines>N/A (to be created)</lines>
        <reason>TDD for bug fixes: each fixed bug gets regression test to prevent reoccurrence</reason>
      </artifact>
      <artifact>
        <path>docs/known-issues.md</path>
        <kind>documentation</kind>
        <symbol>Known issues list</symbol>
        <lines>N/A (to be created)</lines>
        <reason>Document low-priority bugs deferred to future releases with workarounds</reason>
      </artifact>
      <artifact>
        <path>CHANGELOG.md</path>
        <kind>documentation</kind>
        <symbol>Changelog</symbol>
        <lines>N/A (to be updated)</lines>
        <reason>Epic 10 bug fixes section listing all fixed bugs with GitHub Issue numbers</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <package name="axum" version="0.8">HTTP error handlers (IntoResponse trait)</package>
        <package name="thiserror" version="2.0">Error derive macros for custom error types</package>
        <package name="anyhow" version="1.0">Error context and backtrace (internal only, not user-facing)</package>
        <package name="opentelemetry" version="0.31">Request ID (trace ID) for error correlation</package>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    - Bug triage criteria: Critical (deployment blocker), Medium (partial failure, workaround exists), Low (cosmetic, edge case)
    - All edge cases must have integration or E2E tests (unit tests insufficient for validation)
    - Error messages must be user-friendly: "Please add more recipes" (not "IndexError: list index out of range")
    - No stack traces in HTML error pages or JSON responses (security requirement)
    - Request IDs must be displayed for debugging (OpenTelemetry trace ID)
    - TDD for bug fixes: write failing test first, implement fix, verify test passes on fixed code
    - Regression tests must fail on pre-fix code (validates test quality)
    - All fixed bugs must be listed in CHANGELOG.md with GitHub Issue numbers
  </constraints>

  <interfaces>
    <interface>
      <name>AppError</name>
      <kind>Error type</kind>
      <signature>impl IntoResponse for AppError</signature>
      <path>src/errors.rs</path>
      <description>Custom error type for user-friendly error handling, maps Rust errors to HTTP responses</description>
    </interface>
    <interface>
      <name>GET /error</name>
      <kind>HTTP route</kind>
      <signature>Query { message: String, request_id: String } -&gt; 200 HTML (error_page.html)</signature>
      <path>src/routes/error</path>
      <description>User-friendly error page with request ID (no stack traces)</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TDD for bug fixes: write failing test first, implement fix, verify test passes. Regression tests in tests/regression/ directory. Each test named after GitHub Issue (bug_123_meal_plan_generation.rs). Edge case tests must verify graceful error handling (no panics). E2E tests for error scenarios (generate with 0 recipes) must show user-friendly message. Integration tests for boundary cases (exactly 3 recipes, exactly 8 weeks). Bug triage via GitHub Issues (labels: critical, medium, low).
    </standards>
    <locations>
      tests/regression/ (regression tests for fixed bugs)
      tests/integration/ (edge case tests)
      e2e/tests/ (E2E error scenario tests)
    </locations>
    <ideas>
      <idea ac="1">Test: Create GitHub Issues for all critical bugs discovered in Story 10.1/10.2</idea>
      <idea ac="1">Test: Reproduce each critical bug with failing test, implement fix, verify test passes</idea>
      <idea ac="2">Test: Triage medium bugs (fix vs defer), document decision in GitHub Issue</idea>
      <idea ac="3">Test: Create docs/known-issues.md with low-priority bugs and workarounds</idea>
      <idea ac="4">Test: Edge case - User generates meal plan with 0 favorite recipes, verify graceful error message</idea>
      <idea ac="4">Test: Edge case - User has >100 favorite recipes, verify algorithm handles efficiently</idea>
      <idea ac="4">Test: Edge case - Invalid week dates ("2025-02-30"), verify 400 Bad Request with user-friendly message</idea>
      <idea ac="5">Test: Audit Axum error handlers, verify no stack traces in HTML/JSON responses</idea>
      <idea ac="5">Test: Implement custom AppError with IntoResponse, verify Request ID displayed</idea>
      <idea ac="6">Test: For each fixed bug, verify regression test exists and fails on pre-fix code</idea>
      <idea ac="7">Test: Update CHANGELOG.md with "Epic 10 - Bug Fixes" section listing all fixed bugs</idea>
    </ideas>
  </tests>
</story-context>
