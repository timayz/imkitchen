<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.3</storyId>
    <title>Password Reset Flow</title>
    <status>Draft</status>
    <generatedAt>2025-10-12</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-1.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user who forgot my password</asA>
    <iWant>to reset it via email</iWant>
    <soThat>I can regain access to my account</soThat>
    <tasks>
      - Create password reset request page template (AC: 1, 2)
      - Implement POST /password-reset request handler (AC: 2, 3)
      - Create password reset completion page template (AC: 4, 5)
      - Implement POST /password-reset/:token completion handler (AC: 4, 5, 6, 7, 8)
      - Add GET /password-reset route (AC: 1)
      - Add GET /password-reset/:token route (AC: 4)
      - Implement email sending via SMTP (AC: 3)
      - Add domain events and aggregate updates (AC: 6)
      - Add comprehensive tests (AC: 1-8)
      - Security validations (AC: 4, 8)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">"Forgot Password" link available on login page</criterion>
    <criterion id="2">User enters email address to request reset</criterion>
    <criterion id="3">System sends password reset email with time-limited token (valid 1 hour)</criterion>
    <criterion id="4">Reset link directs to password reset form with token validation</criterion>
    <criterion id="5">User enters new password (min 8 characters) and confirms</criterion>
    <criterion id="6">Successful reset invalidates old password and all existing sessions</criterion>
    <criterion id="7">User redirected to login page with success message</criterion>
    <criterion id="8">Expired or invalid tokens display clear error message</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/solution-architecture.md" title="Solution Architecture Document" section="5.1 Auth Strategy">
        JWT Cookie-Based Authentication strategy: JWT signing using HS256 algorithm, token includes claims (user_id, email, tier, exp, iat), HTTP-only, Secure, SameSite=Lax cookies, 7-day expiration
      </doc>
      <doc path="docs/solution-architecture.md" title="Solution Architecture Document" section="17.1 Authentication Security">
        Argon2 password hashing (OWASP-recommended) with default secure parameters (memory=65536, iterations=3, parallelism=4), salt randomly generated per password
      </doc>
      <doc path="docs/solution-architecture.md" title="Solution Architecture Document" section="11.3 Key Integrations">
        SMTP (lettre) for password reset emails - configuration via SMTP host, port, credentials (env vars), error handling: queue failed emails for retry
      </doc>
      <doc path="docs/tech-spec-epic-1.md" title="Technical Specification: User Authentication" section="Commands">
        RequestPasswordResetCommand with email validation, ResetPasswordCommand with reset_token and new_password (min 8 characters), PasswordResetRequested and PasswordChanged events
      </doc>
      <doc path="docs/epics.md" title="Epic Breakdown" section="Story 1.3">
        Password Reset Flow acceptance criteria and technical notes: reset tokens stored with expiration timestamp, email sent via configured SMTP service, emit PasswordResetRequested and PasswordChanged events
      </doc>
      <doc path="docs/stories/story-1.1.md" title="Story 1.1: User Registration" section="Implementation">
        Registration implementation pattern: Argon2 password hashing via hash_password utility, evento aggregate pattern with UserCreated event, JWT generation with generate_jwt
      </doc>
      <doc path="docs/stories/story-1.2.md" title="Story 1.2: User Login" section="Implementation">
        Login implementation pattern: query_user_for_login from read model, verify_password with Argon2, generate_jwt with user claims, HTTP-only secure cookie with 7-day expiration
      </doc>
    </docs>
    <code>
      <artifact path="crates/user/src/password.rs" kind="module" symbol="hash_password, verify_password" lines="1-50">
        Password hashing utilities using Argon2 - reuse for password reset completion (hash new password before storing)
      </artifact>
      <artifact path="crates/user/src/jwt.rs" kind="module" symbol="generate_jwt, validate_jwt, Claims" lines="1-80">
        JWT utilities for token generation and validation - extend for password reset tokens with 1-hour expiration
      </artifact>
      <artifact path="crates/user/src/read_model.rs" kind="module" symbol="query_user_by_email, query_user_for_login" lines="56-112">
        Read model query functions - reuse query_user_by_email for password reset request validation
      </artifact>
      <artifact path="crates/user/src/aggregate.rs" kind="module" symbol="UserAggregate" lines="1-100">
        User aggregate with evento event handlers - add handlers for PasswordResetRequested and PasswordChanged events
      </artifact>
      <artifact path="crates/user/src/events.rs" kind="module" symbol="UserCreated" lines="1-30">
        Domain events - add PasswordResetRequested and PasswordChanged event structs following existing pattern
      </artifact>
      <artifact path="crates/user/src/commands.rs" kind="module" symbol="register_user, RegisterUserCommand" lines="1-100">
        Command handlers pattern - create RequestPasswordResetCommand and ResetPasswordCommand following existing pattern with validator derives
      </artifact>
      <artifact path="src/routes/auth.rs" kind="module" symbol="get_login, post_login, get_register, post_register" lines="1-235">
        Auth route handlers - add 4 new handlers: GET /password-reset, POST /password-reset, GET /password-reset/:token, POST /password-reset/:token
      </artifact>
      <artifact path="templates/pages/login.html" kind="template" symbol="login form" lines="1-68">
        Login template pattern - use as reference for password reset request and completion templates (Askama syntax, TwinSpark attributes, Tailwind CSS styling)
      </artifact>
      <artifact path="tests/auth_integration_tests.rs" kind="test" symbol="test_login_with_valid_credentials_succeeds" lines="1-453">
        Auth integration test patterns - follow for password reset flow tests (test app setup, evento processing, HTTP requests, assertions)
      </artifact>
      <artifact path="tests/common/mod.rs" kind="test_util" symbol="setup_test_db, create_test_app" lines="1-100">
        Test utilities - reuse setup_test_db and create_test_app for password reset integration tests
      </artifact>
    </code>
    <dependencies>
      <rust>
        <package name="lettre" version="0.11+" note="SMTP email client - add to Cargo.toml for password reset emails" />
        <package name="argon2" version="0.5" note="Password hashing - already present, reuse for new password hashing" />
        <package name="jsonwebtoken" version="9.3" note="JWT tokens - already present, extend for reset tokens with 1-hour expiration" />
        <package name="validator" version="0.20" note="Input validation - already present, use for email and password validation" />
        <package name="evento" version="1.3" note="Event sourcing - already present, use for PasswordChanged event" />
        <package name="sqlx" version="0.8" note="Database queries - already present, use for user queries" />
        <package name="askama" version="0.14" note="Templates - already present, use for password reset page templates" />
        <package name="axum" version="0.8" note="HTTP server - already present, add password reset routes" />
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="event-sourcing" type="pattern">
      Password reset does NOT create events for request (stateless approach via JWT tokens). PasswordChanged event records successful password updates. Event sourcing maintains audit trail of all password changes.
    </constraint>
    <constraint id="security-no-enumeration" type="security">
      Return success response regardless of email existence to prevent user enumeration. Same "success" message whether email exists or not (AC: 2, 4).
    </constraint>
    <constraint id="token-expiration" type="security">
      Reset tokens must be valid for exactly 1 hour. Expired tokens display clear error message (AC: 3, 8).
    </constraint>
    <constraint id="argon2-hashing" type="security">
      Use Argon2 for password hashing with default secure parameters. Reuse existing hash_password utility from crates/user/src/password.rs (AC: 5).
    </constraint>
    <constraint id="jwt-pattern" type="pattern">
      Use JWT tokens for reset links (stateless, self-contained). Include user_id or email in claims, set exp to 1 hour from generation (AC: 3, 4, 8).
    </constraint>
    <constraint id="smtp-email" type="integration">
      Send password reset emails via lettre SMTP client. Configure via environment variables (SMTP_HOST, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD). Handle errors gracefully - log and return success (AC: 3).
    </constraint>
    <constraint id="session-invalidation" type="security">
      Successful password reset should invalidate old password. Optionally invalidate all existing JWT sessions (AC: 6). Note: Stateless JWTs cannot be revoked, but old password is invalid for future logins.
    </constraint>
    <constraint id="tdd-approach" type="testing">
      Follow TDD: write tests first, then implement handlers. Minimum 80% code coverage (per solution-architecture.md Section 15.4).
    </constraint>
    <constraint id="server-rendering" type="pattern">
      Server-side rendering with Askama templates. POST/Redirect/Get pattern for form handling. TwinSpark progressive enhancement optional (AC: 1, 4, 7).
    </constraint>
    <constraint id="logging" type="observability">
      Log all password reset requests and completion attempts for security audit. Use tracing::warn for failed attempts, tracing::info for successful resets (AC: 3, 6).
    </constraint>
  </constraints>

  <interfaces>
    <interface name="hash_password" kind="function" signature="pub fn hash_password(password: &str) -> UserResult&lt;String&gt;" path="crates/user/src/password.rs">
      Hashes password using Argon2 with secure defaults. Returns hashed password string. Reuse for new password hashing in password reset completion (AC: 5).
    </interface>
    <interface name="verify_password" kind="function" signature="pub fn verify_password(password: &str, hash: &str) -> UserResult&lt;bool&gt;" path="crates/user/src/password.rs">
      Verifies password against Argon2 hash. Returns true if match, false otherwise. Not directly needed for password reset, but reference for pattern.
    </interface>
    <interface name="generate_jwt" kind="function" signature="pub fn generate_jwt(user_id: String, email: String, tier: String, secret: &str) -> UserResult&lt;String&gt;" path="crates/user/src/jwt.rs">
      Generates JWT token with claims (sub=user_id, email, tier, exp, iat). Extend to support custom expiration (1 hour for reset tokens vs 7 days for auth tokens) (AC: 3).
    </interface>
    <interface name="validate_jwt" kind="function" signature="pub fn validate_jwt(token: &str, secret: &str) -> UserResult&lt;Claims&gt;" path="crates/user/src/jwt.rs">
      Validates JWT token signature and expiration. Returns Claims struct. Use for reset token validation before rendering form and processing password change (AC: 4, 8).
    </interface>
    <interface name="query_user_by_email" kind="function" signature="pub async fn query_user_by_email(email: &str, pool: &SqlitePool) -> UserResult&lt;Option&lt;String&gt;&gt;" path="crates/user/src/read_model.rs">
      Queries user by email from read model. Returns Some(user_id) if exists, None otherwise. Use for password reset request validation (AC: 2).
    </interface>
    <interface name="query_user_for_login" kind="function" signature="pub async fn query_user_for_login(email: &str, pool: &SqlitePool) -> UserResult&lt;Option&lt;UserLoginData&gt;&gt;" path="crates/user/src/read_model.rs">
      Queries user with full data (id, email, password_hash, tier). Use for password reset completion to update password (AC: 5, 6).
    </interface>
    <interface name="UserAggregate" kind="struct" signature="pub struct UserAggregate { ... }" path="crates/user/src/aggregate.rs">
      User aggregate with event handlers. Add password_changed event handler to update password_hash field (AC: 6).
    </interface>
  </interfaces>

  <tests>
    <standards>
      Follow TDD approach: write tests first, then implementation. Use existing test patterns from tests/auth_integration_tests.rs. Test coverage minimum 80%. Integration tests use setup_test_db() and create_test_app() from tests/common/mod.rs. Mock SMTP email sending in tests (capture sent emails for assertions). Test security properties explicitly (no enumeration, token expiration, password invalidation).
    </standards>
    <locations>
      - tests/auth_integration_tests.rs (add password reset integration tests)
      - tests/common/mod.rs (reuse test utilities)
      - crates/user/tests/ (optional: unit tests for token generation/validation)
    </locations>
    <ideas>
      <test ac="1" idea="Integration test: GET /login contains 'Forgot Password' link" />
      <test ac="2" idea="Integration test: POST /password-reset with valid email returns success message" />
      <test ac="2,4" idea="Integration test: POST /password-reset with invalid email returns success (no enumeration)" />
      <test ac="3" idea="Integration test: POST /password-reset sends email with valid token (mock SMTP, capture email)" />
      <test ac="4" idea="Integration test: GET /password-reset/:token with valid token renders password form" />
      <test ac="4,8" idea="Integration test: GET /password-reset/:token with expired token shows error message" />
      <test ac="4,8" idea="Integration test: GET /password-reset/:token with invalid token shows error message" />
      <test ac="5" idea="Integration test: POST /password-reset/:token with valid password updates password in database" />
      <test ac="5" idea="Integration test: POST /password-reset/:token with short password (< 8 chars) shows validation error" />
      <test ac="5" idea="Integration test: POST /password-reset/:token with mismatched password confirmation shows error" />
      <test ac="6" idea="Integration test: After password reset, login with old password fails" />
      <test ac="6" idea="Integration test: After password reset, login with new password succeeds" />
      <test ac="7" idea="Integration test: POST /password-reset/:token redirects to /login with success message" />
      <test ac="8" idea="Unit test: JWT token generation with 1-hour expiration" />
      <test ac="8" idea="Unit test: JWT token validation rejects expired tokens" />
      <test ac="3" idea="Integration test: Reset token can only be used once (subsequent use shows error)" />
    </ideas>
  </tests>
</story-context>
