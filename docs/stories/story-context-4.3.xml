<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>3</storyId>
    <title>Multi-Week Shopping List Access</title>
    <status>Draft</status>
    <generatedAt>2025-10-18</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-4.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user</asA>
    <iWant>to view shopping lists for current and future weeks</iWant>
    <soThat>I can plan bulk shopping or shop ahead</soThat>
    <tasks>
      <task id="1" ac="3,5,6">
        <description>Update shopping list query to support week selection</description>
        <subtasks>
          <subtask>Modify GetShoppingListByWeek query in crates/shopping/src/read_model.rs to accept week_start_date parameter</subtask>
          <subtask>Add validation to ensure week_start_date is a valid Monday (ISO week start)</subtask>
          <subtask>Add upper bound check: future weeks limited to +4 weeks from current date</subtask>
          <subtask>Return empty shopping list with clear message if no meal plan exists for selected week</subtask>
          <subtask>Write unit tests for week validation logic (valid Monday, future limit, past week rejection)</subtask>
        </subtasks>
      </task>
      <task id="2" ac="1,2,4">
        <description>Implement week selector UI component</description>
        <subtasks>
          <subtask>Create week selector dropdown in templates/pages/shopping-list.html</subtask>
          <subtask>Populate dropdown with options: "This Week", "Next Week", "Week of Oct 21", "Week of Oct 28", "Week of Nov 4"</subtask>
          <subtask>Generate week options dynamically (current week + 4 future weeks)</subtask>
          <subtask>Highlight current week as default selection with distinct styling</subtask>
          <subtask>Add icons/labels to distinguish current vs future weeks</subtask>
        </subtasks>
      </task>
      <task id="3" ac="8">
        <description>Implement week selection with URL query params</description>
        <subtasks>
          <subtask>Update shopping list route handler to parse ?week=2025-10-21 query parameter</subtask>
          <subtask>Default to current week if query param missing or invalid</subtask>
          <subtask>Update dropdown selection state based on URL query param</subtask>
          <subtask>Implement TwinSpark or JavaScript to update URL when dropdown selection changes</subtask>
          <subtask>Ensure browser back/forward navigation works correctly with week selection</subtask>
        </subtasks>
      </task>
      <task id="4" ac="3,6">
        <description>Generate shopping lists on-demand for selected weeks</description>
        <subtasks>
          <subtask>Check if shopping list already exists for selected week (query shopping_lists by week_start_date)</subtask>
          <subtask>If exists, return cached shopping list from read model</subtask>
          <subtask>If not exists, trigger GenerateShoppingList command with selected week's meal plan</subtask>
          <subtask>Ensure each week's shopping list is independent (no cross-week ingredient aggregation)</subtask>
          <subtask>Handle edge case: meal plan not yet generated for future week (show helpful message)</subtask>
        </subtasks>
      </task>
      <task id="5" ac="1-8">
        <description>Update shopping list route handler</description>
        <subtasks>
          <subtask>Update GET /shopping route in src/routes/shopping.rs to accept optional week query param</subtask>
          <subtask>Parse and validate week parameter (ISO 8601 date, Monday check)</subtask>
          <subtask>Query meal plan for selected week, verify it exists</subtask>
          <subtask>Invoke shopping list query with validated week_start_date</subtask>
          <subtask>Pass week options and selected week to template for dropdown rendering</subtask>
          <subtask>Return 404 with helpful message if user requests past week (per AC #7)</subtask>
        </subtasks>
      </task>
      <task id="6" ac="1,4">
        <description>Styling and responsive design</description>
        <subtasks>
          <subtask>Style week selector dropdown with Tailwind CSS (consistent with app design)</subtask>
          <subtask>Add responsive styling for mobile (full-width dropdown, touch-friendly)</subtask>
          <subtask>Highlight current week with distinct color/badge (e.g., green "Current" label)</subtask>
          <subtask>Add loading indicator when switching weeks (if using AJAX)</subtask>
        </subtasks>
      </task>
      <task id="7" ac="1-8">
        <description>Comprehensive testing</description>
        <subtasks>
          <subtask>Unit test: GetShoppingListByWeek with various week_start_dates (current, future, past, invalid)</subtask>
          <subtask>Unit test: Week validation logic (reject past weeks, accept current + 4 future weeks, reject 5+ weeks ahead)</subtask>
          <subtask>Integration test: GET /shopping?week=2025-10-21 returns correct week's shopping list</subtask>
          <subtask>Integration test: GET /shopping with no query param defaults to current week</subtask>
          <subtask>Integration test: GET /shopping?week=&lt;past_date&gt; returns 404 error</subtask>
          <subtask>Integration test: GET /shopping?week=&lt;5_weeks_future&gt; returns 400 error (out of range)</subtask>
          <subtask>E2E Playwright test: Navigate to shopping list, select different week from dropdown, verify list updates</subtask>
          <subtask>E2E test: Verify URL updates when week selected, browser back/forward works correctly</subtask>
          <subtask>Achieve 80% code coverage for shopping list query and route handler (cargo tarpaulin)</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Shopping list page displays week selector dropdown</criterion>
    <criterion id="2">Options: "This Week", "Next Week", "Week of {date}" for upcoming weeks</criterion>
    <criterion id="3">Selecting week generates shopping list for that week's meals</criterion>
    <criterion id="4">Current week highlighted as default</criterion>
    <criterion id="5">Future weeks accessible up to 4 weeks ahead</criterion>
    <criterion id="6">Each week's shopping list independent (no cross-week aggregation)</criterion>
    <criterion id="7">Past weeks not accessible (out of scope for MVP)</criterion>
    <criterion id="8">Week selection persists in URL query param for bookmarking</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-4.md</path>
        <title>Technical Specification: Shopping &amp; Preparation Orchestration</title>
        <section>CQRS Implementation - GetShoppingListByWeek Query</section>
        <snippet>Query shopping list by user and week. Returns the shopping list for a specific user and week (if exists). Signature: GetShoppingListByWeek(user_id, week_start_date) returns Option&lt;ShoppingListData&gt;. Read model tables: shopping_lists (id, user_id, meal_plan_id, week_start_date, generated_at), shopping_list_items (id, shopping_list_id, ingredient_name, quantity, unit, category, is_collected).</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>2.3 Page Routing and Navigation</section>
        <snippet>Route pattern for shopping list with query parameters: GET /shopping (current week), GET /shopping/:week (specific week). Query param pattern for state: ?week=YYYY-MM-DD enables bookmarkable URLs and browser back/forward navigation.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>3.2 Data Models - Shopping Lists Table</section>
        <snippet>shopping_lists table schema: id (UUID), user_id, meal_plan_id, week_start_date (ISO 8601 date, Monday), generated_at (timestamp), item_count. Index: idx_shopping_lists_user_week ON (user_id, week_start_date) for efficient querying by user and week.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-4.3.md</path>
        <title>Story 4.3 Dev Notes</title>
        <section>Week Validation Rules</section>
        <snippet>Current week: Always accessible. Future weeks: +1 to +4 weeks from current date (4 weeks total). Past weeks: Rejected with 404 error (out of MVP scope). Invalid dates: Return 400 Bad Request with validation error. Week must start on Monday (ISO week standard).</snippet>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/read_model.rs</path>
        <kind>module</kind>
        <symbol>get_shopping_list_by_week</symbol>
        <lines>108-146</lines>
        <reason>Existing query function that retrieves shopping list by user_id and week_start_date. This function needs to be enhanced with week validation logic (Monday check, future week limits, past week rejection) per story requirements.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/shopping.rs</path>
        <kind>route_handler</kind>
        <symbol>show_shopping_list</symbol>
        <lines>18-94</lines>
        <reason>Current route handler for GET /shopping that displays shopping list for current week. Needs modification to parse and validate ?week=YYYY-MM-DD query parameter, calculate week options (current + 4 future), and pass to template for dropdown rendering.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/shopping.rs</path>
        <kind>helper_function</kind>
        <symbol>get_week_start</symbol>
        <lines>184-187</lines>
        <reason>Helper function that calculates Monday of a given week. This pattern should be reused for week validation logic to ensure all week calculations use consistent ISO week logic (Monday as week start).</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/read_model.rs</path>
        <kind>data_structure</kind>
        <symbol>ShoppingListData::group_by_category</symbol>
        <lines>178-229</lines>
        <reason>Existing method that groups shopping list items by category for display. This demonstrates the pattern for category-based rendering used in templates. Week selector should integrate seamlessly with this existing categorization logic.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/shopping.rs</path>
        <kind>template_struct</kind>
        <symbol>ShoppingListTemplate</symbol>
        <lines>190-197</lines>
        <reason>Template data structure passed to shopping-list.html. Needs extension to include week_options: Vec&lt;WeekOption&gt; and selected_week: String for dropdown rendering. Existing pattern shows how to structure template data with categories and items.</reason>
      </artifact>
    </code>

    <dependencies>
      <rust>
        <package name="chrono" version="0.4" reason="Date manipulation for week calculations (Datelike::iso_week, NaiveDate::from_isoywd, week validation)" />
        <package name="sqlx" version="0.8" reason="Database queries for shopping_lists table by week_start_date" />
        <package name="axum" version="0.8" reason="HTTP route handlers, query parameter extraction" />
        <package name="askama" version="0.14" reason="Server-side template rendering for week selector dropdown" />
        <package name="serde" version="1.0" reason="Serialization for template data structures (WeekOption, CategoryGroup)" />
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="architecture">
      <description>Week selection must use URL query parameters (?week=YYYY-MM-DD) for bookmarkable URLs and browser back/forward compatibility, per solution architecture section 2.3.</description>
    </constraint>
    <constraint type="domain">
      <description>Each week's shopping list is an independent aggregate. Ingredients are NOT aggregated across weeks (week independence design decision from story 4.3 dev notes).</description>
    </constraint>
    <constraint type="validation">
      <description>Week validation rules: (1) Week start must be Monday (ISO week standard), (2) Current week always accessible, (3) Future weeks limited to +4 weeks from current date, (4) Past weeks rejected with 404 error (MVP scope limitation).</description>
    </constraint>
    <constraint type="data_model">
      <description>shopping_lists table already has week_start_date column (ISO 8601 date format) from Story 4.1. No schema changes needed. Query must use index idx_shopping_lists_user_week for efficient lookup.</description>
    </constraint>
    <constraint type="testing">
      <description>Achieve 80% code coverage for week validation logic, route handler, and query functions. Test matrix: valid/invalid dates, current/future/past weeks, Monday/non-Monday dates, boundary conditions (+4 weeks, +5 weeks).</description>
    </constraint>
    <constraint type="error_handling">
      <description>Past week requests return 404 Not Found with message "Past weeks not accessible". Future week out of range (+5 weeks or more) returns 400 Bad Request. Invalid date format returns 400 Bad Request. Non-Monday date returns 400 Bad Request.</description>
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>get_shopping_list_by_week</name>
      <kind>query_function</kind>
      <signature>async fn get_shopping_list_by_week(user_id: &amp;str, week_start_date: &amp;str, pool: &amp;sqlx::SqlitePool) -&gt; Result&lt;Option&lt;ShoppingListData&gt;, sqlx::Error&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/read_model.rs</path>
      <description>Existing query function that retrieves shopping list by user and week. Returns ShoppingListData (header + items) if shopping list exists for specified week, None otherwise. This function must be enhanced with week validation logic before querying database.</description>
    </interface>
    <interface>
      <name>get_week_start</name>
      <kind>helper_function</kind>
      <signature>fn get_week_start(date: NaiveDate) -&gt; NaiveDate</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/shopping.rs</path>
      <description>Helper function that calculates Monday of the current week. Returns NaiveDate representing the Monday of the week containing the input date. Used for week calculation and validation.</description>
    </interface>
    <interface>
      <name>ShoppingListData::group_by_category</name>
      <kind>method</kind>
      <signature>pub fn group_by_category(&amp;self) -&gt; Vec&lt;(String, Vec&lt;&amp;ShoppingListItemRow&gt;)&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/read_model.rs</path>
      <description>Groups shopping list items by category for display. Returns items grouped and sorted by grocery store layout order (Produce, Dairy, Meat, Pantry, etc.). Items within each category sorted alphabetically. Used in template rendering for category sections.</description>
    </interface>
    <interface>
      <name>meal_planning::read_model::MealPlanQueries::get_active_meal_plan</name>
      <kind>query_function</kind>
      <signature>async fn get_active_meal_plan(user_id: &amp;str, pool: &amp;sqlx::SqlitePool) -&gt; Result&lt;Option&lt;MealPlanReadModel&gt;, sqlx::Error&gt;</signature>
      <path>crates/meal_planning/src/read_model.rs</path>
      <description>Queries active meal plan for user. Used to check if meal plan exists for selected week before generating shopping list. Returns None if no active meal plan found.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing follows TDD approach with 80% code coverage requirement. Test pyramid: unit tests for week validation logic and query functions, integration tests for HTTP route handlers with in-memory SQLite database, E2E tests for user flows with Playwright. Week validation test matrix: valid/invalid dates, current/future/past weeks, Monday/non-Monday dates, boundary conditions (+4 weeks at limit, +5 weeks out of range).
    </standards>

    <locations>
      <location>crates/shopping/tests/ - Unit tests for week validation, query functions</location>
      <location>tests/ - Integration tests for route handlers</location>
      <location>e2e/tests/ - Playwright E2E tests for week selection UI</location>
    </locations>

    <ideas>
      <test_idea ac="5">
        <description>Unit test: validate_week_range() accepts current week and +1 to +4 future weeks</description>
        <test_cases>
          <case>Current week (Monday = today) → Valid</case>
          <case>Next week (+1 week) → Valid</case>
          <case>+4 weeks from current → Valid (boundary)</case>
          <case>+5 weeks from current → Invalid (FutureWeekOutOfRangeError)</case>
        </test_cases>
      </test_idea>
      <test_idea ac="7">
        <description>Unit test: validate_week_range() rejects past weeks</description>
        <test_cases>
          <case>Last week (-1 week) → Invalid (PastWeekNotAccessibleError)</case>
          <case>Two weeks ago (-2 weeks) → Invalid (PastWeekNotAccessibleError)</case>
        </test_cases>
      </test_idea>
      <test_idea ac="1,3">
        <description>Integration test: GET /shopping?week=YYYY-MM-DD returns shopping list for specified week</description>
        <test_cases>
          <case>GET /shopping?week=2025-10-21 (valid future Monday) → 200 OK with shopping list</case>
          <case>GET /shopping (no query param) → 200 OK, defaults to current week</case>
          <case>GET /shopping?week=2025-10-14 (valid past Monday) → 404 Not Found</case>
          <case>GET /shopping?week=2025-11-25 (+5 weeks) → 400 Bad Request (out of range)</case>
          <case>GET /shopping?week=2025-10-22 (Tuesday, not Monday) → 400 Bad Request (invalid week start)</case>
          <case>GET /shopping?week=invalid → 400 Bad Request (parse error)</case>
        </test_cases>
      </test_idea>
      <test_idea ac="8">
        <description>E2E test: Week selection updates URL and browser navigation works</description>
        <test_cases>
          <case>Navigate to /shopping → Dropdown shows "This Week" selected, URL has no query param</case>
          <case>Select "Next Week" from dropdown → URL updates to ?week=YYYY-MM-DD, list refreshes</case>
          <case>Click browser back button → Previous week restores, dropdown selection updates</case>
          <case>Bookmark URL with ?week= param → Reopen bookmark, correct week loads</case>
        </test_cases>
      </test_idea>
      <test_idea ac="4">
        <description>E2E test: Current week highlighted in dropdown</description>
        <test_cases>
          <case>Default state: Current week option has green badge/icon and "Current" label</case>
          <case>Select future week: Current week still shows badge in dropdown options</case>
        </test_cases>
      </test_idea>
      <test_idea ac="6">
        <description>Unit test: Shopping list independence - no cross-week aggregation</description>
        <test_cases>
          <case>Generate shopping lists for Week 1 and Week 2 with same recipe → Two independent lists with no shared items</case>
          <case>Modify Week 1 meal plan → Only Week 1 shopping list regenerates, Week 2 unchanged</case>
        </test_cases>
      </test_idea>
      <test_idea coverage="true">
        <description>Code coverage: Achieve 80% coverage for shopping/src/read_model.rs and routes/shopping.rs</description>
        <test_cases>
          <case>Run cargo tarpaulin --all-features → Coverage report shows ≥80% for target files</case>
          <case>CI pipeline fails if coverage drops below 80%</case>
        </test_cases>
      </test_idea>
    </ideas>
  </tests>
</story-context>
