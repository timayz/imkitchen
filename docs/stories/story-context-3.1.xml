<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>1</storyId>
    <title>Generate Initial Meal Plan</title>
    <status>Draft</status>
    <generatedAt>2025-10-16</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-3.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user with favorite recipes</asA>
    <iWant>to generate an automated weekly meal plan</iWant>
    <soThat>I don't have to manually plan meals</soThat>
    <tasks>
      <task id="1" summary="Create MealPlan Domain Aggregate (AC: 1-10)">
        <subtask>Create crates/meal_planning/ workspace crate in Cargo.toml</subtask>
        <subtask>Define MealPlan aggregate structure with evento integration</subtask>
        <subtask>Implement evento::AggregatorName trait for MealPlan</subtask>
        <subtask>Define domain events: MealPlanGenerated, RecipeUsedInRotation</subtask>
        <subtask>Implement event handlers for aggregate state reconstruction</subtask>
        <subtask>Add bincode Encode/Decode derives for serialization</subtask>
        <subtask>Write unit tests for MealPlan aggregate event sourcing</subtask>
      </task>
      <task id="2" summary="Implement Multi-Factor Meal Planning Algorithm (AC: 2-3)">
        <subtask>Create crates/meal_planning/src/algorithm.rs module</subtask>
        <subtask>Implement RecipeComplexityCalculator service</subtask>
        <subtask>Implement MealPlanningAlgorithm service with constraint satisfaction</subtask>
        <subtask>Ensure O(n) algorithm complexity where n = favorite recipe count</subtask>
        <subtask>Write unit tests for complexity calculation and constraints</subtask>
      </task>
      <task id="3" summary="Create Meal Plan Read Models (AC: 4-5)">
        <subtask>Create migration migrations/008_create_meal_plans_table.sql</subtask>
        <subtask>Implement evento subscription handlers for read model projections</subtask>
        <subtask>Register subscriptions in main.rs with evento subscriber</subtask>
        <subtask>Write integration tests for read model projection accuracy</subtask>
      </task>
      <task id="4" summary="Implement Rotation System (AC: 10)">
        <subtask>Create crates/meal_planning/src/rotation.rs module</subtask>
        <subtask>Define RotationState struct tracking used recipe IDs</subtask>
        <subtask>Implement rotation logic: prevent duplicates, reset cycle</subtask>
        <subtask>Store rotation state as JSON in meal_plans.rotation_state</subtask>
        <subtask>Write unit tests for rotation cycle management</subtask>
      </task>
      <task id="5" summary="Create HTTP Routes for Meal Plan Generation (AC: 1-2, 7-9)">
        <subtask>Implement POST /plan/generate route in src/routes/meal_plan.rs</subtask>
        <subtask>Validate user has â‰¥7 favorite recipes</subtask>
        <subtask>Invoke MealPlanningAlgorithm.generate()</subtask>
        <subtask>Create MealPlan aggregate with GenerateMealPlan command</subtask>
        <subtask>Return 302 redirect to /plan (calendar view)</subtask>
        <subtask>Implement GET /plan route for calendar view</subtask>
        <subtask>Add progress indicator to generation flow</subtask>
        <subtask>Write integration tests for /plan/generate endpoint</subtask>
      </task>
      <task id="6" summary="Create Askama Templates for Calendar View (AC: 5, 9)">
        <subtask>Create templates/pages/meal-calendar.html with 7-day grid</subtask>
        <subtask>Create templates/components/meal-slot.html component</subtask>
        <subtask>Update templates/pages/dashboard.html with Generate button</subtask>
        <subtask>Write E2E tests with Playwright for calendar rendering</subtask>
      </task>
      <task id="7" summary="Handle Insufficient Recipes Error (AC: 10)">
        <subtask>Implement validation in POST /plan/generate route</subtask>
        <subtask>Return 422 if count &lt; 7 with helpful error message</subtask>
        <subtask>Update error.html template for InsufficientRecipes error</subtask>
        <subtask>Write integration test for insufficient recipes scenario</subtask>
      </task>
      <task id="8" summary="Performance Testing and Optimization (AC: 6)">
        <subtask>Load test algorithm with 50 favorite recipes</subtask>
        <subtask>Verify generation completes in &lt;5 seconds</subtask>
        <subtask>Optimize database queries with proper indexes</subtask>
        <subtask>Document performance baseline in completion notes</subtask>
      </task>
      <task id="9" summary="Integration with Shopping List Domain">
        <subtask>Verify MealPlanGenerated event emitted with meal_plan_id</subtask>
        <subtask>Document event payload for shopping list subscription</subtask>
      </task>
      <task id="10" summary="Write Comprehensive Test Suite (TDD Required)">
        <subtask>Unit tests in crates/meal_planning/tests/</subtask>
        <subtask>Integration tests in tests/meal_plan_integration_tests.rs</subtask>
        <subtask>E2E tests in e2e/tests/meal-planning.spec.ts</subtask>
        <subtask>Target 80% code coverage for meal_planning crate</subtask>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Home dashboard displays "Generate Meal Plan" button prominently</criterion>
    <criterion id="2">Clicking button triggers meal planning algorithm</criterion>
    <criterion id="3">System analyzes all favorited recipes against user profile constraints</criterion>
    <criterion id="4">Algorithm generates single meal plan with recipes organized by week</criterion>
    <criterion id="5">Week-view calendar displays generated plan with breakfast/lunch/dinner slots filled</criterion>
    <criterion id="6">Generation completes within 5 seconds for up to 50 favorite recipes</criterion>
    <criterion id="7">Progress indicator shown during generation</criterion>
    <criterion id="8">Generated plan automatically becomes active</criterion>
    <criterion id="9">User redirected to calendar view after successful generation</criterion>
    <criterion id="10">If insufficient recipes (&lt;7 favorites), display helpful error: "Add more favorite recipes to generate meal plan (need at least 7)"</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-3.md</path>
        <title>Technical Specification: Intelligent Meal Planning Engine</title>
        <section>MealPlanningAlgorithm (Core Domain Service)</section>
        <snippet>Multi-factor constraint satisfaction solver for recipe-to-slot assignment. Algorithm complexity: O(n) where n = favorite recipe count. Target execution time: &lt;5 seconds for 50 recipes. Constraint types: Availability, Complexity, Advance Prep, Dietary, Freshness, Equipment Conflict, Rotation.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-3.md</path>
        <title>Technical Specification: Intelligent Meal Planning Engine</title>
        <section>RecipeComplexityCalculator (Domain Service)</section>
        <snippet>Formula: complexity_score = (ingredients * 0.3) + (steps * 0.4) + (advance_prep_multiplier * 0.3). Map score to complexity enum: if score &lt; 30 => Simple, if 30-60 => Moderate, if &gt; 60 => Complex.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>3.1 Database Schema</section>
        <snippet>Event Store (managed by evento): events table and indexes created automatically. Read Models (manual migrations): meal_plans, meal_assignments tables. evento manages event store schema internally via sql_migrator.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>3.2 Data Models and Relationships - meal_plans table</section>
        <snippet>CREATE TABLE meal_plans (id TEXT PRIMARY KEY, user_id TEXT NOT NULL, start_date TEXT NOT NULL, status TEXT NOT NULL, rotation_state TEXT, created_at TEXT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id));</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>3.2 Data Models and Relationships - meal_assignments table</section>
        <snippet>CREATE TABLE meal_assignments (id TEXT PRIMARY KEY, meal_plan_id TEXT NOT NULL, date TEXT NOT NULL, meal_type TEXT NOT NULL, recipe_id TEXT NOT NULL, prep_required BOOLEAN, FOREIGN KEY (meal_plan_id) REFERENCES meal_plans(id), FOREIGN KEY (recipe_id) REFERENCES recipes(id));</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>11.1 Domain Crate Structure</section>
        <snippet>crates/meal_planning/ contains: aggregate.rs (MealPlanAggregate), commands.rs (GenerateMealPlan, ReplaceMeal), events.rs (MealPlanGenerated, MealReplaced), algorithm.rs (meal planning optimization), read_model.rs (meal plan query projections).</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Epic 3: Story 3.1 - Generate Initial Meal Plan</section>
        <snippet>Prerequisites: User has marked at least 7 favorite recipes. Technical Notes: MealPlan aggregate with MealPlanGenerated event. Multi-factor optimization algorithm considers: user availability, recipe complexity, advance prep requirements, ingredient freshness. Recipe rotation ensures no duplicates until all favorites used once.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Epic 3: Story 3.3 - Recipe Rotation System</section>
        <snippet>Rotation state persists across meal plan regenerations. Each favorite recipe used exactly once before any recipe repeats. After all favorites used once, rotation cycle resets. Read model tracks: recipe_id, last_used_date, rotation_cycle_number.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/aggregate.rs</path>
        <kind>aggregate</kind>
        <symbol>RecipeAggregate</symbol>
        <lines>1-100</lines>
        <reason>Reference example for evento aggregate pattern with #[evento::aggregator] macro, event handlers, and bincode serialization. Follow same structure for MealPlanAggregate.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/events.rs</path>
        <kind>events</kind>
        <symbol>RecipeCreated, Ingredient, InstructionStep</symbol>
        <lines>1-50</lines>
        <reason>Reference example for evento event definitions with AggregatorName derive, bincode Encode/Decode, and serde. Follow same pattern for MealPlanGenerated, RecipeUsedInRotation events.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/read_model.rs</path>
        <kind>read_model</kind>
        <symbol>project_recipe_created</symbol>
        <lines>N/A</lines>
        <reason>Reference for evento subscription handlers that project events to read models using SQLx. Implement similar handlers for meal_plans and meal_assignments projections.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/Cargo.toml</path>
        <kind>manifest</kind>
        <symbol>workspace.members</symbol>
        <lines>1-6</lines>
        <reason>Add crates/meal_planning to workspace.members array. Current members: crates/user, crates/recipe.</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <package name="evento" version="1.4" features="sqlite-migrator">Event sourcing framework for aggregates, commands, events, and subscriptions</package>
        <package name="sqlx" version="0.8" features="runtime-tokio, sqlite, chrono, uuid">Async SQL toolkit for read model queries and migrations</package>
        <package name="axum" version="0.8" features="macros">HTTP server framework for route handlers</package>
        <package name="askama" version="0.14">Type-safe server-side template rendering for calendar view</package>
        <package name="bincode" version="2.0">Binary serialization for evento events and aggregates</package>
        <package name="serde" version="1.0" features="derive">Serialization framework for JSON rotation state</package>
        <package name="serde_json" version="1.0">JSON serialization for rotation_state column</package>
        <package name="tokio" version="1.40" features="full">Async runtime for event handlers and HTTP routes</package>
        <package name="anyhow" version="1.0">Error handling in event handlers</package>
        <package name="thiserror" version="1.0">Custom domain error types</package>
        <package name="chrono" version="0.4" features="serde">Date handling for meal_plan start_date and meal_assignment dates</package>
        <package name="uuid" version="1.10" features="v4, serde">Unique IDs for meal plan and assignment records</package>
        <package name="validator" version="0.20" features="derive">Input validation for HTTP route forms</package>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="architecture">Event-sourced DDD architecture: MealPlan must be an evento aggregate with full event sourcing. All state changes captured as immutable events. CQRS pattern: commands write events, queries read from materialized views (meal_plans, meal_assignments read models).</constraint>
    <constraint type="performance">Algorithm must complete in &lt;5 seconds for 50 favorite recipes (NFR requirement). Target O(n) complexity where n = favorite recipe count. Synchronous execution for MVP (no background jobs).</constraint>
    <constraint type="data">Rotation state stored as JSON in meal_plans.rotation_state column: {"cycle_number": 1, "used_recipe_ids": ["id1", "id2"]}. Use serde_json for serialization/deserialization.</constraint>
    <constraint type="testing">TDD enforced: write tests first, then implementation. Target 80% code coverage for meal_planning crate per NFR. Unit tests for domain logic, integration tests for HTTP routes and evento projections, E2E tests for full user journey.</constraint>
    <constraint type="validation">Minimum 7 favorite recipes required to generate meal plan. Return 422 Unprocessable Entity with helpful error message if validation fails.</constraint>
    <constraint type="database">Use evento sql_migrator for event store schema (automatic). Use SQLx migrations for read model tables (manual). Foreign key constraints: meal_assignments â†’ meal_plans, meal_assignments â†’ recipes.</constraint>
    <constraint type="serialization">All evento events and aggregates must derive bincode::Encode and bincode::Decode for binary serialization. Use String types for UUIDs and timestamps (bincode compatibility).</constraint>
    <constraint type="routing">Follow existing HTTP patterns: POST /plan/generate for command, GET /plan for calendar view query. Return 302 redirect on success. Use Askama templates for server-side rendering.</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>evento::create</name>
      <kind>function</kind>
      <signature>evento::create::&lt;MealPlan&gt;().data(&amp;MealPlanGenerated { ... })?.metadata(&amp;user_id)?.commit(&amp;executor).await?</signature>
      <path>evento crate</path>
      <usage>Create new MealPlan aggregate with MealPlanGenerated event. Pattern from Recipe domain: evento::create::&lt;Recipe&gt;().data(&amp;RecipeCreated).</usage>
    </interface>
    <interface>
      <name>evento::load</name>
      <kind>function</kind>
      <signature>evento::load::&lt;MealPlan&gt;(&amp;meal_plan_id, &amp;executor).await?</signature>
      <path>evento crate</path>
      <usage>Load MealPlan aggregate by ID, replaying all events to rebuild current state.</usage>
    </interface>
    <interface>
      <name>evento::subscribe</name>
      <kind>function</kind>
      <signature>evento::subscribe("meal-plan-projections").aggregator::&lt;MealPlan&gt;().handler(project_meal_plan_generated()).run(&amp;executor).await?</signature>
      <path>evento crate</path>
      <usage>Register evento subscription handlers for read model projections. Call in main.rs startup.</usage>
    </interface>
    <interface>
      <name>sqlx::query!</name>
      <kind>macro</kind>
      <signature>sqlx::query!("INSERT INTO meal_plans (id, user_id, start_date, status, rotation_state, created_at) VALUES (?, ?, ?, ?, ?, ?)", ...)</signature>
      <path>sqlx crate</path>
      <usage>Execute SQL queries in read model projection handlers. Use parameterized queries for SQL injection prevention.</usage>
    </interface>
    <interface>
      <name>RecipeQueries::get_favorited_recipes</name>
      <kind>function</kind>
      <signature>async fn get_favorited_recipes(user_id: &amp;str, pool: &amp;SqlitePool) -&gt; Result&lt;Vec&lt;RecipeReadModel&gt;, sqlx::Error&gt;</signature>
      <path>crates/recipe/src/read_model.rs</path>
      <usage>Query all favorited recipes for user. Call in POST /plan/generate route to get recipes for algorithm input.</usage>
    </interface>
    <interface>
      <name>UserQueries::get_user_profile</name>
      <kind>function</kind>
      <signature>async fn get_user_profile(user_id: &amp;str, pool: &amp;SqlitePool) -&gt; Result&lt;UserProfile, sqlx::Error&gt;</signature>
      <path>crates/user/src/read_model.rs</path>
      <usage>Query user profile for constraints: weeknight_availability, skill_level, dietary_restrictions. Call in POST /plan/generate route for algorithm input.</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TDD enforced per project requirements. Testing pyramid: Unit tests for domain aggregate logic (evento commands/events) in crates/meal_planning/tests/. Integration tests for HTTP routes, database projections, and evento subscriptions in tests/meal_plan_integration_tests.rs. E2E tests for critical user flows (generate meal plan, view calendar) with Playwright in e2e/tests/meal-planning.spec.ts. Target 80% code coverage via cargo tarpaulin (NFR requirement from PRD). Test frameworks: Rust cargo test for unit/integration, Playwright (TypeScript) for E2E. Mock evento dependencies with in-memory event store for unit tests. Use test database fixtures for integration tests.
    </standards>
    <locations>
      <location>crates/meal_planning/tests/algorithm_tests.rs</location>
      <location>crates/meal_planning/tests/rotation_tests.rs</location>
      <location>tests/meal_plan_integration_tests.rs</location>
      <location>e2e/tests/meal-planning.spec.ts</location>
    </locations>
    <ideas>
      <idea ac="1,2,9">E2E test: User with 10 favorite recipes clicks "Generate Meal Plan" button on dashboard, sees progress indicator, redirected to calendar view with 21 slots filled.</idea>
      <idea ac="3,4,6">Unit test: MealPlanningAlgorithm.generate() with 50 favorite recipes completes in &lt;5 seconds and assigns recipes respecting all constraints (availability, complexity, rotation).</idea>
      <idea ac="4,5">Integration test: POST /plan/generate creates MealPlanGenerated event, evento subscription projects to meal_plans and meal_assignments tables, GET /plan returns calendar with correct assignments.</idea>
      <idea ac="10">Integration test: POST /plan/generate with 5 favorite recipes returns 422 Unprocessable Entity with error message "You need at least 7 favorite recipes. You currently have 5."</idea>
      <idea ac="3">Unit test: RecipeComplexityCalculator calculates complexity score correctly: Simple recipe (5 ingredients, 4 steps, no prep) = score 17.6 â†’ Simple enum. Complex recipe (20 ingredients, 12 steps, 4hr prep) = score 80.8 â†’ Complex enum.</idea>
      <idea ac="4">Unit test: Rotation logic prevents duplicate recipes: generate plan with 10 favorites, all 10 used once, cycle resets, next generation can reuse recipes.</idea>
      <idea ac="8">Integration test: Generated meal plan has is_active=true flag, only one active plan per user (constraint enforced).</idea>
      <idea ac="5">E2E test: Calendar view displays 7 days with 3 meal slots each (breakfast, lunch, dinner), advance prep indicator icon visible on recipes with advance_prep_hours &gt; 0.</idea>
    </ideas>
  </tests>
</story-context>
