<story-context id="bmad/bmm/workflows/4-implementation/story-context/story-2.11" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>11</storyId>
    <title>Tech Debt &amp; Enhancements</title>
    <status>Draft</status>
    <generatedAt>2025-10-16</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-2.11.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>development team</asA>
    <iWant>to address deferred technical improvements from Stories 2.1 and 1.7</iWant>
    <soThat>code quality, test coverage, and documentation meet production standards</soThat>
    <tasks>
      <task id="1">Implement Instruction Reordering UI (AC-1) - Add drag handles or up/down arrows to recipe form template</task>
      <task id="2">Write Complete Test Suite (AC-2) - Unit tests (RecipeAggregate), integration tests (HTTP routes), E2E tests (Playwright)</task>
      <task id="3">Refactor Form Parsing to Axum Extractors (AC-3) - Replace manual parsing with Form&lt;CreateRecipeForm&gt;</task>
      <task id="4">Implement Structured Error Handling (AC-4) - Create AppError enum with IntoResponse trait</task>
      <task id="5">Document Stripe Setup Guide (AC-5) - Create docs/stripe-setup.md with setup instructions</task>
      <task id="6">Verify CI/CD Pipeline (AC-6) - Ensure all tests pass in GitHub Actions</task>
      <task id="7">Achieve 80% Code Coverage (AC-7) - Run cargo tarpaulin and meet coverage target</task>
      <task id="8">Tech Lead Review and Approval (AC-8) - Submit PR and obtain approval</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1" priority="HIGH" source="Story 2.1">
      Instruction reordering UI implemented with drag handles or up/down arrows - Users can reorder instruction steps in recipe form, step numbers update dynamically, changes persist on form submission
    </criterion>
    <criterion id="2" priority="HIGH" source="Story 2.1">
      Complete test suite written: unit tests for RecipeAggregate, integration tests for HTTP routes, E2E tests for recipe creation flow with Playwright (target 80% code coverage via cargo tarpaulin)
    </criterion>
    <criterion id="3" priority="MEDIUM" source="Story 2.1">
      Form parsing refactored to use Axum extractors - Replace parse_recipe_form() function with Form&lt;CreateRecipeForm&gt; extractor in src/routes/recipes.rs:292-340
    </criterion>
    <criterion id="4" priority="MEDIUM" source="Story 2.1">
      Structured error handling implemented with AppError enum - Define variants (DatabaseError, ValidationError, EventStoreError, RecipeLimitError) with IntoResponse trait for user-friendly error pages
    </criterion>
    <criterion id="5" priority="LOW" source="Story 1.7">
      Stripe setup guide documented in docs/stripe-setup.md or README with instructions for test keys, price creation, and webhook registration
    </criterion>
    <criterion id="6" priority="HIGH">
      All tests pass in CI/CD pipeline - cargo test and playwright test succeed in GitHub Actions
    </criterion>
    <criterion id="7" priority="HIGH">
      Code coverage metrics meet or exceed 80% target (NFR requirement) - Run cargo tarpaulin to generate coverage report
    </criterion>
    <criterion id="8" priority="MEDIUM">
      Documentation reviewed and approved by tech lead - Stripe guide and code refactoring reviewed for accuracy and maintainability
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-2.1.md</path>
        <title>Story 2.1: Create Recipe</title>
        <section>Action Items (lines 463-492)</section>
        <snippet>Source of deferred action items: instruction reordering UI, test suite, form parsing refactor, structured error handling</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-1.7.md</path>
        <title>Story 1.7: Premium Upgrade Flow</title>
        <section>Documentation - PENDING (lines 524-532)</section>
        <snippet>Source of Stripe documentation task: Add Stripe Setup Guide to README with instructions for test keys, price creation, webhook registration</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Technology Stack (section 1.1)</section>
        <snippet>Testing stack: Playwright 1.56+ for E2E testing, cargo test for unit/integration, tarpaulin for coverage, Axum 0.8+ for HTTP server, Askama 0.14+ for templates</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-2.md</path>
        <title>Technical Specification: Recipe Management System</title>
        <section>Epic 2 Overview</section>
        <snippet>Recipe CRUD operations with evento event sourcing, CQRS read models, server-side rendering with Askama, TwinSpark for progressive enhancement</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/PRD.md</path>
        <title>imkitchen Product Requirements Document</title>
        <section>Non-Functional Requirements</section>
        <snippet>80% code coverage target for all production code (unit and integration tests)</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/recipes.rs</path>
        <kind>module</kind>
        <symbol>post_recipe, get_recipe_detail</symbol>
        <lines>1-500</lines>
        <reason>Contains form parsing logic to be refactored (AC-3) and error handling to be improved (AC-4). Manual parsing around lines 292-340 should be replaced with Axum Form extractor.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/profile.rs</path>
        <kind>module</kind>
        <symbol>Error handling pattern</symbol>
        <lines>N/A</lines>
        <reason>Reference implementation of structured error handling pattern from Story 1.5 - use as example for AppError implementation (AC-4)</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/templates/pages/recipe-form.html</path>
        <kind>template</kind>
        <symbol>instruction rows</symbol>
        <lines>102-130</lines>
        <reason>Template for recipe form where instruction reordering UI must be added (AC-1). Add drag handles or up/down arrows to these rows.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/tests/recipe_tests.rs</path>
        <kind>test</kind>
        <symbol>setup_test_db, setup_evento_executor</symbol>
        <lines>1-30</lines>
        <reason>Existing unit test structure and helpers for RecipeAggregate - extend with additional test cases for AC-2</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/tests/recipe_integration_tests.rs</path>
        <kind>test</kind>
        <symbol>Integration test suite</symbol>
        <lines>N/A</lines>
        <reason>Existing integration test file for recipe routes - add tests for GET /recipes/new, POST /recipes, GET /recipes/:id (AC-2)</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/e2e/tests/subscription.spec.ts</path>
        <kind>test</kind>
        <symbol>Playwright E2E example</symbol>
        <lines>N/A</lines>
        <reason>Example E2E test structure from Story 1.7 - use as reference for creating recipe E2E tests (AC-2)</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <dependency name="axum" version="0.8+" notes="HTTP server with Form extractor for AC-3" />
        <dependency name="axum-extra" version="0.10+" notes="Additional Axum utilities including cookie handling" />
        <dependency name="askama" version="0.14+" notes="Server-side templates for recipe form (AC-1)" />
        <dependency name="serde" version="1.0+" notes="Serialization for CreateRecipeForm struct (AC-3)" />
        <dependency name="validator" version="0.20+" notes="Field-level validation for form inputs (AC-3)" />
        <dependency name="thiserror" version="1.0+" notes="Error type derives for AppError enum (AC-4)" />
        <dependency name="sqlx" version="0.8+" notes="Database queries for integration tests (AC-2)" />
        <dependency name="evento" version="1.4+" notes="Event sourcing and CQRS for RecipeAggregate tests (AC-2)" />
      </rust>
      <typescript>
        <dependency name="@playwright/test" version="1.56+" notes="E2E testing framework (AC-2)" />
      </typescript>
      <dev_tools>
        <tool name="cargo-tarpaulin" notes="Code coverage tool for Rust - run 'cargo tarpaulin --out Html' (AC-7)" />
        <tool name="playwright" notes="Cross-browser E2E testing - run 'playwright test' (AC-2, AC-6)" />
      </dev_tools>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="1" category="testing">
      TDD enforced - unit tests for domain logic, integration tests for HTTP routes and database projections, E2E tests for user journeys with Playwright. Target 80% code coverage per NFR requirements.
    </constraint>
    <constraint id="2" category="architecture">
      Event sourcing via evento - RecipeAggregate uses event sourcing pattern. All domain changes emit events (RecipeCreated, RecipeUpdated). Read models updated via event subscriptions.
    </constraint>
    <constraint id="3" category="patterns">
      Server-side rendering - Askama templates for HTML generation. TwinSpark for progressive enhancement. No heavy JavaScript frameworks.
    </constraint>
    <constraint id="4" category="error_handling">
      Structured error handling - All routes should use Result&lt;Response, AppError&gt; pattern. Map domain errors to HTTP status codes. Render user-friendly error pages.
    </constraint>
    <constraint id="5" category="validation">
      Form validation - Use validator crate derives for field-level validation. Validation errors returned as 422 Unprocessable Entity with specific field error messages.
    </constraint>
    <constraint id="6" category="ci_cd">
      All tests must pass in CI/CD - GitHub Actions workflow runs cargo test and playwright test. Coverage reports uploaded as artifacts. No merge without passing tests.
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>axum::extract::Form</name>
      <kind>extractor</kind>
      <signature>Form&lt;T: DeserializeOwned&gt;</signature>
      <path>axum::extract::Form</path>
      <usage>Replace parse_recipe_form() with Form&lt;CreateRecipeForm&gt; extractor in POST /recipes handler (AC-3)</usage>
    </interface>
    <interface>
      <name>axum::response::IntoResponse</name>
      <kind>trait</kind>
      <signature>trait IntoResponse { fn into_response(self) -&gt; Response }</signature>
      <path>axum::response::IntoResponse</path>
      <usage>Implement for AppError enum to convert errors into HTTP responses with appropriate status codes and user-friendly HTML (AC-4)</usage>
    </interface>
    <interface>
      <name>RecipeAggregate</name>
      <kind>aggregate</kind>
      <signature>struct RecipeAggregate { ... }</signature>
      <path>crates/recipe/src/aggregate.rs</path>
      <usage>Test event handlers and validation logic in unit tests (AC-2)</usage>
    </interface>
    <interface>
      <name>CreateRecipeCommand</name>
      <kind>command</kind>
      <signature>struct CreateRecipeCommand { title, ingredients, instructions, ... }</signature>
      <path>crates/recipe/src/commands.rs</path>
      <usage>Used by POST /recipes handler - should be populated from Form&lt;CreateRecipeForm&gt; after refactor (AC-3)</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing follows Rust conventions with cargo test for unit/integration tests and Playwright for E2E tests. Unit tests reside in crates/*/tests/, integration tests in /tests/, E2E in /e2e/tests/. Test database setup uses in-memory SQLite with evento migrations. Mock evento executor for unit tests. Use sqlx::test macro for integration tests with transactions. Playwright tests use Page Object Model pattern for maintainability. Code coverage measured via cargo tarpaulin with 80% target per NFR requirements.
    </standards>
    <locations>
      <location>crates/recipe/tests/*.rs - Unit tests for RecipeAggregate domain logic</location>
      <location>tests/*_integration_tests.rs - Integration tests for HTTP routes and database projections</location>
      <location>e2e/tests/*.spec.ts - End-to-end Playwright tests for user journeys</location>
      <location>.github/workflows/ci.yml - CI/CD pipeline configuration for automated test runs</location>
    </locations>
    <ideas>
      <idea ac="2">
        Unit test: test_recipe_created_event_initializes_aggregate() - Verify RecipeCreated event properly initializes RecipeAggregate with all fields
      </idea>
      <idea ac="2">
        Unit test: test_recipe_validation_rejects_empty_title() - Verify validation rejects recipe with empty title
      </idea>
      <idea ac="2">
        Unit test: test_recipe_validation_requires_at_least_one_ingredient() - Verify validation enforces minimum 1 ingredient
      </idea>
      <idea ac="2">
        Unit test: test_recipe_validation_requires_at_least_one_instruction() - Verify validation enforces minimum 1 instruction step
      </idea>
      <idea ac="2">
        Integration test: test_get_recipe_new_form_returns_200() - Verify GET /recipes/new returns 200 with recipe form template
      </idea>
      <idea ac="2">
        Integration test: test_post_recipe_creates_and_redirects_to_detail() - Verify POST /recipes creates recipe and redirects to detail page
      </idea>
      <idea ac="2">
        Integration test: test_post_recipe_fails_with_422_on_validation_error() - Verify POST /recipes returns 422 on invalid input
      </idea>
      <idea ac="2">
        Integration test: test_get_recipe_detail_returns_200_for_owner() - Verify GET /recipes/:id returns recipe detail for owner
      </idea>
      <idea ac="2">
        Integration test: test_recipe_created_event_updates_read_model() - Verify RecipeCreated event triggers read model projection update
      </idea>
      <idea ac="2">
        E2E test: test('user can create recipe with all fields') - Full recipe creation flow from form to detail page
      </idea>
      <idea ac="2">
        E2E test: test('recipe creation validates required fields') - Verify form validation displays errors for missing fields
      </idea>
      <idea ac="2">
        E2E test: test('created recipe displays on detail page') - Verify recipe data persists and displays correctly after creation
      </idea>
      <idea ac="1">
        E2E test: test('user can reorder instruction steps') - Verify drag-and-drop or arrow buttons reorder instructions correctly
      </idea>
      <idea ac="3">
        Integration test: test_form_extractor_parses_array_fields() - Verify Form&lt;CreateRecipeForm&gt; correctly parses ingredient_name[], ingredient_quantity[], etc.
      </idea>
      <idea ac="4">
        Integration test: test_app_error_returns_user_friendly_page() - Verify AppError::ValidationError renders HTML error page with 422 status
      </idea>
      <idea ac="6">
        CI test: Verify GitHub Actions workflow runs cargo test, playwright test, and cargo tarpaulin successfully
      </idea>
    </ideas>
  </tests>
</story-context>
