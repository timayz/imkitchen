<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>5</epicId>
    <storyId>7</storyId>
    <title>Cross-Browser Compatibility</title>
    <status>Draft</status>
    <generatedAt>2025-10-19</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-5.7.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user on any modern browser</asA>
    <iWant>consistent experience</iWant>
    <soThat>app works regardless of browser choice</soThat>
    <tasks>
      - Task 1: Set up browser compatibility testing infrastructure
      - Task 2: Implement feature detection for PWA APIs
      - Task 3: Configure polyfills and transpilation
      - Task 4: Ensure CSS cross-browser consistency
      - Task 5: Test form inputs across platforms
      - Task 6: Implement graceful degradation for older browsers
      - Task 7: Run comprehensive cross-browser test suite
      - Task 8: Document browser support and limitations
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Full functionality on iOS Safari 14+, Android Chrome 90+
    2. Graceful degradation on older browsers (show fallback UI)
    3. Feature detection for PWA APIs (service worker, Web Push, Wake Lock)
    4. Polyfills for missing features where feasible
    5. No browser-specific bugs affecting core functionality
    6. Consistent visual rendering across browsers (CSS normalization)
    7. Form inputs work correctly on all platforms (date pickers, dropdowns)
    8. JavaScript compatibility via transpilation (ES2015+ support)
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-5.md</path>
        <title>Technical Specification: Progressive Web App &amp; Mobile Experience</title>
        <section>Story 8: Cross-Browser Compatibility</section>
        <snippet>Lines 1848-1858: Browser compatibility matrix, feature detection strategy, polyfills. iOS Safari 14+ (NO Background Sync), Android Chrome 90+ (full PWA), graceful degradation patterns.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-5.md</path>
        <title>Technical Specification: Progressive Web App &amp; Mobile Experience</title>
        <section>Test Strategy Summary - E2E Tests (Playwright)</section>
        <snippet>Lines 2092-2283: Cross-browser test suite patterns using Playwright with Chromium, Firefox, WebKit. Device testing matrix for iOS/Android/desktop browsers.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Technology Stack - Frontend</section>
        <snippet>Server-side rendering with Askama templates, progressive enhancement via TwinSpark, offline-first PWA with Workbox service workers. Minimal client-side JavaScript reduces browser compatibility concerns.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR-5: Mobile-Responsive Progressive Web App</section>
        <snippet>Cross-browser compatibility requirements: iOS Safari 14+, Android Chrome 90+, responsive breakpoints (mobile &lt;768px, tablet 768-1024px, desktop &gt;1024px), offline capabilities, installable PWA.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/e2e/playwright.config.ts</path>
        <kind>config</kind>
        <symbol>playwright.config</symbol>
        <lines>1-42</lines>
        <reason>Existing Playwright configuration with Chromium, Firefox, WebKit browser projects. Foundation for cross-browser test execution.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/e2e/tests/responsive-design.spec.ts</path>
        <kind>test</kind>
        <symbol>test.describe('Responsive Design - Story 5.4')</symbol>
        <lines>10-80</lines>
        <reason>Example test pattern for viewport-specific testing (mobile 375px, tablet, desktop). Demonstrates CSS computed style verification and touch target testing across devices.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/e2e/tests/pwa-installation.spec.ts</path>
        <kind>test</kind>
        <symbol>test.describe('PWA Manifest')</symbol>
        <lines>36-60</lines>
        <reason>PWA manifest validation test pattern. Shows how to test browser APIs (manifest.json loading, JSON parsing) across browsers. Template for service worker feature detection tests.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/e2e/tests/service-worker-offline.spec.ts</path>
        <kind>test</kind>
        <symbol>service-worker-offline.spec.ts</symbol>
        <lines>all</lines>
        <reason>Service worker offline functionality tests. Demonstrates browser context manipulation (setOffline) for testing degradation scenarios. Critical for AC-2 graceful degradation testing.</reason>
      </artifact>
    </code>
    <dependencies>
      <playwright>
        <package name="@playwright/test" version="^1.56.0" />
        <description>Cross-browser E2E testing framework with Chromium, Firefox, WebKit support</description>
      </playwright>
      <node>
        <package name="typescript" version="^5.0.0" />
        <package name="@types/node" version="^24.0.0" />
        <description>TypeScript for type-safe E2E test development</description>
      </node>
      <rust>
        <package name="axum" version="0.8" workspace="true" />
        <package name="askama" version="0.14" workspace="true" />
        <package name="tower-http" version="0.6" features="fs" workspace="true" />
        <description>Axum HTTP server for serving static assets (manifest.json, service worker). Askama templates for server-side rendering with responsive classes.</description>
      </rust>
      <frontend>
        <framework>Tailwind CSS (via PostCSS, CSS normalization included)</framework>
        <framework>Workbox 7.1+ (service worker library, CDN or self-hosted)</framework>
        <description>CSS framework provides cross-browser normalization. Workbox handles service worker browser compatibility (graceful degradation if unsupported).</description>
      </frontend>
    </dependencies>
  </artifacts>

  <constraints>
    - MUST support iOS Safari 14+ and Android Chrome 90+ as primary targets (per PRD NFR-5)
    - MUST use Playwright with Chromium, Firefox, WebKit browser projects for automated testing
    - MUST implement feature detection before using PWA APIs (service worker, Background Sync, Wake Lock)
    - MUST provide graceful degradation for older browsers (show upgrade banner, core functionality works)
    - MUST NOT break existing responsive design (mobile/tablet/desktop breakpoints from Story 5.4)
    - MUST NOT introduce browser-specific CSS hacks; use Tailwind utilities and Autoprefixer
    - MUST follow existing test patterns: test.describe() structure, loginAsTestUser() helper, viewport manipulation
    - MUST document browser limitations (iOS Safari no Background Sync) in user-facing help pages
    - Architecture constraint: Server-side rendering (Askama) ensures base HTML works without JavaScript
    - Architecture constraint: Minimal client-side JavaScript (TwinSpark for progressive enhancement only)
  </constraints>

  <interfaces>
    <interface>
      <name>Playwright test.use()</name>
      <kind>Testing API</kind>
      <signature>test.use({ viewport: { width: number, height: number } })</signature>
      <path>@playwright/test</path>
      <description>Configure viewport size for responsive testing. Used in existing responsive-design.spec.ts.</description>
    </interface>
    <interface>
      <name>Playwright context.setOffline()</name>
      <kind>Testing API</kind>
      <signature>await context.setOffline(true | false)</signature>
      <path>@playwright/test BrowserContext</path>
      <description>Simulate offline/online network state for service worker degradation testing.</description>
    </interface>
    <interface>
      <name>Playwright devices</name>
      <kind>Testing API</kind>
      <signature>import { devices } from '@playwright/test'; test.use({ ...devices['iPhone 12'] })</signature>
      <path>@playwright/test</path>
      <description>Preconfigured device profiles (iPhone 12, Desktop Chrome, etc.) for cross-browser/device testing.</description>
    </interface>
    <interface>
      <name>navigator.serviceWorker</name>
      <kind>Browser API</kind>
      <signature>if ('serviceWorker' in navigator) { ... }</signature>
      <path>Web API</path>
      <description>Feature detection pattern for service worker support. Required for AC-3.</description>
    </interface>
    <interface>
      <name>ServiceWorkerRegistration.sync</name>
      <kind>Browser API</kind>
      <signature>if ('sync' in ServiceWorkerRegistration.prototype) { ... }</signature>
      <path>Web API (Background Sync)</path>
      <description>Feature detection for Background Sync API. iOS Safari does NOT support (AC-3).</description>
    </interface>
    <interface>
      <name>navigator.wakeLock</name>
      <kind>Browser API</kind>
      <signature>if ('wakeLock' in navigator) { await navigator.wakeLock.request('screen'); }</signature>
      <path>Web API (Wake Lock)</path>
      <description>Feature detection for Wake Lock API (keep screen awake in kitchen mode). Graceful degradation if unsupported.</description>
    </interface>
    <interface>
      <name>window.getComputedStyle()</name>
      <kind>Browser API</kind>
      <signature>window.getComputedStyle(element).fontSize</signature>
      <path>Web API (CSSOM)</path>
      <description>Used in existing tests to verify CSS rendering (font sizes, positions, layouts) across browsers. Essential for AC-6.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Playwright 1.56+ with TypeScript for E2E testing. Test files located in /e2e/tests/ with .spec.ts extension. Configuration in /e2e/playwright.config.ts defines browser projects (chromium, firefox, webkit). Tests use test.describe() for grouping, expect() assertions, and page.goto() navigation. Helper functions (loginAsTestUser) in test files for common workflows. Screenshots captured on failure, HTML reporter for CI visibility. Tests run in parallel in CI (workers: 1) with 2 retries for flaky tests.
    </standards>
    <locations>
      - /e2e/tests/ (Playwright E2E tests, *.spec.ts)
      - /e2e/playwright.config.ts (Playwright configuration with browser projects)
      - /e2e/package.json (Playwright and TypeScript dependencies)
      - Future: /e2e/tests/cross-browser.spec.ts (New test file for Story 5.7)
    </locations>
    <ideas>
      <idea ac="1">
        Test: "Full PWA functionality on iOS Safari 14+" - Use Playwright WebKit engine, verify manifest.json loads, service worker registers, check Background Sync NOT supported (expect false), verify offline caching works.
      </idea>
      <idea ac="1">
        Test: "Full PWA functionality on Android Chrome 90+" - Use Playwright Chromium engine, verify all PWA APIs supported (service worker, Background Sync, beforeinstallprompt), test offline caching and sync.
      </idea>
      <idea ac="2">
        Test: "Graceful degradation on older browsers" - Mock unsupported service worker (override navigator.serviceWorker), verify upgrade banner appears, ensure core functionality (HTML/CSS) still works without JavaScript.
      </idea>
      <idea ac="3">
        Test: "Feature detection for PWA APIs" - Evaluate JavaScript: 'serviceWorker' in navigator, 'sync' in ServiceWorkerRegistration.prototype, 'wakeLock' in navigator. Verify appropriate warnings displayed on iOS Safari.
      </idea>
      <idea ac="5">
        Test: "No browser-specific bugs" - Run existing test suite (recipe.spec.ts, meal-planning.spec.ts) on all three browsers (chromium, firefox, webkit), ensure no console errors, verify identical behavior.
      </idea>
      <idea ac="6">
        Test: "Consistent visual rendering across browsers" - Load /dashboard on all browsers, capture computed styles for key elements (navigation, buttons, forms), compare font sizes, colors, layouts are identical.
      </idea>
      <idea ac="7">
        Test: "Form inputs work on all browsers" - Test date pickers, select dropdowns, file uploads on Chromium/Firefox/WebKit. Verify native controls render, user can input values, validation works consistently.
      </idea>
      <idea ac="8">
        Test: "JavaScript compatibility" - Verify TwinSpark progressive enhancement JavaScript executes on all browsers without errors. Check console for polyfill loading, ES2015+ features work.
      </idea>
    </ideas>
  </tests>
</story-context>
