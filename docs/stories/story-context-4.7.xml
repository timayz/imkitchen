<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>4.7</storyId>
    <title>Morning Preparation Reminders</title>
    <status>Approved</status>
    <generatedAt>2025-10-18</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-4.7.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user</asA>
    <iWant>morning reminders for tonight's advance prep</iWant>
    <soThat>I remember to prepare before leaving for work</soThat>
    <tasks>
      - Implement morning reminder scheduling logic (AC: 1, 6, 8)
      - Implement notification message generation for morning reminders (AC: 2, 3, 4)
      - Implement deep linking to recipe detail (AC: 5)
      - Implement automatic reminder dismissal (AC: 8)
      - Add reminder type filtering to scheduler (AC: 1, 6)
      - Create integration tests (AC: all)
      - Update notification dashboard/UI (AC: 5)
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Morning reminders sent at 9:00 AM local time
    2. Reminder content: "Prep reminder: {task} tonight for tomorrow's {meal}"
    3. Example: "Prep reminder: Marinate chicken tonight for Thursday's dinner"
    4. Reminder includes estimated prep time (e.g., "Takes 10 minutes")
    5. Deep link to recipe detail page
    6. Only sent if advance prep required within next 24 hours
    7. User can customize reminder time in settings (future: out of MVP scope)
    8. Reminder dismissed automatically after prep window passes
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-4.md" title="Technical Specification: Shopping and Preparation Orchestration">
        <section name="Notifications Domain Architecture">Complete notifications domain crate design with evento aggregates (NotificationAggregate), events (ReminderScheduled, ReminderSent, ReminderDismissed), commands (ScheduleReminderCommand, SendReminderCommand), scheduler logic, and Web Push integration</section>
        <section name="Reminder Scheduling Logic">calculate_reminder_time() function calculating scheduled_time based on advance_prep_hours and meal_time; handles 24h+ prep (9am day before), 4-23h prep (meal_time - prep_hours), &lt;4h prep (1h before meal)</section>
        <section name="Push Notification Integration">Web Push API integration with VAPID authentication, push subscription management, notification payload formatting with title, body, icon, badge, click_action URL</section>
        <section name="Message Generation">generate_notification_body() creating contextual messages based on reminder_type, prep_task (marinate, rise, chill), recipe_title, day_of_week, and prep time estimate</section>
      </doc>
      <doc path="docs/solution-architecture.md" title="Solution Architecture Document">
        <section name="Notifications Domain">Event-sourced notification system using evento; CQRS pattern with NotificationAggregate, read models for pending notifications, background workers for scheduler and delivery</section>
        <section name="Background Workers">Tokio interval-based workers for notification scheduling (daily 9am job), delivery (checks pending notifications), and auto-dismissal (hourly cleanup of expired reminders)</section>
      </doc>
      <doc path="docs/epics.md" title="Epic Breakdown">
        <section name="Story 4.7: Morning Preparation Reminders">User story, 8 acceptance criteria (9am reminders, message format with prep task and day, prep time estimate, deep links, 24h window filter, auto-dismissal), technical notes (scheduled job, timezone handling, notification templates)</section>
        <section name="Epic 4: Shopping and Preparation Orchestration">Epic overview covering shopping lists (stories 4.1-4.5) and preparation reminders (stories 4.6-4.10); goal: automate shopping and provide timely prep reminders for complex recipes</section>
      </doc>
      <doc path="docs/stories/story-4.6.md" title="Story 4.6: Advance Preparation Reminder System">
        <section name="Prerequisite Story">Establishes notifications domain crate scaffold, evento aggregates/events/commands, scheduler.rs with calculate_reminder_time() and generate_notification_body(), push notification integration, and background worker infrastructure</section>
        <section name="Existing Reminder Logic">Handles advance prep reminders for 24h+ recipes (scheduled at 9am day before); Story 4.7 extends this for "morning" reminder_type covering 4-24h prep window</section>
      </doc>
    </docs>
    <code>
      <artifact path="crates/notifications/src/scheduler.rs" kind="module" symbol="calculate_reminder_time, generate_notification_body" lines="12-120" reason="Core scheduling logic for reminder time calculation and message generation; Story 4.7 extends to add morning_reminder_scheduler() for daily 9am job">
        <note>Lines 12-65: calculate_reminder_time() handles 24h+ prep (9am day before), 4-23h prep (meal_time - prep_hours), &lt;4h prep (1h before). Lines 67-120: generate_notification_body() creates contextual messages with prep_task, day_of_week, recipe_title</note>
      </artifact>
      <artifact path="crates/notifications/src/events.rs" kind="event" symbol="ReminderScheduled, ReminderSent, ReminderDismissed" lines="5-62" reason="Domain events for notification lifecycle; ReminderScheduled includes reminder_type field to distinguish 'morning' from 'advance_prep' and 'day_of' reminders">
        <note>Lines 5-19: ReminderScheduled with notification_id, user_id, recipe_id, meal_date, scheduled_time, reminder_type, prep_hours, prep_task. Lines 21-39: ReminderSent and ReminderDismissed for delivery tracking and auto-dismissal</note>
      </artifact>
      <artifact path="crates/notifications/src/commands.rs" kind="command" symbol="ScheduleReminderCommand, schedule_reminder" lines="9-100" reason="Command to schedule reminders; Story 4.7 reuses existing ScheduleReminderCommand with reminder_type='morning' for 9am reminders">
        <note>Lines 9-19: ScheduleReminderCommand with user_id, recipe_id, meal_date, scheduled_time, reminder_type, prep_hours, prep_task. Lines 69-100: schedule_reminder handler validates reminder_type, generates notification_id, creates NotificationAggregate with ReminderScheduled event</note>
      </artifact>
      <artifact path="crates/notifications/src/push.rs" kind="module" symbol="create_push_payload, send_push_notification, WebPushConfig" reason="Web Push API integration for notification delivery; Story 4.7 adds click_action URL for deep linking to recipe detail page">
        <note>create_push_payload() formats Web Push notification with title, body, icon, badge; Story 4.7 extends to include click_action: /recipes/{recipe_id}?highlight=prep for deep linking (AC #5)</note>
      </artifact>
      <artifact path="crates/notifications/src/read_model.rs" kind="projection" symbol="notification_projection, get_pending_notifications_due" reason="evento subscription projecting ReminderScheduled/Sent/Dismissed events to notifications table; query functions for pending reminders; Story 4.7 adds query_expired_reminders() for auto-dismissal">
        <note>notification_projection updates notifications table on evento events; get_pending_notifications_due queries WHERE scheduled_time &lt;= now AND status = 'pending'; Story 4.7 adds query for expired reminders (prep_window_end &lt; now)</note>
      </artifact>
      <artifact path="crates/notifications/src/aggregate.rs" kind="aggregate" symbol="NotificationAggregate" reason="evento aggregate managing notification lifecycle state with event handlers for ReminderScheduled, ReminderSent, ReminderDismissed events">
        <note>Event handlers rebuild aggregate state from evento stream: reminder_scheduled sets notification_id, user_id, recipe_id, scheduled_time; reminder_sent updates delivery_status; reminder_dismissed marks as dismissed</note>
      </artifact>
      <artifact path="crates/notifications/src/lib.rs" kind="module" symbol="notifications" reason="Notifications domain crate public API exporting aggregates, commands, events, scheduler functions, push config, and read model queries">
        <note>Exports: NotificationAggregate, ScheduleReminderCommand, ReminderScheduled/Sent/Dismissed events, calculate_reminder_time, generate_notification_body, WebPushConfig, notification queries</note>
      </artifact>
      <artifact path="crates/meal_planning/src/read_model.rs" kind="query" symbol="query_meal_plan_for_date" reason="Query function to fetch meal plan slots for a specific date; Story 4.7 uses to query tomorrow's meals with advance_prep_hours &lt;= 24 for morning reminder scheduling">
        <note>Query: SELECT * FROM meal_plan_slots WHERE user_id = ? AND meal_date = ? to retrieve recipes scheduled for tomorrow; filter by advance_prep_hours &gt; 0 AND advance_prep_hours &lt;= 24 for morning reminders</note>
      </artifact>
      <artifact path="src/routes/notifications.rs" kind="route" symbol="notifications_page_handler" reason="HTTP route rendering notifications page; displays active reminders including morning prep reminders with deep links to recipe detail">
        <note>GET /notifications renders active reminders from read model; Story 4.7 ensures morning reminders displayed with 'View Recipe' deep link to /recipes/{recipe_id}?highlight=prep</note>
      </artifact>
      <artifact path="templates/pages/notifications.html" kind="template" symbol="NotificationsPageTemplate" reason="Askama template for notifications page; displays reminder cards with message, prep time estimate, deep link button">
        <note>Template iterates over active notifications, displays title, body, scheduled_time; Story 4.7 adds prep_time_estimate field and deep link button with click_action URL</note>
      </artifact>
      <artifact path="migrations/04_notifications.sql" kind="migration" symbol="notifications table" reason="SQLite schema for notifications read model with id, user_id, recipe_id, meal_date, scheduled_time, reminder_type, status, message_body columns">
        <note>Table supports reminder_type IN ('advance_prep', 'morning', 'day_of'); status IN ('pending', 'sent', 'dismissed', 'expired'); morning reminders filtered by reminder_type='morning'</note>
      </artifact>
      <artifact path="tests/morning_reminder_tests.rs" kind="test" symbol="morning reminder integration tests" reason="Integration tests for Story 4.7 covering 9am scheduling, message format, deep linking, auto-dismissal, 24h window filtering">
        <note>Tests to create: test_morning_reminder_scheduled_at_9am, test_morning_reminder_message_format, test_deep_link_url_formatted_correctly, test_expired_reminders_auto_dismissed, test_no_morning_reminder_for_24h_plus_prep</note>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <dependency name="evento" version="1.4+" feature="sqlite">Event sourcing and CQRS framework for notifications domain</dependency>
        <dependency name="sqlx" version="0.8+" feature="runtime-tokio,sqlite,chrono">Async database client for read models and meal plan queries</dependency>
        <dependency name="chrono" version="0.4+" feature="serde">Date/time handling for reminder scheduling, prep window calculations, day_of_week extraction</dependency>
        <dependency name="tokio" version="1.40+" feature="full">Async runtime for background workers (daily 9am job, hourly auto-dismissal)</dependency>
        <dependency name="web-push" version="0.10+">Web Push API client for notification delivery via browser push subscriptions</dependency>
        <dependency name="uuid" version="1.10+" feature="v4,serde">Notification ID generation</dependency>
        <dependency name="serde" version="1.0+" feature="derive">Serialization for events and notification payloads</dependency>
        <dependency name="serde_json" version="1.0+">JSON formatting for push notification payloads</dependency>
        <dependency name="meal_planning" version="0.3.0">Dependency on meal_planning crate for querying tomorrow's meal plan slots</dependency>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    - Event sourcing pattern: All notification state changes via ReminderScheduled/Sent/Dismissed events
    - CQRS separation: Commands write events, queries read from notifications table
    - Morning reminders MUST be scheduled at exactly 9:00 AM (hard-coded for MVP, timezone support out of scope)
    - Reminder_type field distinguishes 'morning' (4-24h prep window) from 'advance_prep' (24h+ prep) and 'day_of' (&lt;4h prep)
    - Only schedule morning reminder if advance_prep_hours &gt; 0 AND advance_prep_hours &lt;= 24 (AC #6)
    - Message format MUST match template: "Prep reminder: {prep_task} tonight for {day_of_week}'s {meal_type}" (AC #2, #3)
    - Deep link format: /recipes/{recipe_id}?highlight=prep (AC #5)
    - Auto-dismissal: Background worker runs hourly, dismisses reminders where scheduled_time + prep_hours &lt; now (AC #8)
    - Prep time estimate extracted from recipe.prep_time_minutes field (AC #4)
    - TDD enforced: Write failing test � implement � test passes
    - Test coverage: 90% for scheduler logic (critical reminder timing), 85% for notification delivery
    - Background workers use tokio::time::interval for scheduling (daily at 9am UTC, hourly for auto-dismissal)
    - Deep link click_action requires push subscription support on client (PWA with service worker)
  </constraints>

  <interfaces>
    <interface name="evento::AggregatorName" kind="trait" path="evento crate">
      <signature>Trait for evento aggregates; requires event handler methods for each event type</signature>
      <usage>Implemented on NotificationAggregate to handle ReminderScheduled, ReminderSent, ReminderDismissed events</usage>
    </interface>
    <interface name="tokio::time::interval" kind="function" path="tokio crate">
      <signature>Creates interval timer for periodic execution (e.g., every 24 hours for 9am job)</signature>
      <usage>Use for daily morning reminder scheduler running at 9:00 AM UTC; interval(Duration::from_secs(86400)) for 24h cycle</usage>
    </interface>
    <interface name="meal_planning::query_meal_plan_for_date" kind="function" path="meal_planning crate">
      <signature>Query meal plan slots for specific user and date; returns Vec&lt;MealPlanSlot&gt; with recipe_id, meal_date, meal_type, advance_prep_hours</signature>
      <usage>Query tomorrow's meals: query_meal_plan_for_date(user_id, tomorrow_date).filter(|slot| slot.advance_prep_hours &gt; 0 && slot.advance_prep_hours &lt;= 24)</usage>
    </interface>
    <interface name="web_push::WebPushClient" kind="struct" path="web-push crate">
      <signature>Client for sending Web Push notifications via push service endpoints; requires VAPID authentication</signature>
      <usage>send_notification(subscription_info, payload) where payload includes click_action URL for deep linking</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TDD approach enforced: Write failing integration test � implement morning_reminder_scheduler() � test passes. Test coverage targets: 90% for scheduler.rs (critical timing logic), 85% for notification delivery. Integration tests use in-memory SQLite with meal_planning and notifications tables. All tests must verify: ReminderScheduled event with reminder_type='morning', scheduled_time=9:00am UTC, message format matches AC #2/#3, deep link URL formatted correctly, auto-dismissal triggered after prep window expiration.
    </standards>
    <locations>
      - crates/notifications/tests/ (unit tests for scheduler functions, auto-dismissal logic)
      - tests/morning_reminder_tests.rs (integration tests for Story 4.7 acceptance criteria)
      - tests/common/mod.rs (shared test utilities: setup_test_db, create_meal_plan_with_prep)
    </locations>
    <ideas>
      AC 1: Integration test creates meal plan for tomorrow with 12h prep recipe, runs morning_reminder_scheduler(), asserts ReminderScheduled event with scheduled_time=9:00am UTC
      AC 2-3: Unit test for generate_notification_body() with prep_task='marinate', recipe='Chicken Tikka Masala', meal_date='2025-10-20' (Thursday), asserts body="Prep reminder: Marinate chicken tonight for Thursday's dinner"
      AC 4: Integration test verifies notification includes prep_time_estimate extracted from recipe.prep_time_minutes (e.g., "Takes 10 minutes")
      AC 5: Unit test for create_push_payload() verifies click_action URL formatted as /recipes/{recipe_id}?highlight=prep
      AC 6: Integration test with recipe advance_prep_hours=30 (exceeds 24h) asserts no morning reminder scheduled (should use advance_prep reminder instead)
      AC 8: Integration test creates morning reminder scheduled for yesterday 9am with prep_hours=12 (expired), runs auto_dismissal_worker(), asserts ReminderDismissed event emitted
      Edge case: Integration test with meal plan for tomorrow but all recipes have prep_hours=0 (no advance prep), asserts no morning reminders scheduled
      Edge case: Integration test with multiple users, asserts morning reminders scheduled only for user's own meal plans (user isolation)
    </ideas>
  </tests>
</story-context>
