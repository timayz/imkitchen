<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.8</storyId>
    <title>Community Recipe Discovery</title>
    <status>Draft</status>
    <generatedAt>2025-10-15</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-2.8.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user</asA>
    <iWant>to browse recipes shared by other users</iWant>
    <soThat>I can expand my culinary repertoire and discover new meal ideas</soThat>
    <tasks>
      <task>Implement /discover route handler (AC: 1, 2, 3, 12)</task>
      <task>Implement filtering logic (AC: 4, 5, 6, 7)</task>
      <task>Create discover.html template (AC: 2, 8, 13)</task>
      <task>Implement /discover/:id route handler (AC: 8, 9, 10, 11)</task>
      <task>Implement "Add to My Recipes" functionality (AC: 11)</task>
      <task>Add SEO meta tags and structured data (AC: 14, 15)</task>
      <task>Write unit tests for read model queries (TDD)</task>
      <task>Write integration tests for discovery routes (TDD)</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">"Discover Recipes" page accessible at GET /discover (public, no auth required)</criterion>
    <criterion id="2">Recipes displayed in card view with: title, image, rating, creator name, complexity, cuisine, prep time</criterion>
    <criterion id="3">Only shared recipes displayed (WHERE is_shared = TRUE AND deleted_at IS NULL)</criterion>
    <criterion id="4">Filter controls available: rating (All, 4+ stars, 3+ stars), cuisine type, preparation time (&lt;30min, 30-60min, &gt;60min), dietary preferences (vegetarian, vegan, gluten-free)</criterion>
    <criterion id="5">Search by recipe title or ingredient name (text input with submit)</criterion>
    <criterion id="6">Sorting options: highest rated, most recent, alphabetical</criterion>
    <criterion id="7">Pagination with 20 recipes per page</criterion>
    <criterion id="8">Clicking recipe card opens detail view at GET /discover/:id</criterion>
    <criterion id="9">Recipe detail shows full recipe with attribution ("By {creator_email}")</criterion>
    <criterion id="10">Community recipes read-only for non-owners (no edit/delete buttons)</criterion>
    <criterion id="11">"Add to My Recipes" button visible on recipe detail (copies to user's library)</criterion>
    <criterion id="12">Guest users can browse /discover without authentication</criterion>
    <criterion id="13">Guest users see "Sign Up to Add Recipes" button instead of "Add to My Recipes"</criterion>
    <criterion id="14">SEO meta tags included: title, description, Open Graph tags</criterion>
    <criterion id="15">Schema.org Recipe JSON-LD markup for rich snippets in search results</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-2.md</path>
        <title>Community Recipe Discovery Workflow</title>
        <section>lines 1534-1581</section>
        <snippet>
          - GET /discover is public (no auth required) for guest access and SEO crawling
          - Server queries recipes table: is_shared = TRUE, deleted_at IS NULL
          - Join recipe_aggregate_ratings for average rating
          - Apply filters from query params (cuisine, rating, prep_time, dietary)
          - Paginate: 20 recipes per page
          - Server renders Askama template with recipe cards and SEO meta tags
          - User clicks "Add to My Recipes": POST /discover/:id/add (requires JWT)
          - Domain command: CreateRecipe (copy of source recipe)
          - Check freemium limit and redirect to /recipes/:new_id
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-2.md</path>
        <title>Community Discovery Routes</title>
        <section>lines 849-969</section>
        <snippet>
          - Router::new() with routes: /discover (get:community_feed), /discover/:id (get:community_recipe_detail), /discover/:id/add (post:add_to_library), /discover/:id/rate (post:rate_community_recipe)
          - CommunityFeedTemplate with recipes, filters, pagination
          - async fn community_feed uses Query params and recipe::read_model::list_shared_recipes
          - async fn add_to_library loads source recipe, verifies is_shared, creates copy with CreateRecipeCommand
          - Schema.org Recipe JSON-LD for SEO
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-2.md</path>
        <title>Database Schema</title>
        <section>lines 979-1006</section>
        <snippet>
          - recipes table: id, user_id, title, ingredients (JSON), instructions (JSON), prep_time_min, cook_time_min, advance_prep_hours, serving_size, image_url, complexity, cuisine, dietary_tags (JSON), is_favorite, is_shared, created_at, updated_at, deleted_at
          - INDEX idx_recipes_shared on (is_shared) WHERE is_shared = TRUE AND deleted_at IS NULL
          - INDEX idx_recipes_cuisine on (cuisine) WHERE deleted_at IS NULL
          - INDEX idx_recipes_complexity on (complexity) WHERE deleted_at IS NULL
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Page Routing and Navigation</title>
        <section>lines 145-202</section>
        <snippet>
          - Public community routes: GET /discover (Community recipe feed, public, indexed), GET /discover/:id (Community recipe detail, public, indexed)
          - Authenticated community actions: POST /discover/:id/add (Add community recipe to library), POST /discover/:id/rate (Rate/review recipe)
          - Navigation Pattern: Traditional &lt;a&gt; links for full page loads with TwinSpark for selective AJAX navigation
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Testing Strategy</title>
        <section>lines 1951-2066</section>
        <snippet>
          - Unit Tests (crates/*/tests/): Test aggregate command handlers, event application, business rules, mock evento dependencies
          - Integration Tests (tests/*.rs): Test full request/response cycle, use in-memory SQLite database, test authentication flows, form validation, error rendering
          - Example: test_create_recipe_endpoint uses reqwest::Client, login to get auth cookie, create recipe with form data
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Story 2.8: Community Recipe Discovery</title>
        <section>lines 430-451</section>
        <snippet>
          - As a user I want to browse recipes shared by others so that I can expand my culinary repertoire
          - Prerequisites: User is authenticated
          - Acceptance Criteria: Discover Recipes page displays shared community recipes in card view with filters for rating, cuisine, prep time, dietary preferences; Search by recipe title or ingredient name; Sorting options; Clicking recipe card opens detail view; Community recipes cannot be edited by non-owners; "Add to My Recipes" button copies recipe to user's library
          - Technical Notes: Read model optimized for discovery queries with filtering; Pagination for scalability (20 recipes per page); Search index on recipe title and ingredient names
        </snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/recipes.rs</path>
        <kind>route_handler</kind>
        <symbol>get_discover</symbol>
        <lines>1191-1294</lines>
        <reason>Existing implementation of GET /discover route showing shared recipes. Story 2.8 should extend this with filtering, search, sorting, and pagination.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/recipes.rs</path>
        <kind>struct</kind>
        <symbol>RecipeDetailView</symbol>
        <lines>65-82</lines>
        <reason>View model for recipe detail template. Includes creator_email for attribution and is_shared flag for privacy checks.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/read_model.rs</path>
        <kind>query_function</kind>
        <symbol>list_shared_recipes</symbol>
        <lines>408-452</lines>
        <reason>Existing query for shared recipes. Story 2.8 should extend this function to accept filter parameters (cuisine, min_rating, max_prep_time, dietary, search, sort, page).</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/read_model.rs</path>
        <kind>struct</kind>
        <symbol>RecipeReadModel</symbol>
        <lines>16-34</lines>
        <reason>Read model struct representing recipe data from database. Contains is_shared, complexity, cuisine, dietary_tags fields used for filtering.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/aggregate.rs</path>
        <kind>aggregate</kind>
        <symbol>RecipeAggregate</symbol>
        <lines>17-45</lines>
        <reason>Recipe aggregate structure with is_shared field. Used when loading source recipe for "Add to My Recipes" functionality.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/recipes.rs</path>
        <kind>route_handler</kind>
        <symbol>post_create_recipe</symbol>
        <lines>96-255</lines>
        <reason>Reference for creating new recipes. "Add to My Recipes" will use similar pattern with CreateRecipeCommand to copy community recipe.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/tests/recipe_integration_tests.rs</path>
        <kind>test_helper</kind>
        <symbol>setup_test_db</symbol>
        <lines>8-25</lines>
        <reason>Test database setup pattern. Story 2.8 tests should use similar approach with in-memory SQLite and evento migrations.</reason>
      </file>
    </code>
    <dependencies>
      <rust>
        <package name="axum" version="0.8">Web framework for HTTP routes and handlers</package>
        <package name="askama" version="0.14">Template engine for rendering HTML</package>
        <package name="sqlx" version="0.8">SQL database driver with compile-time query checking</package>
        <package name="evento" version="1.4">Event sourcing framework for aggregates and event store</package>
        <package name="serde" version="1.0">Serialization/deserialization for JSON data</package>
        <package name="serde_json" version="1.0">JSON parsing for ingredients and instructions</package>
        <package name="tokio" version="1.40">Async runtime for async/await</package>
        <package name="tower" version="0.5">Middleware for HTTP layer</package>
        <package name="tracing" version="0.1">Structured logging</package>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Public Routes: GET /discover and GET /discover/:id must be public (no auth middleware) for guest access and SEO crawling</constraint>
    <constraint>Authentication Required: POST /discover/:id/add requires JWT authentication via auth middleware</constraint>
    <constraint>CQRS Pattern: Query recipes table directly (read model projection from RecipeAggregate events)</constraint>
    <constraint>Event Sourcing: Use evento::get() to load RecipeAggregate when copying recipes. Create new recipe via create_recipe command.</constraint>
    <constraint>Privacy Filtering: Filter by is_shared = 1 AND deleted_at IS NULL. Use idx_recipes_shared index for performance.</constraint>
    <constraint>Freemium Limits: Check recipe count limit (10 for free tier) when adding community recipe to library</constraint>
    <constraint>TDD Approach: Write integration tests for /discover routes before implementation</constraint>
    <constraint>SEO Optimization: Server-rendered HTML with Open Graph meta tags and Schema.org Recipe JSON-LD markup</constraint>
    <constraint>Optional Auth Pattern: Use Option&lt;Extension&lt;Auth&gt;&gt; extractor for guest vs. authenticated users</constraint>
    <constraint>Progressive Enhancement: Use TwinSpark for live filter updates without full page reload</constraint>
    <constraint>Soft Delete Filtering: All queries must include deleted_at IS NULL to exclude soft-deleted recipes</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>create_recipe</name>
      <kind>domain_command</kind>
      <signature>async fn create_recipe(command: CreateRecipeCommand, user_id: &amp;str, executor: &amp;evento::Sqlite, pool: &amp;SqlitePool) -&gt; Result&lt;String, RecipeError&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/lib.rs</path>
      <description>Creates new recipe via event sourcing. Used for "Add to My Recipes" to copy community recipe.</description>
    </interface>
    <interface>
      <name>query_recipe_by_id</name>
      <kind>read_model_query</kind>
      <signature>async fn query_recipe_by_id(recipe_id: &amp;str, pool: &amp;SqlitePool) -&gt; RecipeResult&lt;Option&lt;RecipeReadModel&gt;&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/read_model.rs</path>
      <description>Queries single recipe from read model. Returns None if recipe not found or deleted.</description>
    </interface>
    <interface>
      <name>list_shared_recipes</name>
      <kind>read_model_query</kind>
      <signature>async fn list_shared_recipes(pool: &amp;SqlitePool) -&gt; RecipeResult&lt;Vec&lt;RecipeReadModel&gt;&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/read_model.rs</path>
      <description>Queries all shared recipes. Story 2.8 should extend with filter params: cuisine, min_rating, max_prep_time, dietary, search, sort, page.</description>
    </interface>
    <interface>
      <name>evento::get</name>
      <kind>event_sourcing</kind>
      <signature>async fn get&lt;A: Aggregator&gt;(aggregator_id: &amp;str, executor: &amp;Executor) -&gt; Result&lt;A, evento::Error&gt;</signature>
      <path>evento crate</path>
      <description>Loads aggregate from event store by replaying all events. Used to load source RecipeAggregate when copying to library.</description>
    </interface>
    <interface>
      <name>Auth</name>
      <kind>middleware_extractor</kind>
      <signature>struct Auth { user_id: String, user_tier: Tier }</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/src/middleware/auth.rs</path>
      <description>Authentication middleware extractor. Use Extension&lt;Auth&gt; for authenticated routes and Option&lt;Extension&lt;Auth&gt;&gt; for optional auth.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing follows TDD approach with three layers:
      1. Unit Tests (crates/*/tests/): Test domain logic, aggregate command handlers, event application, and business rules using in-memory event store
      2. Integration Tests (tests/*.rs): Test full HTTP request/response cycle with in-memory SQLite database, authentication flows, form validation, and error rendering
      3. E2E Tests (e2e/tests/*.spec.ts): Test user workflows in browser (future enhancement)

      Test framework: tokio::test for async tests, sqlx for database setup, evento for event sourcing mocks
      Database: In-memory SQLite (:memory:) for fast isolated tests
      Pattern: Setup test DB with evento migrations + SQLx migrations, insert test users, execute operations, assert results
    </standards>
    <locations>
      - crates/recipe/tests/recipe_tests.rs (unit tests for recipe aggregate and read model queries)
      - tests/recipe_integration_tests.rs (integration tests for recipe HTTP routes)
      - tests/community_tests.rs (new file for /discover route integration tests)
    </locations>
    <ideas>
      <test ac="1,2,3,12">Test GET /discover returns 200 OK with HTML containing shared recipes (no auth required)</test>
      <test ac="3">Test GET /discover excludes private recipes (is_shared = false) and deleted recipes (deleted_at != NULL)</test>
      <test ac="4,5,6,7">Test filtering by cuisine, rating, prep time, dietary tags; test search by title and ingredients; test sorting and pagination</test>
      <test ac="8,9">Test GET /discover/:id returns 200 OK for shared recipe with creator attribution</test>
      <test ac="10">Test GET /discover/:id returns 404 for private recipe when accessed by non-owner</test>
      <test ac="11">Test POST /discover/:id/add creates new recipe for authenticated user with "(from community)" suffix</test>
      <test ac="11">Test POST /discover/:id/add returns 401 for unauthenticated user</test>
      <test ac="11">Test POST /discover/:id/add enforces freemium limit (10 recipes for free tier, returns 403)</test>
      <test ac="13">Test guest user sees "Sign Up to Add Recipes" button instead of "Add to My Recipes"</test>
      <test ac="14,15">Test /discover/:id includes Open Graph meta tags and Schema.org Recipe JSON-LD in HTML response</test>
      <test>Test list_shared_recipes query with various filter combinations returns correct results</test>
      <test>Test pagination returns correct page with LIMIT/OFFSET</test>
    </ideas>
  </tests>
</story-context>
