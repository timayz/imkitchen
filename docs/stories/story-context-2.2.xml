<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2</storyId>
    <title>Edit Recipe</title>
    <status>Draft</status>
    <generatedAt>2025-10-14</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-2.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>recipe owner</asA>
    <iWant>modify my recipe details</iWant>
    <soThat>I can correct errors or improve instructions</soThat>
    <tasks>
      - Create recipe edit route and handler (AC: 1, 7, 8)
      - Design and implement recipe edit form template (AC: 1, 2)
      - Implement form validation (AC: 3)
      - Implement update recipe command handler (AC: 4, 5)
      - Update Recipe aggregate to handle RecipeUpdated event (AC: 5)
      - Create evento subscription to update read model (AC: 4, 6)
      - Handle meal plan cascading updates (AC: 6)
      - Add confirmation message and redirect (AC: 4)
      - Write unit tests for Recipe aggregate update logic (TDD)
      - Write integration tests for edit recipe flow (TDD)
      - Write E2E tests for edit recipe user flow (TDD)
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Recipe edit page pre-populated with current recipe data
    2. All fields editable (title, ingredients, instructions, timing, advance prep, serving size)
    3. Changes validated before saving
    4. Successful save updates recipe and shows confirmation
    5. Recipe version history maintained via event sourcing
    6. Updated recipe immediately reflects in meal plans (if currently scheduled)
    7. Only recipe owner can edit their recipes
    8. Community-shared recipes remain editable by owner only
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Event Sourcing and CQRS</section>
        <snippet>evento manages event store schema internally. Recipe aggregate rebuilt from event stream. RecipeUpdated event stores delta (changed fields) for efficiency. CQRS read model updated via evento subscriptions.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Server-Side Rendering Strategy</section>
        <snippet>Full server-side rendering with progressive enhancement. Askama templates compiled at build time for type safety. POST handlers with validation, redirect on success (PRG pattern).</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Form Actions and Mutations</section>
        <snippet>Form validation pattern: Use validator crate for server-side validation. Validation errors: 422 Unprocessable Entity with form re-rendered with inline error messages. PRG (Post/Redirect/Get) pattern after successful save.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Authorization</section>
        <snippet>JWT auth middleware verifies user authentication. Route handler checks ownership: recipe.user_id == auth.user_id. Return 403 Forbidden if ownership check fails.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Route Structure</section>
        <snippet>GET /recipes/:id/edit - Edit recipe form. PUT /recipes/:id - Update recipe handler. Authenticated routes require JWT cookie.</snippet>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Story 2.2: Edit Recipe</section>
        <snippet>All 8 acceptance criteria defined. RecipeUpdated event emitted with changed fields. Event sourcing provides complete edit history. CQRS read model updated for display.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>crates/recipe/src/aggregate.rs</path>
        <kind>aggregate</kind>
        <symbol>RecipeAggregate</symbol>
        <lines>1-94</lines>
        <reason>Recipe aggregate with evento pattern. Has handlers for RecipeCreated, RecipeDeleted, RecipeFavorited. Need to add recipe_updated handler for RecipeUpdated event.</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/src/commands.rs</path>
        <kind>commands</kind>
        <symbol>CreateRecipeCommand, create_recipe, DeleteRecipeCommand, delete_recipe</symbol>
        <lines>1-177</lines>
        <reason>Existing command pattern to follow. Shows validator usage, ownership verification, evento save pattern. Need to add UpdateRecipeCommand and update_recipe function following same pattern.</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/src/events.rs</path>
        <kind>events</kind>
        <symbol>RecipeCreated, RecipeDeleted, RecipeFavorited, Ingredient, InstructionStep</symbol>
        <lines>1-62</lines>
        <reason>Event definitions with bincode encoding. Need to add RecipeUpdated event following same structure. Reuse Ingredient and InstructionStep types.</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/src/read_model.rs</path>
        <kind>read_model</kind>
        <symbol>recipe read model projection handlers</symbol>
        <lines>N/A</lines>
        <reason>Contains evento subscription handlers for RecipeCreated and RecipeDeleted. Need to add subscription handler for RecipeUpdated to update recipes table.</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <package name="evento" version="1.3" purpose="Event sourcing framework with SQLite backend"/>
        <package name="sqlx" version="0.8" purpose="Async SQL database access with compile-time checked queries"/>
        <package name="validator" version="0.20" purpose="Derive-based validation for form data"/>
        <package name="axum" version="0.8" purpose="HTTP web framework for route handlers"/>
        <package name="askama" version="0.14" purpose="Type-safe template engine for server-side rendering"/>
        <package name="bincode" version="2.0" purpose="Binary serialization for evento events"/>
        <package name="chrono" version="0.4" purpose="Date and time library for timestamps"/>
        <package name="serde" version="1.0" purpose="Serialization/deserialization framework"/>
        <package name="anyhow" version="1.0" purpose="Error handling"/>
        <package name="thiserror" version="1.0" purpose="Custom error types"/>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    - Use evento event sourcing pattern: load aggregate, emit event, commit to event store
    - RecipeUpdated event must include only changed fields (delta) for efficiency
    - CQRS: evento subscription handler projects RecipeUpdated to recipes read model table
    - Server-side validation mandatory using validator crate before command execution
    - Ownership verification required: query read model to check recipe.user_id == current_user.id
    - Return 403 Forbidden if user is not recipe owner
    - Use PRG (Post/Redirect/Get) pattern: redirect to recipe detail page after successful update
    - Follow TDD: write tests before implementation (unit, integration, E2E)
    - Askama templates for server-rendered HTML forms
    - Form validation errors: 422 Unprocessable Entity with inline error display
    - Meal plan cascading: emit RecipeUpdated event, meal_planning crate subscribes and refreshes meal_assignments
    - JWT authentication middleware enforces user authentication on protected routes
  </constraints>

  <interfaces>
    <interface>
      <name>evento::save</name>
      <kind>function</kind>
      <signature>evento::save::&lt;RecipeAggregate&gt;(aggregator_id: String) -> Builder</signature>
      <path>evento crate</path>
      <purpose>Load aggregate from event stream and prepare to append new event</purpose>
    </interface>
    <interface>
      <name>evento::load</name>
      <kind>function</kind>
      <signature>evento::load::&lt;RecipeAggregate&gt;(aggregator_id: String, executor: &amp;Sqlite) -> Result&lt;RecipeAggregate&gt;</signature>
      <path>evento crate</path>
      <purpose>Load and rebuild aggregate from event stream for read-only operations</purpose>
    </interface>
    <interface>
      <name>RecipeAggregate</name>
      <kind>struct</kind>
      <signature>struct RecipeAggregate { recipe_id, user_id, title, ingredients, instructions, prep_time_min, cook_time_min, advance_prep_hours, serving_size, is_favorite, is_deleted, created_at }</signature>
      <path>crates/recipe/src/aggregate.rs</path>
      <purpose>Recipe aggregate state rebuilt from events. Add recipe_updated event handler.</purpose>
    </interface>
    <interface>
      <name>validator::Validate</name>
      <kind>trait</kind>
      <signature>trait Validate { fn validate(&amp;self) -> Result&lt;(), ValidationErrors&gt; }</signature>
      <path>validator crate</path>
      <purpose>Derive-based validation for command structs. Use on UpdateRecipeCommand.</purpose>
    </interface>
    <interface>
      <name>sqlx::query</name>
      <kind>function</kind>
      <signature>sqlx::query(sql: &amp;str) -> Query</signature>
      <path>sqlx crate</path>
      <purpose>Execute SQL queries for read model access and ownership verification</purpose>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TDD enforced throughout the project. Unit tests for domain aggregate logic using evento in-memory test fixtures. Integration tests for HTTP routes with in-memory SQLite database. E2E tests using Playwright for full user flows. Coverage goal: 80% (per NFRs). Test frameworks: cargo test (unit/integration), Playwright (E2E).
    </standards>
    <locations>
      - crates/recipe/tests/ (unit tests for aggregate and commands)
      - tests/ (integration tests for HTTP routes at root level)
      - e2e/tests/ (Playwright E2E tests in TypeScript)
    </locations>
    <ideas>
      <test ac="1,7,8">Test GET /recipes/:id/edit returns pre-populated form for owner, 403 for non-owner</test>
      <test ac="2">Test form includes all editable fields with current recipe data</test>
      <test ac="3">Test PUT /recipes/:id with invalid data returns 422 with validation errors</test>
      <test ac="3">Test PUT /recipes/:id with valid data updates recipe successfully</test>
      <test ac="4">Test successful update redirects to recipe detail page with confirmation message</test>
      <test ac="5">Test RecipeUpdated event applied to aggregate state correctly</test>
      <test ac="5">Test event sourcing maintains full history: load aggregate from events includes all updates</test>
      <test ac="6">Test meal_planning subscription handler receives RecipeUpdated and refreshes meal_assignments</test>
      <test ac="7">Test unauthorized user receives 403 Forbidden when attempting to edit another user's recipe</test>
      <test ac="8">Test community-shared recipe (is_shared=true) remains editable by owner only</test>
      <test>E2E: User navigates to edit page, modifies recipe, saves, sees updated detail page</test>
      <test>E2E: Validation errors displayed inline on form submission with invalid data</test>
    </ideas>
  </tests>
</story-context>
