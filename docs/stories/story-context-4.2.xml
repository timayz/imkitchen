<story-context id="story-4.2-context" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>2</storyId>
    <title>Category-Based Ingredient Grouping</title>
    <status>Draft</status>
    <generatedAt>2025-10-18</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-4.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user shopping in a grocery store</asA>
    <iWant>ingredients grouped by store section</iWant>
    <soThat>I can shop efficiently without backtracking</soThat>
    <tasks>
      - Task 1: Implement category assignment service (AC: #2, #7)
      - Task 2: Update shopping list generation to include categories (AC: #2)
      - Task 3: Update shopping list template with category sections (AC: #1, #3, #4, #5, #6, #7, #8)
      - Task 4: Style category sections with Tailwind CSS (AC: #1, #3)
      - Task 5: Update shopping list query logic (AC: #8)
      - Task 6: Comprehensive testing (AC: #1-#8)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Shopping list displays collapsible sections per category</criterion>
    <criterion id="2">Default categories: Produce, Dairy, Meat & Seafood, Pantry, Frozen, Bakery, Other</criterion>
    <criterion id="3">Each category shows item count (e.g., "Produce (8 items)")</criterion>
    <criterion id="4">Items within category listed alphabetically</criterion>
    <criterion id="5">User can expand/collapse categories</criterion>
    <criterion id="6">All categories expanded by default on first view</criterion>
    <criterion id="7">Category order matches typical grocery store layout</criterion>
    <criterion id="8">Empty categories hidden from view</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-4.md" title="Technical Specification: Shopping & Preparation Orchestration" section="Module: categorization.rs">
        Category assignment service design with keyword matching logic. Categories: Produce, Dairy, Meat, Pantry, Frozen, Bakery, Other. Uses predefined keyword constants for 95%+ accuracy.
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-4.md" title="Technical Specification: Shopping & Preparation Orchestration" section="Module: aggregation.rs">
        Ingredient aggregation algorithm that calls assign_category() for each aggregated ingredient during shopping list generation.
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-4.md" title="Technical Specification: Shopping & Preparation Orchestration" section="Read Model Tables">
        shopping_list_items.category column stores category as TEXT (enum variant name: "produce", "dairy", "meat", "frozen", "pantry", "bakery", "other"). Index on (shopping_list_id, category) for fast category-grouped queries.
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md" title="Solution Architecture Document" section="11.1 Domain Crate Structure">
        Shopping domain crate organization with categorization as stateless domain service in crates/shopping/src/categorization.rs.
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md" title="Solution Architecture Document" section="3.2 Data Models">
        shopping_lists and shopping_list_items table schema with category column for grouping ingredients by grocery store section.
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md" title="Epic Breakdown" section="Story 4.2">
        User story and acceptance criteria for category-based ingredient grouping with collapsible sections and item counts per category.
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/PRD.md" title="Product Requirements Document" section="FR-8: Shopping List Generation">
        Functional requirement for category-grouped shopping lists enabling efficient grocery shopping aligned with typical store layouts.
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/PRD.md" title="Product Requirements Document" section="Non-Functional Requirements">
        80% code coverage target, TDD enforced, &lt;2s response time for shopping list generation.
      </doc>
    </docs>

    <code>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/categorization.rs" kind="domain-service" symbol="CategorizationService" lines="1-537" reason="ALREADY IMPLEMENTED in Story 4.1. Contains complete Category enum and categorization logic with 60+ ingredient mappings and comprehensive unit tests. No changes needed for Story 4.2 - this service is ready to use."/>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/aggregation.rs" kind="domain-service" symbol="IngredientAggregationService" lines="1-100" reason="Ingredient aggregation service from Story 4.1. Story 4.2 requires updating aggregate() method to call CategorizationService::categorize() for each ingredient and include category in returned tuple."/>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/aggregate.rs" kind="aggregate" symbol="ShoppingListAggregate" reason="Shopping list aggregate from Story 4.1. May need updates to AggregatedIngredient struct to include category field."/>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/events.rs" kind="domain-event" symbol="ShoppingListGenerated" reason="Event from Story 4.1. ShoppingItem struct within event needs category field added."/>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/read_model.rs" kind="read-model" symbol="GetShoppingListByWeek" reason="Read model query from Story 4.1. Needs updates to group items by category, sort by category order, and filter out empty categories."/>
    </code>

    <dependencies>
      <rust>
        <crate name="evento" version="1.4" reason="Event sourcing framework for shopping list aggregates and events"/>
        <crate name="sqlx" version="0.8" reason="Database queries for read models with SQLite backend"/>
        <crate name="serde" version="1.0" reason="Serialization for events and read models"/>
        <crate name="askama" version="0.14" reason="Server-side HTML templates for shopping list UI"/>
        <crate name="axum" version="0.8" reason="HTTP server and routing"/>
        <crate name="uuid" version="1.10" reason="Unique identifiers for shopping lists and items"/>
        <crate name="chrono" version="0.4" reason="Date/time handling for week_start_date"/>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="architecture">
      Domain service pattern: CategorizationService is a pure, stateless service (no state, just functions). Already implemented in Story 4.1.
    </constraint>
    <constraint id="category-enum">
      Category enum ordering must match typical grocery store layout: Produce(0), Dairy(1), Meat(2), Frozen(3), Pantry(4), Bakery(5), Other(6). This ordering is used for database storage and UI sorting.
    </constraint>
    <constraint id="database">
      shopping_list_items.category column already exists from Story 4.1 migration. Store as lowercase string ("produce", "dairy", etc.) matching enum variant names.
    </constraint>
    <constraint id="ui-collapsible">
      Use HTML &lt;details&gt; and &lt;summary&gt; elements for native browser collapse/expand functionality. No JavaScript required. Optional TwinSpark enhancement for future dynamic updates.
    </constraint>
    <constraint id="empty-categories">
      Filter empty categories in query layer (GetShoppingListByWeek) before template rendering. Never show "Frozen (0 items)" sections in UI.
    </constraint>
    <constraint id="testing">
      TDD enforced: Write tests first (red), implement (green), refactor. Target 80% code coverage via cargo tarpaulin. Unit tests for categorization (already done in 4.1), integration tests for category persistence, E2E tests for UI rendering.
    </constraint>
  </constraints>

  <interfaces>
    <interface name="CategorizationService::categorize" kind="function" signature="pub fn categorize(ingredient_name: &amp;str) -&gt; Category" path="/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/categorization.rs:42">
      Call this function from IngredientAggregationService to assign category to each aggregated ingredient. Already implemented and tested with 60+ ingredients.
    </interface>
    <interface name="Category::as_str" kind="method" signature="pub fn as_str(&amp;self) -&gt; &amp;str" path="/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/categorization.rs:14">
      Convert Category enum to string for database storage and template rendering ("Produce", "Dairy", etc.).
    </interface>
    <interface name="GetShoppingListByWeek" kind="query" signature="pub async fn get_shopping_list_by_week(user_id: &amp;str, week_start_date: &amp;str) -&gt; Result&lt;ShoppingListView, Error&gt;" path="/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/read_model.rs">
      Update this query to group items by category, sort by category order (Produce first, Other last), and filter out categories with 0 items.
    </interface>
  </interfaces>

  <tests>
    <standards>
      Per solution-architecture.md section 15: TDD enforced with 80% coverage target via cargo tarpaulin. Unit tests for domain logic in crates/shopping/tests/, integration tests in tests/shopping_tests.rs, E2E Playwright tests in e2e/tests/shopping.spec.ts. Write tests first (red), implement (green), refactor (maintain green).
    </standards>
    <locations>
      - crates/shopping/tests/categorization_tests.rs (already complete from Story 4.1)
      - crates/shopping/tests/integration_tests.rs (update for category validation)
      - tests/shopping_tests.rs (integration tests for shopping list generation with categories)
      - e2e/tests/shopping.spec.ts (E2E tests for category sections rendering and collapse/expand)
    </locations>
    <ideas>
      <test ac="2" desc="Unit test: Verify Category enum has all 7 variants (Produce, Dairy, Meat, Frozen, Pantry, Bakery, Other)"/>
      <test ac="2" desc="Unit test: Verify Category::as_str() returns correct string for each variant"/>
      <test ac="2,7" desc="Unit test: Verify category ordering (Produce=0, Dairy=1, ..., Other=6) matches grocery store layout"/>
      <test ac="1,3" desc="Integration test: Generate shopping list with 3 recipes, verify all items have category assigned and item counts correct"/>
      <test ac="4" desc="Integration test: Verify items within each category sorted alphabetically by ingredient_name"/>
      <test ac="8" desc="Integration test: Generate shopping list with only Produce items, verify Dairy/Meat/Other categories not in response (filtered)"/>
      <test ac="1,5,6" desc="E2E test: View shopping list page, verify category sections rendered with &lt;details&gt; element, all expanded by default"/>
      <test ac="5" desc="E2E test: Click category header to collapse, verify items hidden; click again to expand, verify items visible"/>
      <test ac="3" desc="E2E test: Verify each category header displays correct item count (e.g., 'Produce (8 items)')"/>
      <test ac="8" desc="E2E test: Verify empty categories not displayed (no 'Frozen (0 items)' section if no frozen items)"/>
    </ideas>
  </tests>
</story-context>
