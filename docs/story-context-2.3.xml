<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.3</storyId>
    <title>Delete Recipe</title>
    <status>Approved</status>
    <generatedAt>2025-10-14</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-2.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>recipe owner</asA>
    <iWant>delete a recipe I no longer use</iWant>
    <soThat>I can keep my library organized</soThat>
    <tasks>
      <task id="1" ac="1">Add delete button to recipe detail page</task>
      <task id="2" ac="2">Implement confirmation dialog</task>
      <task id="3" ac="3,6,7,8">Create recipe deletion route and handler</task>
      <task id="4" ac="8">Implement Recipe aggregate delete handler</task>
      <task id="5" ac="3,6,7">Create evento subscription to update read model</task>
      <task id="6" ac="4,5">Handle meal plan cascading updates</task>
      <task id="7" ac="7">Handle community ratings/reviews</task>
      <task id="8">Write unit tests for Recipe aggregate delete logic (TDD)</task>
      <task id="9">Write integration tests for delete recipe flow (TDD)</task>
      <task id="10">Write E2E tests for delete recipe user flow (TDD)</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Delete button available on recipe detail page</criterion>
    <criterion id="2">Confirmation dialog displays before deletion: "Are you sure? This cannot be undone."</criterion>
    <criterion id="3">Successful deletion removes recipe from user's library</criterion>
    <criterion id="4">Deleted recipe removed from any active meal plans</criterion>
    <criterion id="5">Meal plans with deleted recipes show empty slots requiring replacement</criterion>
    <criterion id="6">Recipe count decremented (frees slot for free tier users)</criterion>
    <criterion id="7">Community ratings/reviews retained for analytics but recipe no longer discoverable</criterion>
    <criterion id="8">Soft delete maintains data integrity for audit trail</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>3.2 Data Models and Relationships</section>
        <snippet>Event sourcing with evento: Recipe aggregate rebuilt from event stream. RecipeDeleted event uses soft delete pattern. Events never deleted - maintains audit trail.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>ADR-001: Event Sourcing with evento</section>
        <snippet>Full event log enables audit trail. CQRS projections optimize read performance. Temporal queries support future features. Cannot delete events (GDPR requires anonymization approach).</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>2.2 Server-Side Rendering Strategy</section>
        <snippet>Askama templates for type-safe HTML rendering. JavaScript confirmation for UX, server-side ownership check for security. Progressive enhancement pattern.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>5.3 Protected Routes</section>
        <snippet>JWT auth middleware verifies authentication. Route handler checks ownership. Return 403 Forbidden if ownership check fails.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-2.md</path>
        <title>Technical Specification Epic 2</title>
        <section>AC-2.3: Recipe Deletion</section>
        <snippet>User can delete own recipes (soft delete with deleted_at timestamp). Deleted recipes excluded from all queries. RecipeDeleted event written. Recipe image deleted from MinIO. Not visible in meal planning or community discovery.</snippet>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Story 2.3: Delete Recipe</section>
        <snippet>Technical Notes: RecipeDeleted event (soft delete), is_deleted flag on read model, Cascade logic updates meal plans</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-2.2.md</path>
        <title>Story 2.2 Completion Notes</title>
        <section>TwinSpark Pattern Summary</section>
        <snippet>Use POST method for all mutations (not PUT/DELETE verbs). Success response: 200 OK + ts-location header. TwinSpark intercepts and navigates client-side. Structured logging for security events.</snippet>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>crates/recipe/src/events.rs</path>
        <kind>event-definition</kind>
        <symbol>RecipeDeleted</symbol>
        <lines>40-50</lines>
        <reason>Event already defined with user_id and deleted_at fields. Used for soft delete pattern in evento event sourcing.</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/src/aggregate.rs</path>
        <kind>event-handler</kind>
        <symbol>recipe_deleted</symbol>
        <lines>72-82</lines>
        <reason>Aggregate handler already implemented. Sets is_deleted flag to true when RecipeDeleted event applied.</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/src/commands.rs</path>
        <kind>command</kind>
        <symbol>DeleteRecipeCommand</symbol>
        <lines>122-125</lines>
        <reason>Command struct defined with recipe_id and user_id for ownership verification.</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/src/commands.rs</path>
        <kind>command-handler</kind>
        <symbol>delete_recipe</symbol>
        <lines>127-173</lines>
        <reason>Command handler fully implemented. Verifies ownership, creates RecipeDeleted event, commits to evento store.</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/src/read_model.rs</path>
        <kind>subscription-handler</kind>
        <symbol>recipe_deleted_handler</symbol>
        <lines>71-90</lines>
        <reason>Evento subscription handler implemented. Performs DELETE FROM recipes WHERE id = ? to remove from read model (soft delete via removal).</reason>
      </artifact>
      <artifact>
        <path>templates/pages/recipe-detail.html</path>
        <kind>template</kind>
        <symbol>recipe-detail</symbol>
        <lines>all</lines>
        <reason>Template needs delete button with confirmation dialog. Must check recipe ownership for conditional rendering.</reason>
      </artifact>
      <artifact>
        <path>src/routes/recipes.rs</path>
        <kind>route-handler</kind>
        <symbol>recipe routes</symbol>
        <lines>all</lines>
        <reason>Need to add POST /recipes/:id/delete route handler. Follow TwinSpark pattern: POST method, 200 OK with ts-location header.</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/tests/recipe_tests.rs</path>
        <kind>unit-tests</kind>
        <symbol>recipe unit tests</symbol>
        <lines>all</lines>
        <reason>Need to add unit tests for RecipeDeleted event handler and ownership verification logic.</reason>
      </artifact>
      <artifact>
        <path>tests/recipe_integration_tests.rs</path>
        <kind>integration-tests</kind>
        <symbol>recipe integration tests</symbol>
        <lines>all</lines>
        <reason>Need to add integration tests for POST /recipes/:id/delete route, authorization, and read model sync.</reason>
      </artifact>
    </code>

    <dependencies>
      <rust>
        <package name="evento" version="1.3">Event sourcing framework with sqlite support</package>
        <package name="axum" version="0.8">HTTP server framework with routing</package>
        <package name="askama" version="0.14">Type-safe template rendering</package>
        <package name="sqlx" version="0.8">Async SQL with compile-time checking (disabled)</package>
        <package name="validator" version="0.20">Derive-based validation for commands</package>
        <package name="serde" version="1.0">Serialization framework</package>
        <package name="chrono" version="0.4">Date and time handling</package>
        <package name="tracing" version="0.1">Structured logging and instrumentation</package>
        <package name="anyhow" version="1.0">Error handling</package>
        <package name="thiserror" version="1.0">Custom error types</package>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="event-sourcing">Event sourcing with evento: All state changes recorded as events. Recipe aggregate rebuilt from event stream. RecipeDeleted event MUST NOT hard delete - soft delete only via is_deleted flag.</constraint>
    <constraint id="cqrs">CQRS read model projection: recipes table updated via evento subscription. Subscription handler removes recipe from read model (DELETE FROM recipes). Events remain in evento event store for audit trail.</constraint>
    <constraint id="twinspark-pattern">TwinSpark progressive enhancement: Use POST method (not DELETE verb). Success response: 200 OK with ts-location: /recipes header. TwinSpark intercepts for client-side navigation. Fallback to full page load if JS disabled.</constraint>
    <constraint id="authorization">Ownership verification required: Verify recipe.user_id == auth.user_id before deletion. Return 403 Forbidden if unauthorized. Log security events with structured fields (user_id, recipe_id, event, action).</constraint>
    <constraint id="soft-delete">Soft delete pattern: Never hard delete from database. Set deleted_at timestamp and is_deleted flag. Exclude from queries via WHERE is_deleted = FALSE. Enables recovery and audit trail.</constraint>
    <constraint id="freemium">Recipe count management: RecipeDeleted event consumed by user domain to decrement recipe_count. Frees slot for free tier users to create new recipe if count < 10.</constraint>
    <constraint id="cascading">Cross-domain integration: meal_planning crate (future) must subscribe to RecipeDeleted events. Handle empty meal plan slots requiring replacement. Document integration pattern in read_model.rs.</constraint>
    <constraint id="testing">TDD enforced: Write tests FIRST before implementation. Minimum 80% code coverage. Unit tests for aggregate logic, integration tests for HTTP routes, E2E tests for user flows.</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>delete_recipe</name>
      <kind>command-handler</kind>
      <signature>pub async fn delete_recipe(command: DeleteRecipeCommand, executor: &Sqlite, pool: &SqlitePool) -> RecipeResult&lt;()&gt;</signature>
      <path>crates/recipe/src/commands.rs</path>
      <description>Already implemented. Verifies ownership, creates RecipeDeleted event, commits to evento store.</description>
    </interface>
    <interface>
      <name>RecipeDeleted</name>
      <kind>event</kind>
      <signature>pub struct RecipeDeleted { pub user_id: String, pub deleted_at: String }</signature>
      <path>crates/recipe/src/events.rs</path>
      <description>Already defined. Used by aggregate handler and subscription handler.</description>
    </interface>
    <interface>
      <name>recipe_deleted_handler</name>
      <kind>subscription-handler</kind>
      <signature>async fn recipe_deleted_handler&lt;E: Executor&gt;(context: &Context&lt;'_, E&gt;, event: EventDetails&lt;RecipeDeleted&gt;) -> anyhow::Result&lt;()&gt;</signature>
      <path>crates/recipe/src/read_model.rs</path>
      <description>Already implemented. Removes recipe from read model via DELETE FROM recipes WHERE id = ?.</description>
    </interface>
    <interface>
      <name>Auth</name>
      <kind>middleware-extractor</kind>
      <signature>Auth extractor provides authenticated user_id from JWT</signature>
      <path>src/middleware/auth.rs</path>
      <description>Use for ownership verification in route handler. Extract auth.user_id to compare with recipe owner.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TDD approach enforced with 80% code coverage target. Use evento::test for aggregate testing with in-memory event store. Integration tests use test_app() helper from src/lib.rs to create Axum application with test database. E2E tests use Playwright (TypeScript) for full user flows. All tests must pass before merge. Unit tests verify domain logic, integration tests verify HTTP endpoints and read model projections, E2E tests verify complete user journeys.
    </standards>

    <locations>
      <location>crates/recipe/tests/recipe_tests.rs - Unit tests for Recipe aggregate</location>
      <location>tests/recipe_integration_tests.rs - Integration tests for recipe HTTP routes</location>
      <location>e2e/tests/recipe-management.spec.ts - E2E Playwright tests for recipe flows</location>
    </locations>

    <ideas>
      <idea ac="8">Unit test: test_recipe_deleted_event_sets_is_deleted_flag() - Verify RecipeDeleted event handler sets is_deleted = true on aggregate</idea>
      <idea ac="3,6,7,8">Unit test: test_delete_recipe_validates_ownership() - Verify DeleteRecipeCommand rejects unauthorized user with RecipeError::Unauthorized</idea>
      <idea ac="8">Unit test: test_deleted_recipe_cannot_be_updated() - Verify deleted recipe cannot be modified (load aggregate, check is_deleted flag)</idea>
      <idea ac="3">Integration test: test_post_recipe_delete_success_returns_ts_location() - POST /recipes/:id/delete with valid owner returns 200 OK + ts-location: /recipes</idea>
      <idea ac="3,7,8">Integration test: test_post_recipe_delete_unauthorized_returns_403() - POST with non-owner returns 403 Forbidden with structured logging</idea>
      <idea ac="3,6">Integration test: test_recipe_delete_syncs_to_read_model() - Verify RecipeDeleted event removes recipe from recipes table (soft delete)</idea>
      <idea ac="3">Integration test: test_deleted_recipe_excluded_from_user_queries() - Verify list_user_recipes() no longer returns deleted recipe</idea>
      <idea ac="6">Integration test: test_recipe_count_decremented_after_delete() - Verify user recipe count decremented for freemium enforcement</idea>
      <idea ac="1,2,3">E2E test: test_user_deletes_recipe_from_detail_page() - User navigates to recipe detail, clicks delete button, confirms dialog, recipe removed from list</idea>
      <idea ac="2">E2E test: test_user_cancels_delete_confirmation() - User clicks delete but cancels confirmation, recipe remains</idea>
    </ideas>
  </tests>
</story-context>
