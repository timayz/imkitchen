<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>9</epicId>
    <storyId>9.3</storyId>
    <title>Create Meal Planning Preferences Form</title>
    <status>Approved</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-9.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>frontend developer</asA>
    <iWant>build user preferences form</iWant>
    <soThat>users can customize meal planning algorithm</soThat>
    <tasks>
      - Create preferences form template
      - Implement time constraint inputs
      - Implement complexity toggle
      - Implement cuisine variety slider
      - Implement dietary restrictions checkboxes
      - Add custom allergen input
      - Implement form validation
      - Configure form submission
      - Handle success response
      - Responsive design and styling
      - Integration testing
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="9.3.1">Template created at `templates/profile/meal_planning_preferences.html`</criterion>
    <criterion id="9.3.2">Form displays all preference fields populated with current user values from `UserPreferencesView`</criterion>
    <criterion id="9.3.3">Time constraints: numeric inputs for `max_prep_time_weeknight` and `max_prep_time_weekend` (minutes, 0-300 range)</criterion>
    <criterion id="9.3.4">Complexity toggle: checkbox for `avoid_consecutive_complex` with label "Avoid complex meals on consecutive days"</criterion>
    <criterion id="9.3.5">Cuisine variety: slider input (range 0.0-1.0, step 0.1) with labels "Repeat OK" to "Mix it up!"</criterion>
    <criterion id="9.3.6">Dietary restrictions: checkbox list (Vegetarian, Vegan, GlutenFree, DairyFree, NutFree, Halal, Kosher)</criterion>
    <criterion id="9.3.7">Custom allergen: text input for `custom_dietary_restriction` with label "Custom dietary restriction (e.g., shellfish)"</criterion>
    <criterion id="9.3.8">Form validation: HTML5 (required, min, max) + server-side with inline error messages</criterion>
    <criterion id="9.3.9">Save button submits to `PUT /profile/meal-planning-preferences` with `action` and `method` attributes</criterion>
    <criterion id="9.3.10">Success: redirect to `/profile` with toast "Preferences saved successfully"</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-9.md</path>
        <title>Story 9.3: Create Meal Planning Preferences Form</title>
        <section>AC-9.3.1 through AC-9.3.10</section>
        <snippet>User preferences form with time constraints (numeric), complexity toggle (checkbox), cuisine variety slider (range 0.0-1.0), dietary restrictions (checkboxes), custom allergen (text). HTML5 + server-side validation. Form submission to PUT /profile/meal-planning-preferences.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-9.md</path>
        <title>Form Handling</title>
        <section>Detailed Design</section>
        <snippet>HTML form POST to PUT /profile/meal-planning-preferences. Server-side validation returns 422 with inline error messages. Client-side HTML5 validation (required, min, max, pattern). Success: 303 redirect to /profile with toast.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>templates/pages/recipe-form.html</path>
        <kind>template</kind>
        <symbol>recipe-form</symbol>
        <lines>N/A</lines>
        <reason>Existing form template with Askama. Reference for form structure, validation patterns, fieldsets, and HTML5 input types.</reason>
      </artifact>
      <artifact>
        <path>templates/components/form-field.html</path>
        <kind>component</kind>
        <symbol>form-field</symbol>
        <lines>N/A</lines>
        <reason>Reusable form field component. Reference for label/input pairing, error message display, and accessibility patterns.</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <package name="axum" version="0.8">Form handling with axum::Form extractor</package>
        <package name="validator" version="0.20">Server-side form validation with derive macros</package>
        <package name="askama" version="0.14">Template rendering with form data and errors</package>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Server-Rendered Forms: Use standard HTML form submission (no AJAX required). Progressive enhancement.</constraint>
    <constraint>CSRF Protection: Include CSRF token in all mutating forms.</constraint>
    <constraint>Validation Strategy: HTML5 client-side + server-side validation for security. Never trust client.</constraint>
    <constraint>Accessibility: Proper labels with for/id attributes, fieldsets with legends, error messages with ARIA attributes.</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>GET /profile/meal-planning-preferences</name>
      <kind>route</kind>
      <signature>async fn get_preferences_form(State(state): State&lt;AppState&gt;, user: User) -> Result&lt;Html&lt;String&gt;, AppError&gt;</signature>
      <path>Epic 8 backend routes</path>
      <description>Serves preferences form with current user values from UserPreferencesView read model.</description>
    </interface>
    <interface>
      <name>PUT /profile/meal-planning-preferences</name>
      <kind>route</kind>
      <signature>async fn update_preferences(State(state): State&lt;AppState&gt;, user: User, Form(data): Form&lt;UpdatePreferencesForm&gt;) -> Result&lt;StatusCode, AppError&gt;</signature>
      <path>Epic 8 backend routes</path>
      <description>Processes form submission. Validates input. Sends UpdateMealPlanningPreferences command. Returns 303 redirect on success, 422 with errors on failure.</description>
    </interface>
    <interface>
      <name>UserPreferencesView</name>
      <kind>struct</kind>
      <signature>pub struct UserPreferencesView { pub user_id: String, pub dietary_restrictions: Vec&lt;DietaryRestriction&gt;, pub max_prep_time_weeknight: u32, pub max_prep_time_weekend: u32, pub avoid_consecutive_complex: bool, pub cuisine_variety_weight: f32 }</signature>
      <path>Epic 6-8 domain models</path>
      <description>Read model for template pre-population. Contains all preference fields.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Playwright integration tests verify form submission and validation. Test form load with pre-populated values, update values, submit, verify preferences saved. Test invalid values trigger server-side errors displayed inline. Accessibility tests verify labels, fieldsets, error announcements.
    </standards>
    <locations>
      - Playwright E2E tests for form submission flow
      - Story 9.7 accessibility tests for form compliance
    </locations>
    <ideas>
      <test ac="9.3.1">Verify `templates/profile/meal_planning_preferences.html` created</test>
      <test ac="9.3.2">Test: Load form → Verify fields pre-populated from UserPreferencesView</test>
      <test ac="9.3.3">Test: Numeric inputs have min="0", max="300", type="number"</test>
      <test ac="9.3.4">Test: Checkbox checked when avoid_consecutive_complex=true</test>
      <test ac="9.3.5">Test: Slider min="0", max="1", step="0.1", labels displayed</test>
      <test ac="9.3.6">Test: Dietary checkboxes pre-checked based on user_preferences.dietary_restrictions</test>
      <test ac="9.3.7">Test: Custom allergen input optional, pre-populated if exists</test>
      <test ac="9.3.8">Playwright test: Submit invalid values → Verify error messages displayed next to fields</test>
      <test ac="9.3.9">Test: Form action="/profile/meal-planning-preferences", method POST with _method=PUT hidden field</test>
      <test ac="9.3.10">Playwright test: Submit valid form → Redirect to /profile → Toast "Preferences saved successfully"</test>
    </ideas>
  </tests>
</story-context>
