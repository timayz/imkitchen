<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>9</epicId>
    <storyId>9.5</storyId>
    <title>Add Week Regeneration UI with Confirmation</title>
    <status>Approved</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-9.5.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>frontend developer</asA>
    <iWant>create regeneration buttons with confirmation dialogs</iWant>
    <soThat>users can regenerate weeks safely</soThat>
    <tasks>
      - Add "Regenerate This Week" button to future weeks
      - Add "Regenerate All Future Weeks" button
      - Create confirmation modal component
      - Implement "Regenerate This Week" confirmation
      - Implement "Regenerate All Future Weeks" confirmation
      - Integrate TwinSpark for form submission
      - Implement loading spinner
      - Handle success response
      - Handle error response
      - Modal interaction and accessibility
      - Responsive design
      - Integration testing
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="9.5.1">"Regenerate This Week" button added to each future week's calendar (not current/past weeks)</criterion>
    <criterion id="9.5.2">"Regenerate All Future Weeks" button added to main calendar navigation area</criterion>
    <criterion id="9.5.3">Clicking "Regenerate This Week" shows confirmation modal: "Replace meals for Week {X} ({date range})?"</criterion>
    <criterion id="9.5.4">Clicking "Regenerate All Future Weeks" shows modal: "Regenerate {N} future weeks? Your current week will be preserved."</criterion>
    <criterion id="9.5.5">Confirmation modal has Cancel and Confirm buttons (styled: secondary + primary)</criterion>
    <criterion id="9.5.6">Confirm triggers POST to `/plan/week/:week_id/regenerate` or `/plan/regenerate-all-future` with TwinSpark</criterion>
    <criterion id="9.5.7">Loading spinner shown during regeneration (overlay on calendar)</criterion>
    <criterion id="9.5.8">Success: Calendar updates with new meals via `ts-target="#calendar-content"` and `ts-swap="innerHTML"`</criterion>
    <criterion id="9.5.9">Error: Display error message in toast: "Failed to regenerate. Please try again."</criterion>
    <criterion id="9.5.10">Locked weeks display disabled text "Cannot Regenerate (week in progress)" instead of button</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-9.md</path>
        <title>Story 9.5: Add Week Regeneration UI with Confirmation</title>
        <section>AC-9.5.1 through AC-9.5.10</section>
        <snippet>Regeneration buttons with confirmation modals. "Regenerate This Week" for future weeks, "Regenerate All Future Weeks" for all. Modal shows week count/date range, Cancel/Confirm buttons. TwinSpark POST to regeneration routes. Loading spinner during request. Success updates calendar via TwinSpark swap. Error displays toast.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-9.md</path>
        <title>Workflow 2: Regenerate All Future Weeks</title>
        <section>Workflows and Sequencing</section>
        <snippet>User clicks "Regenerate All Future Weeks" → Modal displays confirmation → User confirms → POST /plan/regenerate-all-future → Backend regenerates weeks 2-5, preserves locked week 1 → 303 Redirect → Display updated calendar</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>templates/components/regenerate-confirmation-modal.html</path>
        <kind>component</kind>
        <symbol>regenerate-confirmation-modal</symbol>
        <lines>N/A</lines>
        <reason>Existing modal component for regeneration confirmation. May need updates for multi-week context.</reason>
      </artifact>
      <artifact>
        <path>static/js/meal-regeneration.js</path>
        <kind>script</kind>
        <symbol>meal-regeneration</symbol>
        <lines>N/A</lines>
        <reason>Existing regeneration JavaScript. Reference for modal control, loading states, and TwinSpark integration patterns.</reason>
      </artifact>
      <artifact>
        <path>templates/components/modal.html</path>
        <kind>component</kind>
        <symbol>modal</symbol>
        <lines>N/A</lines>
        <reason>Generic modal component. Reference for modal structure, accessibility (role="dialog", ARIA attributes), and focus management.</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <package name="axum" version="0.8">Route handlers for POST /plan/week/:week_id/regenerate and /plan/regenerate-all-future</package>
      </rust>
      <frontend>
        <library name="TwinSpark">POST requests with ts-req, ts-target, ts-swap for partial updates</library>
        <library name="JavaScript">Modal control, loading spinner, event handlers</library>
      </frontend>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Progressive Enhancement: Modal and regeneration work with or without heavy JavaScript.</constraint>
    <constraint>Confirmation Pattern: Always confirm destructive actions (regeneration replaces meals).</constraint>
    <constraint>Loading States: Show spinner during async operations for better UX.</constraint>
    <constraint>Accessibility: Modal keyboard navigation (Tab, Escape), ARIA attributes (role="dialog", aria-labelledby, aria-describedby), focus trap.</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>POST /plan/week/:week_id/regenerate</name>
      <kind>route</kind>
      <signature>async fn regenerate_week(Path(week_id): Path&lt;String&gt;, State(state): State&lt;AppState&gt;, user: User) -> Result&lt;Html&lt;String&gt;, AppError&gt;</signature>
      <path>Epic 8 backend routes</path>
      <description>Regenerates single week. Returns HTML fragment (partial calendar update) or error status. TwinSpark target: #calendar-content.</description>
    </interface>
    <interface>
      <name>POST /plan/regenerate-all-future</name>
      <kind>route</kind>
      <signature>async fn regenerate_all_future_weeks(State(state): State&lt;AppState&gt;, user: User) -> Result&lt;StatusCode, AppError&gt;</signature>
      <path>Epic 8 backend routes</path>
      <description>Regenerates all future weeks, preserves current locked week. Returns 303 redirect or error status.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Playwright integration tests verify full regeneration flow with modal. Test modal opens, displays correct message, Cancel closes modal, Confirm triggers POST, calendar updates. Test error handling with toast display. Accessibility tests verify modal keyboard navigation and ARIA.
    </standards>
    <locations>
      - Playwright E2E tests for regeneration flows
      - Story 9.7 accessibility tests for modal compliance
    </locations>
    <ideas>
      <test ac="9.5.1">Test: Future week shows "Regenerate This Week" button, current/past weeks do not</test>
      <test ac="9.5.2">Test: "Regenerate All Future Weeks" button visible in navigation area</test>
      <test ac="9.5.3">Playwright test: Click "Regenerate This Week" → Modal opens with week {X} and date range</test>
      <test ac="9.5.4">Playwright test: Click "Regenerate All Future Weeks" → Modal shows future weeks count</test>
      <test ac="9.5.5">Test: Modal has Cancel (secondary) and Confirm (primary/danger) buttons</test>
      <test ac="9.5.6">Playwright test: Confirm → POST to /plan/week/:week_id/regenerate with TwinSpark</test>
      <test ac="9.5.7">Test: Loading spinner displayed during POST request</test>
      <test ac="9.5.8">Playwright test: Success → Calendar #calendar-content updated with new meals</test>
      <test ac="9.5.9">Test: Error (500) → Toast "Failed to regenerate. Please try again." displayed</test>
      <test ac="9.5.10">Test: Locked week shows "Cannot Regenerate (week in progress)" text, no button</test>
    </ideas>
  </tests>
</story-context>
