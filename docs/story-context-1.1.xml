<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.1</storyId>
    <title>User Registration</title>
    <status>Draft</status>
    <generatedAt>2025-10-12</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-1.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a new user</asA>
    <iWant>to create an account with email and password</iWant>
    <soThat>I can access personalized meal planning features</soThat>
    <tasks>
      - Create User domain crate structure (AC: 1-8)
      - Implement UserAggregate event handlers (AC: 5)
      - Implement password hashing utilities (AC: 2, 8)
      - Create RegisterUserCommand and handler (AC: 1-4, 8)
      - Implement read model projection (AC: 5)
      - Create registration route handler (AC: 1, 6, 7, 8)
      - Create JWT token generation utilities (AC: 6)
      - Create registration page template (AC: 1, 8)
      - Add comprehensive tests (AC: 1-8)
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Registration form displays email and password fields with clear validation rules
    2. Password must be minimum 8 characters
    3. Email format validation applied on client and server side
    4. System prevents duplicate email registrations with clear error message
    5. Successful registration creates user account and logs user in automatically
    6. JWT token stored in HTTP-only secure cookie with CSRF protection
    7. User redirected to onboarding/profile setup after registration
    8. Failed registration displays specific validation errors (weak password, duplicate email, invalid format)
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Technical Specification: User Authentication & Profile Management">
        <section name="User Domain Crate">Complete UserAggregate implementation with evento pattern, event handlers (user_created), commands (RegisterUserCommand), password hashing (Argon2), and read model projections</section>
        <section name="APIs and Interfaces">POST /register route handler implementation with form validation, JWT generation, cookie setting, and error handling</section>
        <section name="Data Models and Contracts">users table schema with id, email, password_hash, tier, recipe_count, created_at fields; SQLite with evento event store</section>
        <section name="Workflows and Sequencing">Complete registration flow: form submission → validation → email uniqueness check → password hashing → UserCreated event → JWT generation → cookie → redirect</section>
        <section name="Acceptance Criteria">AC-1.1 to AC-1.5 with detailed validation scenarios (duplicate email, short password, invalid format)</section>
      </doc>
      <doc path="docs/solution-architecture.md" title="Solution Architecture Document">
        <section name="Application Architecture">Event-sourced monolith pattern with DDD bounded contexts; root binary with Axum routes; domain crates (user, recipe, meal_plan); evento for ES/CQRS</section>
        <section name="Technology Stack">Rust 1.90+, Axum 0.8, Askama 0.14, evento 1.3, SQLite 3.45, SQLx 0.8, validator 0.20, argon2 0.5, jsonwebtoken 9.3</section>
        <section name="Security Architecture">Argon2id password hashing (OWASP params), JWT HS256 tokens, HTTP-only cookies (Secure, SameSite=Lax), CSRF protection, input validation via validator crate</section>
      </doc>
      <doc path="docs/epics.md" title="Epic Breakdown">
        <section name="Story 1.1: User Registration">User story (As a new user, I want to create account...), acceptance criteria 1-8, technical notes (evento aggregate, Argon2, JWT RS256, CSRF protection)</section>
        <section name="Epic 1 Technical Summary">Aggregates: User, UserProfile; Events: UserRegistered, UserLoggedIn, PasswordResetRequested; Security: OWASP compliance, JWT RS256, Argon2; Testing: TDD enforced</section>
      </doc>
    </docs>
    <code>
      <!-- No existing code artifacts - this is the first story establishing baseline structure -->
    </code>
    <dependencies>
      <rust>
        <dependency name="evento" version="1.3+" feature="sqlite">Event sourcing and CQRS framework</dependency>
        <dependency name="sqlx" version="0.8+" feature="runtime-tokio,sqlite">Async database client for read models</dependency>
        <dependency name="axum" version="0.8+">HTTP server framework</dependency>
        <dependency name="askama" version="0.14+">Compile-time type-safe templates</dependency>
        <dependency name="validator" version="0.20+" feature="derive">Form input validation</dependency>
        <dependency name="argon2" version="0.5+">Password hashing (OWASP-recommended)</dependency>
        <dependency name="jsonwebtoken" version="9.3+">JWT token generation and validation</dependency>
        <dependency name="uuid" version="1.10+" feature="v4,serde">User ID generation</dependency>
        <dependency name="serde" version="1.0+" feature="derive">Serialization for events and DTOs</dependency>
        <dependency name="tokio" version="1.40+" feature="full">Async runtime</dependency>
        <dependency name="thiserror" version="1.0+">Custom error types</dependency>
        <dependency name="anyhow" version="1.0+">Error handling</dependency>
        <dependency name="chrono" version="0.4+" feature="serde">Timestamp management</dependency>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    - Event sourcing pattern: All state changes via UserCreated event (no direct DB writes in commands)
    - CQRS separation: Commands write events, queries read from users table
    - Email uniqueness validated against read model before event commit
    - Password hashing: Argon2id with OWASP parameters (memory=65536 KB, iterations=3), ~100ms target
    - JWT cookies: HTTP-only (prevents XSS), Secure (HTTPS only), SameSite=Lax (CSRF protection), 7-day expiration
    - Password minimum 8 characters enforced via validator crate
    - Email validation both client-side (HTML5) and server-side (validator)
    - Never expose password hash in logs or error messages
    - TDD enforced: Write failing test → implement → test passes
    - Test coverage: 90% for user crate (security-critical), 85% for route handlers
    - Module structure: crates/user/ (domain crate), src/routes/auth.rs (HTTP routes), templates/pages/register.html (Askama template)
    - evento projection lag < 100ms for all user flows
  </constraints>

  <interfaces>
    <interface name="evento::AggregatorName" kind="trait" path="evento crate">
      <signature>Trait for evento aggregates; requires event handler methods for each event type</signature>
      <usage>Implement on UserAggregate to handle UserCreated events and rebuild state</usage>
    </interface>
    <interface name="validator::Validate" kind="trait" path="validator crate">
      <signature>Trait for form validation; use derive macro on RegisterUserCommand</signature>
      <usage>Derive on RegisterUserCommand for email and password validation</usage>
    </interface>
    <interface name="axum::Router" kind="struct" path="axum crate">
      <signature>HTTP router; attach routes via .route(path, method_handler)</signature>
      <usage>Register GET/POST /register routes in src/main.rs</usage>
    </interface>
    <interface name="askama::Template" kind="trait" path="askama crate">
      <signature>Derive macro for compile-time templates; implement on template struct</signature>
      <usage>Derive on RegisterPageTemplate for templates/pages/register.html</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TDD approach enforced: Write failing unit test → implement feature → test passes. Test coverage targets: 90% for user crate (security-critical code), 85% for route handlers. Integration tests use in-memory SQLite database with evento migrations. E2E tests via Playwright for critical user flows. All tests must verify: evento event commit, read model projection, JWT cookie flags (HttpOnly, Secure, SameSite), Argon2 hash format, validation error messages.
    </standards>
    <locations>
      - crates/user/tests/ (unit tests for aggregate, commands, password utilities)
      - tests/auth_integration_tests.rs (integration tests for registration flow)
      - e2e/tests/auth.spec.ts (E2E Playwright tests for full registration journey)
    </locations>
    <ideas>
      AC 1-2: Unit test password hashing produces Argon2id hash, verify_password accepts correct password only
      AC 3: Integration test POST /register with invalid email format returns validation error
      AC 4: Integration test POST /register with duplicate email returns "Email already registered" error
      AC 5: Integration test POST /register creates UserCreated event and inserts into users table with tier=free, recipe_count=0
      AC 6: Integration test successful registration sets JWT cookie with HttpOnly=true, Secure=true, SameSite=Lax, 7-day expiration
      AC 7: Integration test successful registration redirects to /dashboard (HTTP 302)
      AC 8: Integration test POST /register with password < 8 chars returns "Password must be at least 8 characters" error
      E2E: Register with valid email/password → verify JWT cookie → verify redirect to /dashboard → verify user can access authenticated routes
    </ideas>
  </tests>
</story-context>
