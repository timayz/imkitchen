<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>6</storyId>
    <title>Mark Recipe as Favorite</title>
    <status>Draft</status>
    <generatedAt>2025-10-15T03:06:00Z</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-2.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user</asA>
    <iWant>to mark recipes as favorites</iWant>
    <soThat>they are included in my meal plan generation</soThat>
    <tasks>
      <task id="1" status="pending">Implement FavoriteRecipe command and event</task>
      <task id="2" status="pending">Update read model for favorite status</task>
      <task id="3" status="pending">Add favorite toggle UI</task>
      <task id="4" status="pending">Implement favorite toggle route</task>
      <task id="5" status="pending">Add favorites filtering to recipe list</task>
      <task id="6" status="pending">Display favorite count in user profile</task>
      <task id="7" status="pending">Freemium tier enforcement</task>
      <task id="8" status="pending">Meal planning integration</task>
      <task id="9" status="pending">Write unit tests for favorite command</task>
      <task id="10" status="pending">Write integration tests for favorite toggle</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Favorite button (star icon) visible on recipe cards and detail pages</criterion>
    <criterion id="2">Clicking star toggles favorite status (filled = favorite, outline = not favorite)</criterion>
    <criterion id="3">Favorited recipes included in meal planning algorithm pool</criterion>
    <criterion id="4">Non-favorited recipes excluded from meal planning</criterion>
    <criterion id="5">Recipe library filterable by "Favorites Only"</criterion>
    <criterion id="6">Favorite count displayed in user profile</criterion>
    <criterion id="7">Un-favoriting recipe does not remove from existing meal plans</criterion>
    <criterion id="8">Free tier: favorites count toward 10 recipe limit</criterion>
    <criterion id="9">Premium tier: unlimited favorites</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>3.2 Data Models and Relationships</section>
        <relevance>Defines event sourcing pattern with evento, aggregate state reconstruction, and CQRS read model projections</relevance>
        <snippet>
Event-to-ReadModel Projections (evento subscriptions):

Example - Recipe Aggregate:
- RecipeFavorited event with favorited boolean field
- Aggregate event handler updates is_favorite state
- Read model projection via subscription handler updates recipes.is_favorite column
- Indexed query support via idx_recipes_favorite (user_id, is_favorite)
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>4.1 API Structure - TwinSpark Progressive Enhancement</section>
        <relevance>Defines server-side rendering with TwinSpark for AJAX behaviors without JavaScript complexity</relevance>
        <snippet>
TwinSpark AJAX Enhancements:
- Selected routes support Accept: text/html partial responses
- TwinSpark attributes on buttons/forms trigger AJAX requests
- Server returns HTML fragments (not JSON)
- Fragments swapped into DOM via TwinSpark

TwinSpark Attributes Used:
- ts-req: URL to request
- ts-req-method: HTTP method (POST)
- ts-target: CSS selector for element to update
- ts-swap: Swap strategy (outerHTML for complete element replacement)
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>11.1 Domain Crate Structure</section>
        <relevance>Defines workspace crate organization for recipe domain with aggregate, commands, events, and read models</relevance>
        <snippet>
crates/recipe/
├── src/
│   ├── aggregate.rs     # RecipeAggregate (evento)
│   ├── commands.rs      # CreateRecipe, UpdateRecipe, etc.
│   ├── events.rs        # RecipeCreated, RecipeFavorited, etc.
│   └── read_model.rs    # Recipe query projections

Command pattern: evento::save() loads aggregate, applies event, commits to event store
Event handler pattern: async fn recipe_favorited(&amp;mut self, event: EventDetails&lt;RecipeFavorited&gt;)
Read model subscription: evento::subscribe() registers projection handlers
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-2.md</path>
        <title>Technical Specification: Recipe Management System</title>
        <section>Database Schema - recipes table</section>
        <relevance>Defines recipes table schema with is_favorite boolean column and indexed query support</relevance>
        <snippet>
CREATE TABLE recipes (
  id TEXT PRIMARY KEY,
  user_id TEXT NOT NULL,
  title TEXT NOT NULL,
  ingredients TEXT NOT NULL,
  instructions TEXT NOT NULL,
  prep_time_min INTEGER,
  cook_time_min INTEGER,
  advance_prep_hours INTEGER,
  serving_size INTEGER,
  is_favorite BOOLEAN DEFAULT FALSE,
  is_shared BOOLEAN DEFAULT FALSE,
  complexity TEXT,
  cuisine TEXT,
  dietary_tags TEXT,
  created_at TEXT NOT NULL,
  updated_at TEXT NOT NULL,
  deleted_at TEXT,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE INDEX idx_recipes_favorite ON recipes(user_id, is_favorite) WHERE deleted_at IS NULL;
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-2.md</path>
        <title>Technical Specification: Recipe Management System</title>
        <section>Command Handlers - favorite_recipe</section>
        <relevance>Defines toggle command pattern for favorite recipe functionality</relevance>
        <snippet>
pub async fn favorite_recipe(
    recipe_id: String,
    user_id: String,
    favorited: bool,
    executor: &amp;Sqlite,
) -&gt; Result&lt;(), RecipeError&gt;

Toggle Command Pattern:
- Load recipe aggregate from event stream
- Verify ownership (user can favorite their own recipes)
- Emit RecipeFavorited event with new status
- No explicit "favorite" vs "unfavorite" commands - single toggle
        </snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/aggregate.rs</path>
        <kind>aggregate</kind>
        <symbol>RecipeAggregate</symbol>
        <lines>16-44</lines>
        <relevance>Recipe aggregate struct with is_favorite field - needs to be updated with favorite toggle event handler</relevance>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/aggregate.rs</path>
        <kind>event_handler</kind>
        <symbol>recipe_favorited</symbol>
        <lines>90-100</lines>
        <relevance>EXISTING event handler for RecipeFavorited - already implemented, updates aggregate.is_favorite from event data</relevance>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/events.rs</path>
        <kind>event</kind>
        <symbol>RecipeFavorited</symbol>
        <lines>52-61</lines>
        <relevance>EXISTING RecipeFavorited event definition - already implemented with favorited boolean and toggled_at timestamp</relevance>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/commands.rs</path>
        <kind>command_handler</kind>
        <symbol>create_recipe, update_recipe, delete_recipe</symbol>
        <lines>46-406</lines>
        <relevance>EXISTING command handlers showing evento pattern: validate, load/create aggregate, emit event, commit to executor</relevance>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/recipes.rs</path>
        <kind>route_handler</kind>
        <symbol>post_create_recipe, get_recipe_detail</symbol>
        <lines>93-200</lines>
        <relevance>EXISTING route handlers showing Axum + Askama pattern: parse form, execute command, render template or redirect</relevance>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/templates/pages/recipe-detail.html</path>
        <kind>template</kind>
        <symbol>RecipeDetailTemplate</symbol>
        <lines>N/A</lines>
        <relevance>Recipe detail page template - needs favorite star icon button with TwinSpark attributes</relevance>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/templates/components/recipe-card.html</path>
        <kind>template</kind>
        <symbol>RecipeCardTemplate</symbol>
        <lines>N/A</lines>
        <relevance>Recipe card component template - needs favorite star icon button with TwinSpark attributes</relevance>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/migrations/01_v0.2_recipes.sql</path>
        <kind>migration</kind>
        <symbol>recipes table</symbol>
        <lines>N/A</lines>
        <relevance>EXISTING migration with recipes table - is_favorite column should already exist from schema definition</relevance>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/tests/recipe_integration_tests.rs</path>
        <kind>test</kind>
        <symbol>recipe integration tests</symbol>
        <lines>N/A</lines>
        <relevance>EXISTING integration test file - extend with favorite toggle tests (POST /recipes/:id/favorite, filter by favorites)</relevance>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <crate name="evento" version="1.4" features="sqlite-migrator">Event sourcing and CQRS framework</crate>
        <crate name="sqlx" version="0.8" features="runtime-tokio,sqlite,chrono,uuid">Async SQL with SQLite support</crate>
        <crate name="axum" version="0.8" features="macros">HTTP server and routing</crate>
        <crate name="askama" version="0.14">Type-safe HTML templating</crate>
        <crate name="validator" version="0.20" features="derive">Input validation</crate>
        <crate name="serde" version="1.0" features="derive">Serialization/deserialization</crate>
        <crate name="bincode" version="2.0">Binary serialization for events</crate>
        <crate name="chrono" version="0.4" features="serde">Timestamp handling</crate>
        <crate name="thiserror" version="1.0">Error handling</crate>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="architecture">
      <rule>Event Sourcing with evento</rule>
      <description>All state changes must be captured as immutable events in the evento event store. RecipeFavorited event emitted when favorite status is toggled. Aggregate rebuilds state from event stream.</description>
      <enforcement>Use evento::save() pattern to load aggregate, apply event, and commit to executor</enforcement>
    </constraint>
    <constraint type="architecture">
      <rule>CQRS Read Model Projection</rule>
      <description>recipes.is_favorite column updated via evento subscription handler. Read model queries filter by is_favorite for meal planning. Indexed query support via idx_recipes_favorite.</description>
      <enforcement>Create subscription handler that listens to RecipeFavorited events and updates read model</enforcement>
    </constraint>
    <constraint type="architecture">
      <rule>Toggle Command Pattern</rule>
      <description>Single favorite_recipe command toggles status. No separate "favorite" vs "unfavorite" commands. Load recipe, invert is_favorite, emit RecipeFavorited event with new status.</description>
      <enforcement>Command handler loads current aggregate state and toggles boolean field</enforcement>
    </constraint>
    <constraint type="ui">
      <rule>TwinSpark Progressive Enhancement</rule>
      <description>Favorite button works without JavaScript (standard POST form). TwinSpark intercepts click, sends AJAX request. Server returns updated star icon HTML fragment. Fragment swapped into DOM via ts-swap="outerHTML".</description>
      <enforcement>Use ts-req, ts-req-method, ts-target, ts-swap attributes on favorite button form</enforcement>
    </constraint>
    <constraint type="authorization">
      <rule>Ownership Verification</rule>
      <description>User can favorite their own recipes. User can favorite community recipes they've copied to library. Cannot favorite other users' recipes directly (must copy first). Ownership check in favorite_recipe command handler.</description>
      <enforcement>Query read model to verify recipe.user_id matches auth.user_id before emitting event</enforcement>
    </constraint>
    <constraint type="business">
      <rule>Freemium Tier Enforcement</rule>
      <description>Favorites count toward 10 recipe limit for free tier. Recipe creation command already enforces limit. Premium tier has no recipe limit (includes favorites).</description>
      <enforcement>No changes needed - existing create_recipe command checks recipe_count vs tier limit</enforcement>
    </constraint>
    <constraint type="testing">
      <rule>TDD Approach</rule>
      <description>Write tests first (TDD). Unit tests for RecipeFavorited event emission and aggregate state updates. Integration tests for POST /recipes/:id/favorite route and read model updates.</description>
      <enforcement>Create test file, write failing tests, then implement command/route/subscription handlers</enforcement>
    </constraint>
    <constraint type="database">
      <rule>Soft Delete Awareness</rule>
      <description>All favorite queries must filter WHERE deleted_at IS NULL. Index already includes this condition: idx_recipes_favorite WHERE deleted_at IS NULL.</description>
      <enforcement>Include deleted_at IS NULL filter in all read model queries for favorites</enforcement>
    </constraint>
    <constraint type="logging">
      <rule>Structured Logging</rule>
      <description>Include user_id, recipe_id, and favorited status in tracing spans. Use tracing::instrument macro on command handler and route handler.</description>
      <enforcement>Add #[tracing::instrument(skip(executor, pool), fields(recipe_id, favorited))] to function signatures</enforcement>
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>favorite_recipe (command handler)</name>
      <kind>function</kind>
      <signature>pub async fn favorite_recipe(recipe_id: String, user_id: String, executor: &amp;Sqlite, pool: &amp;SqlitePool) -&gt; RecipeResult&lt;()&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/commands.rs</path>
      <usage>To be implemented. Toggle recipe favorite status by loading aggregate, inverting is_favorite, emitting RecipeFavorited event.</usage>
    </interface>
    <interface>
      <name>RecipeFavorited event</name>
      <kind>event</kind>
      <signature>pub struct RecipeFavorited { pub favorited: bool, pub toggled_at: String }</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/events.rs</path>
      <usage>ALREADY EXISTS. Used to emit favorite status change events to evento event store.</usage>
    </interface>
    <interface>
      <name>recipe_favorited (event handler)</name>
      <kind>event_handler</kind>
      <signature>async fn recipe_favorited(&amp;mut self, event: evento::EventDetails&lt;RecipeFavorited&gt;) -&gt; anyhow::Result&lt;()&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/aggregate.rs</path>
      <usage>ALREADY EXISTS. Applies RecipeFavorited event to aggregate state, setting is_favorite field.</usage>
    </interface>
    <interface>
      <name>POST /recipes/:id/favorite (route handler)</name>
      <kind>route</kind>
      <signature>pub async fn post_favorite_recipe(State(state): State&lt;AppState&gt;, Path(recipe_id): Path&lt;String&gt;, Extension(auth): Extension&lt;Auth&gt;) -&gt; Response</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/recipes.rs</path>
      <usage>To be implemented. Toggles favorite status and returns updated star icon HTML fragment for TwinSpark swap.</usage>
    </interface>
    <interface>
      <name>GET /recipes?favorite_only=true (route handler)</name>
      <kind>route</kind>
      <signature>pub async fn get_recipe_list(State(state): State&lt;AppState&gt;, Query(params): Query&lt;RecipeListParams&gt;, Extension(auth): Extension&lt;Auth&gt;) -&gt; impl IntoResponse</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/recipes.rs</path>
      <usage>EXTEND existing route. Add favorite_only query parameter to filter recipes WHERE is_favorite = true.</usage>
    </interface>
    <interface>
      <name>query_recipes_by_user (read model query)</name>
      <kind>function</kind>
      <signature>pub async fn query_recipes_by_user(user_id: &amp;str, favorite_only: bool, pool: &amp;SqlitePool) -&gt; RecipeResult&lt;Vec&lt;RecipeReadModel&gt;&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/read_model.rs</path>
      <usage>To be extended. Add favorite_only parameter to optionally filter WHERE is_favorite = true AND deleted_at IS NULL.</usage>
    </interface>
    <interface>
      <name>evento::subscribe (subscription registration)</name>
      <kind>function</kind>
      <signature>evento::subscribe("recipe-projections").aggregator::&lt;RecipeAggregate&gt;().handler(project_recipe_favorited()).run(&amp;executor).await?</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/src/main.rs</path>
      <usage>Register subscription handler for RecipeFavorited events to update read model recipes.is_favorite column.</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      The project follows Test-Driven Development (TDD) with comprehensive coverage across three layers:

      1. Unit Tests (crates/recipe/tests/): Test aggregate event handlers, command validation, and business rules. Mock evento executor with in-memory event store.

      2. Integration Tests (tests/recipe_integration_tests.rs): Test full HTTP request/response cycle with real SQLite database. Verify route handlers, authentication middleware, and read model projections.

      3. E2E Tests (e2e/tests/recipe-management.spec.ts): Test critical user flows with Playwright browser automation. Verify TwinSpark AJAX behaviors and progressive enhancement.

      Coverage Goal: 80% code coverage enforced in CI pipeline via cargo-tarpaulin.

      Test Pattern: Write failing test first, implement feature to pass test, refactor while maintaining green tests.
    </standards>
    <locations>
      <location>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/tests/</location>
      <location>/home/snapiz/projects/github/timayz/imkitchen/tests/recipe_integration_tests.rs</location>
      <location>/home/snapiz/projects/github/timayz/imkitchen/e2e/tests/recipe-management.spec.ts</location>
    </locations>
    <ideas>
      <idea ac_id="2">
        <type>unit</type>
        <description>Test RecipeFavorited event emitted when toggling favorite status</description>
        <test_case>Given a recipe with is_favorite=false, when favorite_recipe command executed, then RecipeFavorited event with favorited=true emitted to event store</test_case>
      </idea>
      <idea ac_id="2">
        <type>unit</type>
        <description>Test favorite status toggled correctly (false → true → false)</description>
        <test_case>Given a recipe, when favorite_recipe called twice, then is_favorite toggles from false to true to false</test_case>
      </idea>
      <idea ac_id="2">
        <type>unit</type>
        <description>Test ownership verification (user can only favorite their own recipes)</description>
        <test_case>Given a recipe owned by user A, when user B calls favorite_recipe, then RecipeError::PermissionDenied returned</test_case>
      </idea>
      <idea ac_id="2">
        <type>unit</type>
        <description>Test RecipeFavorited event applied to aggregate state</description>
        <test_case>Given RecipeFavorited event with favorited=true, when event replayed to aggregate, then aggregate.is_favorite = true</test_case>
      </idea>
      <idea ac_id="2,5">
        <type>integration</type>
        <description>Test POST /recipes/:id/favorite toggles is_favorite in read model</description>
        <test_case>Given authenticated user with recipe, when POST /recipes/:id/favorite, then recipes.is_favorite updated in database and star icon HTML returned</test_case>
      </idea>
      <idea ac_id="5">
        <type>integration</type>
        <description>Test GET /recipes?favorite_only=true returns only favorited recipes</description>
        <test_case>Given user with 5 recipes (2 favorited, 3 not), when GET /recipes?favorite_only=true, then response contains only 2 favorited recipes</test_case>
      </idea>
      <idea ac_id="2">
        <type>integration</type>
        <description>Test unauthorized favorite attempt returns error</description>
        <test_case>Given unauthenticated request, when POST /recipes/:id/favorite, then 401 Unauthorized status returned</test_case>
      </idea>
      <idea ac_id="6">
        <type>integration</type>
        <description>Test favorite count query accuracy</description>
        <test_case>Given user with 3 favorited recipes and 2 deleted favorited recipes, when query favorite count, then count = 3 (excludes deleted)</test_case>
      </idea>
      <idea ac_id="1,2">
        <type>e2e</type>
        <description>Test favorite button click toggles star icon on recipe card</description>
        <test_case>Given recipe list page, when click star icon on recipe card, then star changes from outline to filled (or vice versa) via TwinSpark AJAX</test_case>
      </idea>
      <idea ac_id="1,2">
        <type>e2e</type>
        <description>Test favorite button click toggles star icon on recipe detail page</description>
        <test_case>Given recipe detail page, when click star icon button, then star changes from outline to filled (or vice versa) via TwinSpark AJAX</test_case>
      </idea>
      <idea ac_id="5">
        <type>e2e</type>
        <description>Test "Favorites Only" filter displays only favorited recipes</description>
        <test_case>Given recipe list with mixed favorites, when click "Favorites Only" filter button, then only favorited recipes displayed in list</test_case>
      </idea>
    </ideas>
  </tests>
</story-context>
