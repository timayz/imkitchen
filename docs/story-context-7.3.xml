<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>7</epicId>
    <storyId>7.3</storyId>
    <title>Accompaniment Selection</title>
    <status>Draft</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-7.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>meal planning algorithm</asA>
    <iWant>pair main courses with compatible accompaniments</iWant>
    <soThat>complete meals include appropriate sides when main courses accept them</soThat>
    <tasks>
      - Implement accompaniment selection function (AC: 1)
        - Create function in `crates/meal_planning/src/algorithm.rs`
        - Signature: `pub fn select_accompaniment(main_course: &amp;Recipe, available_accompaniments: &amp;[Recipe]) -&gt; Option&lt;Recipe&gt;`
        - Return `Option&lt;Recipe&gt;`
      - Check if main course accepts accompaniment (AC: 2)
        - Read `main_course.accepts_accompaniment` boolean field
        - If `false`, immediately return `None`
        - Skip all filtering and selection logic
      - Filter by preferred accompaniment categories (AC: 3)
        - Check if `main_course.preferred_accompaniments` is non-empty
        - If specified, filter `available_accompaniments` where `accompaniment.accompaniment_category` is in preferred list
        - If empty or unspecified, use all available accompaniments
      - Implement random selection (AC: 4, 8)
        - Use `rand::thread_rng()` for randomness
        - Use `.choose(&amp;mut rng)` method on filtered slice
        - Clone selected recipe for return (ownership)
      - Handle no compatible accompaniments (AC: 5)
        - If filtered list is empty, return `None`
        - Do not panic or error
      - Allow accompaniment repetition (AC: 6)
        - Accompaniments NOT tracked in `RotationState`
        - Can reuse same accompaniment multiple times in week
        - Document this design decision
      - Write unit tests (AC: 7)
        - Test main course with `accepts_accompaniment = false` returns None
        - Test main course with `accepts_accompaniment = true` and preferred categories filters correctly
        - Test random selection (use seeded RNG for determinism)
        - Test empty preferred categories uses all available
        - Test no compatible accompaniments returns None
        - Test accompaniment repetition allowed (call function twice, may return same recipe)
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Function `select_accompaniment(main_course, available)` implemented
    2. Returns `None` if `main_course.accepts_accompaniment == false`
    3. Filters by `preferred_accompaniments` if specified
    4. Selects random from filtered list using `thread_rng`
    5. Returns `None` if no compatible accompaniments
    6. Allows repetition (not tracked in rotation)
    7. Unit tests cover pairing scenarios
    8. Random selection uses `rand::thread_rng`
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>Services and Modules - select_accompaniment</section>
        <snippet>
| `select_accompaniment` | Pair accompaniment with main course based on preferred categories | `&amp;Recipe` (main), `Vec&lt;Recipe&gt;` (accompaniments) | `Option&lt;Recipe&gt;` | meal_planning crate |

Accompaniment pairing logic (preferred categories, compatibility checks)
Random accompaniment selection (can repeat freely)
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>Data Models and Contracts - AccompanimentCategory</section>
        <snippet>
pub enum AccompanimentCategory {
    Pasta,    // Pasta-based sides (spaghetti, penne, etc.)
    Rice,     // Rice-based sides (basmati, jasmine, wild rice, etc.)
    Fries,    // Fried potato sides (french fries, wedges, etc.)
    Salad,    // Salad sides (green salad, coleslaw, etc.)
    Bread,    // Bread sides (garlic bread, naan, baguette, etc.)
    Vegetable, // Vegetable sides (roasted vegetables, steamed greens, etc.)
    Other,    // Other uncategorized sides
}

pub struct Recipe {
    accepts_accompaniment: bool,
    preferred_accompaniments: Vec&lt;AccompanimentCategory&gt;,  // For main courses
    accompaniment_category: Option&lt;AccompanimentCategory&gt;,  // If recipe IS an accompaniment
    // ... other fields
}
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>Workflows and Sequencing - Accompaniment Selection</section>
        <snippet>
│  │  ├─ If main accepts_accompaniment, call select_accompaniment()
│  │  │  ├─ Filter by preferred_accompaniments categories
│  │  │  └─ Random selection from filtered list
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>Design Decisions - Repetition Design</section>
        <snippet>
**Repetition Design:**
- Main courses NEVER repeat (tracked in RotationState)
- Appetizers/Desserts repeat after exhaustion
- Accompaniments CAN repeat freely (not tracked)
- Rationale: Sides are simple, less variety needed
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>Acceptance Criteria - Story 7.3</section>
        <snippet>
**Story 7.3: Accompaniment Selection**
1. Function `select_accompaniment(main_course, available)` implemented
2. Returns `None` if `main_course.accepts_accompaniment == false`
3. Filters by `preferred_accompaniments` if specified
4. Selects random from filtered list using `thread_rng`
5. Returns `None` if no compatible accompaniments
6. Allows repetition (not tracked in rotation)
7. Unit tests cover pairing scenarios
8. Random selection uses `rand::thread_rng`
        </snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>module</kind>
        <symbol>MealPlanningAlgorithm</symbol>
        <lines>1-925</lines>
        <reason>Primary algorithm module where `select_accompaniment` function will be implemented. Contains existing meal planning algorithm structures, scoring functions, and the main `generate()` function that currently handles meal assignments without accompaniment logic (see line 453: "No accompaniment logic yet").</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>struct</kind>
        <symbol>RecipeForPlanning</symbol>
        <lines>8-20</lines>
        <reason>Data structure representing recipes in the algorithm. Will need to be enhanced or extended to include `accepts_accompaniment`, `preferred_accompaniments`, and `accompaniment_category` fields required for Story 7.3.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
        <kind>module</kind>
        <symbol>RotationState</symbol>
        <lines>1-955</lines>
        <reason>Rotation state management showing that accompaniments are NOT tracked (per AC-6). Lines 16-17 confirm: "**Accompaniments**: NOT tracked in rotation state (can repeat freely)". This validates the design decision for Story 7.3.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/types.rs</path>
        <kind>enum</kind>
        <symbol>AccompanimentCategory</symbol>
        <lines>24-41</lines>
        <reason>Defines the AccompanimentCategory enum with 7 variants (Pasta, Rice, Fries, Salad, Bread, Vegetable, Other) that will be used for filtering accompaniments by preferred categories in the selection function.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/events.rs</path>
        <kind>struct</kind>
        <symbol>MealAssignment</symbol>
        <lines>unknown</lines>
        <reason>Event structure that contains `accompaniment_recipe_id: Option&lt;RecipeId&gt;` field (referenced in algorithm.rs line 453) which will be populated by the new `select_accompaniment` function.</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <dependency name="rand" version="0.9" purpose="Random selection using thread_rng for accompaniment pairing (AC-4, AC-8)" />
        <dependency name="chrono" version="0.4+" purpose="Date handling for meal planning algorithm" />
        <dependency name="serde" version="1.0+" purpose="Serialization for data structures and evento events" />
        <dependency name="recipe" version="path" purpose="Access to AccompanimentCategory enum and Recipe types" />
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="arch-1" type="architecture">
      **TDD Enforced**: Write failing tests first, implement to pass, then refactor. All functions must have corresponding unit tests before implementation (target &gt;80% coverage via cargo-tarpaulin).
    </constraint>
    <constraint id="arch-2" type="architecture">
      **Pure Domain Logic**: Algorithm functions have no direct HTTP/IO dependencies. All functions are pure business logic with dependency injection for data access. No external service calls.
    </constraint>
    <constraint id="epic7-1" type="business">
      **Accompaniment Repetition Allowed**: Accompaniments CAN repeat freely across the week and are NOT tracked in RotationState (unlike main courses which NEVER repeat). This is a deliberate design decision - sides are simpler and less variety is needed.
    </constraint>
    <constraint id="epic7-2" type="business">
      **Random Selection for Variety**: Use `rand::thread_rng()` for non-deterministic accompaniment selection to provide variety across meal plan generations. Tests must use seeded RNG (`StdRng::seed_from_u64()`) for reproducibility.
    </constraint>
    <constraint id="epic7-3" type="technical">
      **Graceful None Handling**: Return `Option&lt;Recipe&gt;` with `None` for incompatible cases (main doesn't accept accompaniment, no compatible accompaniments available). Never panic or error - let the caller decide how to handle missing accompaniments.
    </constraint>
    <constraint id="epic7-4" type="technical">
      **Performance Target**: Algorithm must complete within performance budget. Individual selection functions should execute in &lt;10ms for 100 recipes. Full multi-week generation must complete in &lt;5 seconds for 50 recipes.
    </constraint>
    <constraint id="story73-1" type="implementation">
      **Recipe Data Model Enhancement**: `RecipeForPlanning` struct needs to be enhanced with three fields: `accepts_accompaniment: bool`, `preferred_accompaniments: Vec&lt;AccompanimentCategory&gt;`, and `accompaniment_category: Option&lt;AccompanimentCategory&gt;`. Coordinate with domain model updates if needed.
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>select_accompaniment</name>
      <kind>function</kind>
      <signature>pub fn select_accompaniment(main_course: &amp;Recipe, available_accompaniments: &amp;[Recipe]) -&gt; Option&lt;Recipe&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
      <description>
        Selects a random compatible accompaniment for a main course recipe. Returns None if the main course doesn't accept accompaniments or if no compatible options are available. Filters by preferred accompaniment categories if specified by the main course.
      </description>
    </interface>
    <interface>
      <name>thread_rng</name>
      <kind>function</kind>
      <signature>pub fn thread_rng() -&gt; ThreadRng</signature>
      <path>rand crate</path>
      <description>
        Random number generator from rand crate used for non-deterministic accompaniment selection. Use this in production code. For tests, use StdRng::seed_from_u64() for reproducibility.
      </description>
    </interface>
    <interface>
      <name>choose</name>
      <kind>method</kind>
      <signature>fn choose&lt;R&gt;(&amp;self, rng: &amp;mut R) -&gt; Option&lt;&amp;Self::Item&gt; where R: Rng + ?Sized</signature>
      <path>rand::seq::SliceRandom trait</path>
      <description>
        SliceRandom trait method that selects a random element from a slice. Returns None if the slice is empty. Use on filtered accompaniment slice after category filtering.
      </description>
    </interface>
    <interface>
      <name>AccompanimentCategory</name>
      <kind>enum</kind>
      <signature>pub enum AccompanimentCategory { Pasta, Rice, Fries, Salad, Bread, Vegetable, Other }</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/types.rs</path>
      <description>
        Enum defining accompaniment categories for recipe pairing. Main courses specify preferred categories via Vec&lt;AccompanimentCategory&gt;. Accompaniment recipes specify their category via Option&lt;AccompanimentCategory&gt;.
      </description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      **TDD Pattern**: Write failing test first, implement minimal code to pass, refactor. All tests use Rust built-in `#[test]` with `assert_eq!` and `assert!` macros. Target &gt;80% line coverage for algorithm module (measured via cargo-tarpaulin).

      **Random Selection Testing**: Production code uses `rand::thread_rng()` for variety. Tests use `rand::rngs::StdRng::seed_from_u64()` for deterministic, reproducible results. Example test pattern:
      ```rust
      use rand::SeedableRng;
      use rand::rngs::StdRng;

      #[test]
      fn test_random_selection_deterministic() {
          let mut rng = StdRng::seed_from_u64(12345);
          // Use seeded RNG for reproducible test results
      }
      ```

      **Test Organization**: Unit tests in `#[cfg(test)] mod tests` at bottom of `algorithm.rs`. Integration tests in separate `tests/` directory if needed. Use helper functions to create test fixtures (e.g., `create_test_recipe()` with configurable fields).
    </standards>
    <locations>
      - /home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs (unit tests in #[cfg(test)] module)
      - /home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/tests/ (integration tests if needed)
    </locations>
    <ideas>
      <test ac="AC-2">
        **Test: Main course with accepts_accompaniment=false returns None**
        Create a main course recipe with `accepts_accompaniment: false`, call `select_accompaniment()` with valid accompaniments list, assert result is `None`. Verify function short-circuits without filtering.
      </test>
      <test ac="AC-3">
        **Test: Filters by preferred_accompaniments categories**
        Create main course with `preferred_accompaniments: vec![AccompanimentCategory::Rice, AccompanimentCategory::Pasta]`. Create accompaniments list with Rice (ID: rice-1), Pasta (ID: pasta-1), and Salad (ID: salad-1). Use seeded RNG for determinism. Assert selected recipe is either rice-1 or pasta-1, never salad-1.
      </test>
      <test ac="AC-4, AC-8">
        **Test: Random selection using thread_rng**
        Create main course with `accepts_accompaniment: true` and empty `preferred_accompaniments`. Create 3 accompaniments (all compatible). Call function 10 times with seeded RNG. Verify at least 2 different accompaniments selected (proves randomness). Use `StdRng::seed_from_u64()` for reproducibility.
      </test>
      <test ac="AC-3">
        **Test: Empty preferred_accompaniments uses all available**
        Create main course with `accepts_accompaniment: true` and `preferred_accompaniments: vec![]`. Create 5 different category accompaniments. Use seeded RNG. Assert selected recipe can be any of the 5 (no filtering occurs when preferences empty).
      </test>
      <test ac="AC-5">
        **Test: No compatible accompaniments returns None**
        Create main course with `preferred_accompaniments: vec![AccompanimentCategory::Rice]`. Create accompaniments list with only Pasta and Salad (no Rice). Assert result is `None`. Verify no panic occurs.
      </test>
      <test ac="AC-6">
        **Test: Accompaniment repetition allowed**
        Create main course and accompaniments list. Call function twice in succession with same inputs (same seed). Verify both calls can return the same accompaniment (repetition is allowed). Document that accompaniments are NOT tracked in RotationState.
      </test>
      <test ac="AC-1">
        **Test: Function signature and return type**
        Verify function compiles with signature `pub fn select_accompaniment(main_course: &amp;Recipe, available_accompaniments: &amp;[Recipe]) -&gt; Option&lt;Recipe&gt;`. Test with valid inputs returns `Some(Recipe)`, invalid inputs return `None`.
      </test>
    </ideas>
  </tests>
</story-context>
