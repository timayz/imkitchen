<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>7</epicId>
    <storyId>1</storyId>
    <title>Implement Dietary Restriction Filtering</title>
    <status>Draft</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-7.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>backend developer</asA>
    <iWant>to filter recipes by dietary restrictions</iWant>
    <soThat>incompatible recipes never appear in meal plans</soThat>
    <tasks>
- Create dietary filtering module (AC: 1)
- Implement filter_by_dietary_restrictions function (AC: 1, 2)
- Implement standard dietary tag matching (AC: 3)
- Implement custom restriction ingredient text search (AC: 4)
- Handle edge cases (AC: 5, 6)
- Write comprehensive unit tests (AC: 7)
- Integration with existing domain models (AC: 1, 2)
    </tasks>
  </story>

  <acceptanceCriteria>
1. Function filter_by_dietary_restrictions(recipes, restrictions) implemented
2. Filters recipes not matching ALL restrictions (AND logic)
3. Checks Vegetarian, Vegan, GlutenFree, DairyFree, NutFree, Halal, Kosher tags
4. Custom restrictions check ingredients text (case-insensitive)
5. Handles empty restriction list (returns all recipes)
6. Handles no compatible recipes (returns empty Vec)
7. Unit tests cover all restriction types with >80% coverage
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/architecture-update-meal-planning-enhancements.md" section="3.5" title="Algorithm: Preference Integration - Dietary Filtering">
        Complete dietary filtering algorithm pseudocode (lines 682-706). Implements AND logic for all restrictions.
        Shows exact matching logic for standard dietary tags (Vegetarian, Vegan, etc.) and custom allergen text search.
      </doc>
      <doc path="docs/epics.md" section="Story 7.1" title="Implement Dietary Restriction Filtering">
        Story acceptance criteria and technical notes. Specifies 7 ACs including AND logic, standard tags, custom restrictions, edge cases, and 80% test coverage requirement.
      </doc>
      <doc path="docs/solution-architecture-compact.md" section="13" title="Testing Strategy">
        TDD enforcement, 80% coverage goal for algorithm modules, test pyramid (unit/integration/E2E), fast execution requirement.
      </doc>
    </docs>
    <code>
      <artifact path="crates/user/src/types.rs" kind="enum" symbol="DietaryRestriction" lines="86-126" reason="Defines the DietaryRestriction enum with 7 standard variants (Vegetarian, Vegan, GlutenFree, DairyFree, NutFree, Halal, Kosher) plus Custom(String) for user-defined allergens. This is the input type for the filtering function."/>
      <artifact path="crates/recipe/src/types.rs" kind="enum" symbol="DietaryTag" lines="89-121" reason="Defines the DietaryTag enum with 7 variants matching DietaryRestriction. These are the tags stored on Recipe structs that will be matched against user restrictions."/>
      <artifact path="crates/meal_planning/src/lib.rs" kind="module" symbol="lib" lines="1-10" reason="Shows existing meal_planning module structure. New dietary_filter module will be added here alongside algorithm, rotation, etc."/>
      <artifact path="crates/meal_planning/src/algorithm.rs" kind="module" symbol="algorithm" lines="exists" reason="Existing algorithm module that will call filter_by_dietary_restrictions as first step of generate_multi_week_meal_plans (per architecture doc section 1.5)."/>
    </code>
    <dependencies>
      <rust>
        <package name="bincode" version="exists" usage="Encode/Decode derives on enums for evento event serialization"/>
        <package name="serde" version="exists" usage="Serialize/Deserialize for DietaryRestriction and DietaryTag"/>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="business">AND Logic: All user dietary restrictions must be satisfied. A recipe tagged Vegan but not GlutenFree is excluded if user has both restrictions.</constraint>
    <constraint type="business">Safety First: Recipes without explicit dietary tags are excluded when restrictions present (prevents accidental incompatible suggestions).</constraint>
    <constraint type="business">Custom Allergens: Custom restrictions check ingredient.name text with case-insensitive contains (e.g., "peanut" matches "Peanut butter").</constraint>
    <constraint type="performance">Filter operation must be fast (&lt;10ms for 100 recipes) to avoid slowing down meal plan generation.</constraint>
    <constraint type="architecture">Use efficient iterator chains with .filter() rather than multiple loops. Avoid unnecessary intermediate vector allocations.</constraint>
    <constraint type="testing">TDD enforced: Write tests first before implementation. All tests must pass before story completion.</constraint>
    <constraint type="coverage">Epic 7 requirement: &gt;80% test coverage for algorithm modules (per Epic 7 success criteria).</constraint>
  </constraints>

  <interfaces>
    <interface name="filter_by_dietary_restrictions" kind="function" signature="pub fn filter_by_dietary_restrictions(recipes: Vec&lt;Recipe&gt;, restrictions: &amp;[DietaryRestriction]) -&gt; Vec&lt;Recipe&gt;" path="crates/meal_planning/src/dietary_filter.rs">
      Primary function to implement. Filters recipes to only include those compatible with user's dietary restrictions using AND logic.
    </interface>
    <interface name="DietaryRestriction" kind="enum" signature="pub enum DietaryRestriction { Vegetarian, Vegan, GlutenFree, DairyFree, NutFree, Halal, Kosher, Custom(String) }" path="crates/user/src/types.rs">
      Input type representing user dietary constraints. Already implemented in Story 6.4.
    </interface>
    <interface name="DietaryTag" kind="enum" signature="pub enum DietaryTag { Vegetarian, Vegan, GlutenFree, DairyFree, NutFree, Halal, Kosher }" path="crates/recipe/src/types.rs">
      Recipe characteristics used for matching. Already implemented in Story 6.2.
    </interface>
    <interface name="Recipe" kind="struct" signature="pub struct Recipe { dietary_tags: Vec&lt;DietaryTag&gt;, ingredients: Vec&lt;Ingredient&gt;, ... }" path="crates/recipe/src/aggregate.rs">
      Recipe domain model with dietary_tags field and ingredients list. Used for filtering logic.
    </interface>
  </interfaces>

  <tests>
    <standards>
Per solution-architecture-compact.md section 13:
- TDD enforced: Write test → Red → Implement → Green → Refactor
- Unit tests for all restriction types (standard tags + custom allergens)
- Edge case coverage (empty lists, no matches, recipes without tags)
- Use #[cfg(test)] modules colocated with source files
- Fast execution (&lt;1 second for all tests in module)
- Coverage &gt;80% for algorithm modules (Epic 7 requirement)
- Use unsafe_oneshot for evento subscription tests (per architecture doc)
    </standards>
    <locations>
      <location>crates/meal_planning/src/dietary_filter.rs - #[cfg(test)] mod tests at end of file</location>
      <location>Run with: cargo test --package meal_planning dietary_filter</location>
      <location>Coverage: cargo tarpaulin --package meal_planning --lib (may timeout, use unit tests pragmatically)</location>
    </locations>
    <ideas>
      <test id="AC-5" criterion="Empty restrictions list returns all recipes">
Create test with 5 recipes and empty restrictions Vec. Assert all 5 recipes returned unfiltered.
      </test>
      <test id="AC-3" criterion="Standard tag matching - Vegetarian">
Create recipe with DietaryTag::Vegetarian. Filter with DietaryRestriction::Vegetarian. Assert recipe included. Create recipe without tag, assert excluded.
      </test>
      <test id="AC-2" criterion="AND logic for multiple restrictions">
Create recipe with tags [Vegan, GlutenFree]. Filter with restrictions [Vegan, GlutenFree]. Assert included. Filter with [Vegan, DairyFree]. Assert excluded (missing DairyFree tag).
      </test>
      <test id="AC-4" criterion="Custom restriction ingredient text search">
Create recipe with ingredient "Peanut butter". Filter with Custom("peanut"). Assert excluded. Filter with Custom("almond"). Assert included.
      </test>
      <test id="AC-4" criterion="Case-insensitive custom restriction">
Create recipe with ingredient "Shellfish stock". Filter with Custom("SHELLFISH") and Custom("shellfish"). Both should exclude recipe.
      </test>
      <test id="AC-6" criterion="No compatible recipes returns empty Vec">
Create 3 recipes without any dietary tags. Filter with [Vegetarian]. Assert empty Vec returned (not error).
      </test>
      <test id="AC-3" criterion="All 7 standard tags tested">
Test each of: Vegetarian, Vegan, GlutenFree, DairyFree, NutFree, Halal, Kosher individually. Ensure correct matching.
      </test>
      <test id="Safety" criterion="Recipes without tags excluded when restrictions present">
Create recipe with no dietary_tags. Filter with [Vegetarian]. Assert recipe excluded (safety-first approach).
      </test>
    </ideas>
  </tests>
</story-context>
