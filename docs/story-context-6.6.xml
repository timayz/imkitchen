<story-context id="bmad/bmm/workflows/4-implementation/story-context" v="1.0">
  <metadata>
    <epicId>6</epicId>
    <storyId>6</storyId>
    <title>Update Read Models and Projections</title>
    <status>Draft</status>
    <generatedAt>2025-10-26T01:15:00Z</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-6.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>backend developer</asA>
    <iWant>to create evento projection handlers for all new Epic 6 events</iWant>
    <soThat>read models stay in sync with domain events and queries return current state</soThat>
    <tasks>
      - Create projection handler for MultiWeekMealPlanGenerated (inserts all weeks into meal_plans table)
      - Create projection handler for RecipeCreated with Epic 6 fields (accepts_accompaniment, preferred_accompaniments, accompaniment_category, cuisine, dietary_tags)
      - Create projection handler for UserMealPlanningPreferencesUpdated (updates user preferences columns)
      - Register evento subscriptions for all new Epic 6 event handlers
      - Write integration tests for all projections using unsafe_oneshot for sync processing
      - Add JSON serialization helper functions for Vec&lt;T&gt; fields
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Projection handler created for MultiWeekMealPlanGenerated event</criterion>
    <criterion id="2">Handler project_multi_week_meal_plan_generated inserts all weeks into meal_plans table</criterion>
    <criterion id="3">Projection handler created for RecipeCreated event extension (new Epic 6 fields)</criterion>
    <criterion id="4">Handler project_recipe_created handles new recipe fields (accepts_accompaniment, preferred_accompaniments, accompaniment_category, cuisine, dietary_tags)</criterion>
    <criterion id="5">Projection handler created for UserMealPlanningPreferencesUpdated event (Epic 6 user preferences)</criterion>
    <criterion id="6">Handler project_user_meal_planning_preferences_updated updates user preferences columns</criterion>
    <criterion id="7">JSON serialization works for Vec&lt;T&gt; fields stored as TEXT (preferred_accompaniments, dietary_tags, dietary_restrictions)</criterion>
    <criterion id="8">Integration tests verify database updates after evento events</criterion>
    <criterion id="9">Evento subscriptions registered for all new Epic 6 event handlers</criterion>
    <criterion id="10">All tests pass with unsafe_oneshot for sync subscription processing</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/architecture-update-meal-planning-enhancements.md</path>
        <title>Architecture Update: Enhanced Meal Planning System</title>
        <section>1.3 Data Model Changes</section>
        <snippet>MultiWeekMealPlan struct with generation_batch_id, generated_weeks: Vec&lt;WeekMealPlan&gt;, rotation_state. WeekMealPlan includes start_date, end_date, status (Future/Current/Past/Archived), is_locked, generation_batch_id, meal_assignments, shopping_list_id.</snippet>
        <reason>Defines the domain model structure for multi-week meal plans that projections must persist to read models</reason>
      </doc>
      <doc>
        <path>docs/architecture-update-meal-planning-enhancements.md</path>
        <title>Architecture Update: Enhanced Meal Planning System</title>
        <section>1.4 Events</section>
        <snippet>MultiWeekMealPlanGenerated event with generation_batch_id, user_id, weeks: Vec&lt;WeekMealPlanData&gt;, rotation_state, generated_at. SingleWeekRegenerated and AllFutureWeeksRegenerated events also defined.</snippet>
        <reason>Specifies the evento events that projection handlers must consume</reason>
      </doc>
      <doc>
        <path>docs/architecture-update-meal-planning-enhancements.md</path>
        <title>Architecture Update: Enhanced Meal Planning System</title>
        <section>5.2 Crate: recipe - Updated Events</section>
        <snippet>RecipeCreated event updated with NEW fields: accepts_accompaniment (bool), preferred_accompaniments (Vec&lt;AccompanimentCategory&gt;), accompaniment_category (Option&lt;AccompanimentCategory&gt;), cuisine (Option&lt;Cuisine&gt;), dietary_tags (Vec&lt;DietaryTag&gt;)</snippet>
        <reason>Documents the new Epic 6 fields added to RecipeCreated event that require projection handler updates</reason>
      </doc>
      <doc>
        <path>docs/architecture-update-meal-planning-enhancements.md</path>
        <title>Architecture Update: Enhanced Meal Planning System</title>
        <section>5.3 Crate: user</section>
        <snippet>UserMealPlanningPreferencesUpdated event (NEW) for updating user preferences: max_prep_time_weeknight, max_prep_time_weekend, avoid_consecutive_complex, cuisine_variety_weight, dietary_restrictions</snippet>
        <reason>Defines the new user preferences event requiring a projection handler</reason>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>imkitchen - Epic Breakdown</title>
        <section>Epic 6: Story 6.6</section>
        <snippet>Story 6.6 acceptance criteria: Projection handlers created for all new events, JSON serialization works for Vec&lt;T&gt; fields stored as TEXT, integration tests verify database updates, evento subscriptions registered</snippet>
        <reason>Source of truth for Story 6.6 acceptance criteria and requirements</reason>
      </doc>
      <doc>
        <path>docs/solution-architecture-compact.md</path>
        <title>Solution Architecture - imkitchen</title>
        <section>3.3 Data Architecture - Projections</section>
        <snippet>Pattern: Domain events â†’ Multiple page-specific read models. evento::subscribe("subscription-name").aggregator&lt;AggregateType&gt;().handler(handler_fn).run(&amp;executor) pattern. Use unsafe_oneshot for sync processing in tests.</snippet>
        <reason>Establishes the standard projection pattern and testing approach with unsafe_oneshot</reason>
      </doc>
      <doc>
        <path>docs/solution-architecture-compact.md</path>
        <title>Solution Architecture - imkitchen</title>
        <section>2.5 Database Schema</section>
        <snippet>SQLite single database. Read models include users, recipes, meal_plans, meal_assignments. JSON fields stored as TEXT with application-layer validation.</snippet>
        <reason>Confirms SQLite uses TEXT for JSON storage, requiring serde_json serialization</reason>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>crates/meal_planning/src/read_model.rs</path>
        <kind>module</kind>
        <symbol>meal_plan_projection</symbol>
        <lines>575-584</lines>
        <snippet>pub fn meal_plan_projection(pool: SqlitePool) -&gt; evento::SubscribeBuilder&lt;evento::Sqlite&gt; { evento::subscribe("meal-plan-read-model").data(pool).handler(meal_plan_generated_handler()).handler(recipe_used_in_rotation_handler())... }</snippet>
        <reason>Existing subscription setup pattern to follow for new Epic 6 event handlers</reason>
      </artifact>
      <artifact>
        <path>crates/meal_planning/src/read_model.rs</path>
        <kind>struct</kind>
        <symbol>MealPlanReadModel</symbol>
        <lines>11-20</lines>
        <snippet>#[derive(Debug, Clone, Serialize, Deserialize, sqlx::FromRow)] pub struct MealPlanReadModel { pub id: String, pub user_id: String, pub start_date: String, pub status: String, pub rotation_state: String, pub created_at: String, pub updated_at: Option&lt;String&gt; }</snippet>
        <reason>Existing read model structure - needs Epic 6 fields (end_date, is_locked, generation_batch_id, status enum)</reason>
      </artifact>
      <artifact>
        <path>crates/meal_planning/src/read_model.rs</path>
        <kind>struct</kind>
        <symbol>MealAssignmentReadModel</symbol>
        <lines>23-32</lines>
        <snippet>#[derive(Debug, Clone, Serialize, Deserialize, sqlx::FromRow)] pub struct MealAssignmentReadModel { pub id: String, pub meal_plan_id: String, pub date: String, pub course_type: String, pub recipe_id: String, pub prep_required: bool, pub assignment_reasoning: Option&lt;String&gt; }</snippet>
        <reason>Existing assignment read model - needs accompaniment_recipe_id field from Epic 6</reason>
      </artifact>
      <artifact>
        <path>crates/meal_planning/src/events.rs</path>
        <kind>struct</kind>
        <symbol>MultiWeekMealPlan</symbol>
        <lines>Not yet implemented</lines>
        <snippet>Will contain: generation_batch_id, generated_weeks: Vec&lt;WeekMealPlan&gt;, rotation_state</snippet>
        <reason>New Epic 6 event structure (from Story 6.3) that needs projection handler</reason>
      </artifact>
      <artifact>
        <path>crates/meal_planning/src/events.rs</path>
        <kind>struct</kind>
        <symbol>WeekStatus</symbol>
        <lines>41-56</lines>
        <snippet>#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Serialize, Deserialize, Encode, Decode)] #[serde(rename_all = "snake_case")] pub enum WeekStatus { Future, Current, Past, Archived }</snippet>
        <reason>Week status enum used for calculating meal plan status in projection handlers</reason>
      </artifact>
      <artifact>
        <path>crates/meal_planning/src/events.rs</path>
        <kind>struct</kind>
        <symbol>MealAssignment</symbol>
        <lines>63-72</lines>
        <snippet>pub struct MealAssignment { pub date: String, pub course_type: String, pub recipe_id: String, pub prep_required: bool, pub assignment_reasoning: Option&lt;String&gt;, #[serde(default)] pub accompaniment_recipe_id: Option&lt;String&gt; }</snippet>
        <reason>MealAssignment includes accompaniment_recipe_id field that projections must store</reason>
      </artifact>
      <artifact>
        <path>crates/recipe/src/read_model.rs</path>
        <kind>function</kind>
        <symbol>project_recipe_created</symbol>
        <lines>Unknown - needs investigation</lines>
        <snippet>Existing projection handler for RecipeCreated - needs update for Epic 6 fields</snippet>
        <reason>Handler to extend with accepts_accompaniment, preferred_accompaniments, accompaniment_category, cuisine, dietary_tags</reason>
      </artifact>
      <artifact>
        <path>crates/user/src/read_model.rs</path>
        <kind>module</kind>
        <symbol>user read_model</symbol>
        <lines>Unknown - needs investigation</lines>
        <snippet>User read model projections - needs new handler for UserMealPlanningPreferencesUpdated</snippet>
        <reason>New projection handler required for user preferences updates</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <package name="evento" version="1.5" features="sqlite">Event sourcing framework</package>
        <package name="sqlx" version="0.8" features="runtime-tokio, sqlite, chrono, uuid">Async database queries</package>
        <package name="serde" version="1.0" features="derive">Serialization framework</package>
        <package name="serde_json" version="1.0">JSON serialization for Vec&lt;T&gt; fields</package>
        <package name="tokio" version="1.40" features="full">Async runtime for tests</package>
        <package name="bincode" version="2.0">Binary encoding for evento events</package>
        <package name="chrono" version="0.4" features="serde">Date/time handling</package>
        <package name="uuid" version="1.10" features="v4, serde">ID generation</package>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Projections must be idempotent - replaying events produces same database state</constraint>
    <constraint>SQLite stores JSON as TEXT - use serde_json::to_string() for Vec&lt;T&gt; serialization</constraint>
    <constraint>SQLx query macros disabled - runtime query verification only (no compile-time checks)</constraint>
    <constraint>Evento subscriptions process events asynchronously - use unsafe_oneshot for synchronous test processing</constraint>
    <constraint>Week status calculation logic: Future (start_date &gt; today), Current (start_date &lt;= today &lt;= end_date), Past (end_date &lt; today)</constraint>
    <constraint>All projections follow CQRS pattern: events â†’ handlers â†’ read model tables</constraint>
    <constraint>Integration tests use in-memory SQLite (:memory:) for fast execution</constraint>
    <constraint>Test coverage target: &gt;90% per Story 6.7 requirements</constraint>
    <constraint>Projections update read models for fast queries (not normalized schema)</constraint>
    <constraint>generation_batch_id links all weeks generated in same multi-week batch</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>evento::subscribe</name>
      <kind>function</kind>
      <signature>pub fn subscribe(name: &amp;str) -&gt; SubscribeBuilder&lt;Sqlite&gt;</signature>
      <path>evento crate</path>
      <usage>Create subscription: evento::subscribe("subscription-name").aggregator::&lt;AggregateType&gt;().handler(handler_fn).run(&amp;executor)</usage>
    </interface>
    <interface>
      <name>SubscribeBuilder::unsafe_oneshot</name>
      <kind>method</kind>
      <signature>pub async fn unsafe_oneshot(self, executor: &amp;Executor) -&gt; Result&lt;(), Error&gt;</signature>
      <path>evento crate</path>
      <usage>Process subscription synchronously in tests instead of run(&amp;executor)</usage>
    </interface>
    <interface>
      <name>serde_json::to_string</name>
      <kind>function</kind>
      <signature>pub fn to_string&lt;T: Serialize&gt;(value: &amp;T) -&gt; Result&lt;String, serde_json::Error&gt;</signature>
      <path>serde_json crate</path>
      <usage>Serialize Vec&lt;T&gt; to JSON string for TEXT column storage</usage>
    </interface>
    <interface>
      <name>serde_json::from_str</name>
      <kind>function</kind>
      <signature>pub fn from_str&lt;T: DeserializeOwned&gt;(s: &amp;str) -&gt; Result&lt;T, serde_json::Error&gt;</signature>
      <path>serde_json crate</path>
      <usage>Deserialize JSON string from TEXT column to Vec&lt;T&gt;</usage>
    </interface>
    <interface>
      <name>sqlx::query</name>
      <kind>macro</kind>
      <signature>sqlx::query(sql: &amp;str) -&gt; Query</signature>
      <path>sqlx crate</path>
      <usage>Execute INSERT/UPDATE queries for projection handlers</usage>
    </interface>
    <interface>
      <name>sqlx::query_as</name>
      <kind>macro</kind>
      <signature>sqlx::query_as::&lt;_, T&gt;(sql: &amp;str) -&gt; QueryAs&lt;T&gt;</signature>
      <path>sqlx crate</path>
      <usage>Query and deserialize rows to read model structs</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing follows TDD approach with integration tests for all projection handlers. Tests use in-memory SQLite (:memory:) for fast execution. Evento subscriptions tested with unsafe_oneshot for synchronous event processing (not async run). All tests verify database state after emitting events. JSON round-trip serialization tested explicitly for Vec&lt;T&gt; fields. Test coverage target: &gt;90% per Story 6.7. Tests cleanup after execution (drop tables). Use sqlx::migrate for schema setup in tests.
    </standards>
    <locations>
      - crates/meal_planning/src/read_model.rs (test module at bottom)
      - crates/recipe/src/read_model.rs (test module)
      - crates/user/src/read_model.rs (test module)
      - Integration tests can also go in crates/*/tests/ directories
    </locations>
    <ideas>
      <idea ac="1,2">Test emit MultiWeekMealPlanGenerated with 3 weeks â†’ query meal_plans table â†’ verify 3 rows inserted with correct generation_batch_id</idea>
      <idea ac="2">Test verify meal_assignments count = weeks Ã— 21 after MultiWeekMealPlanGenerated</idea>
      <idea ac="2">Test week status calculation: Future when start_date &gt; today, Current when today in range, Past when end_date &lt; today</idea>
      <idea ac="3,4,7">Test emit RecipeCreated with cuisine="italian", dietary_tags=["vegetarian"] â†’ query recipes table â†’ verify JSON deserialization works</idea>
      <idea ac="4,7">Test RecipeCreated with empty preferred_accompaniments â†’ verify stores "[]" JSON</idea>
      <idea ac="5,6,7">Test emit UserMealPlanningPreferencesUpdated â†’ query users table â†’ verify max_prep_time_weeknight updated and dietary_restrictions JSON round-trip</idea>
      <idea ac="7">Unit test: JSON serialization helper round-trip for Vec&lt;String&gt;, Vec&lt;DietaryTag&gt;, Vec&lt;AccompanimentCategory&gt;</idea>
      <idea ac="8,10">Test all projections use unsafe_oneshot(&amp;executor) for sync processing in tests (not run(&amp;executor))</idea>
      <idea ac="9">Test evento subscriptions registered with unique names and correct aggregator types</idea>
      <idea ac="2">Test generation_batch_id links all weeks from same batch (all 3 weeks have same batch ID)</idea>
    </ideas>
  </tests>
</story-context>
