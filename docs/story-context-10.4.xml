<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>10</epicId>
    <storyId>4</storyId>
    <title>Documentation Updates</title>
    <status>Approved</status>
    <generatedAt>2025-10-27</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-10.4.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>technical writer</asA>
    <iWant>complete comprehensive user and developer documentation</iWant>
    <soThat>users understand how to use the enhanced meal planning features and developers can maintain and extend the system</soThat>
    <tasks>
      - Create user guide (non-technical, task-oriented, screenshot-heavy)
      - Create API documentation (route signatures, examples)
      - Update architecture documentation with "as-built" notes
      - Update README.md with new features
      - Capture screenshots for user guide (Playwright automation)
      - Add code comments to complex algorithm functions (Rustdoc)
      - Update deployment guide (migration steps, env vars)
    </tasks>
  </story>

  <acceptanceCriteria>
    1. User guide created: docs/user-guide-meal-planning.md
    2. User guide covers all key features
    3. API documentation updated: docs/api/meal-planning-routes.md
    4. Architecture document updated with "as-built" notes
    5. README.md updated with new features
    6. Screenshots added to user guide
    7. Code comments added to complex algorithm functions
    8. Deployment guide updated (migration steps, env vars)
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-10.md</path>
        <title>Technical Specification: Story 10.4</title>
        <section>Story 10.4: Documentation Updates (lines 791-827)</section>
        <snippet>Authoritative acceptance criteria, documentation requirements, screenshot automation, Rustdoc comments</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic 10, Story 10.4</title>
        <section>Epic 10, Story 10.4 (lines 2363-2385)</section>
        <snippet>User story statement, prerequisites (Epic 6-9 complete), technical notes (Playwright screenshots, Markdown)</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/PRD.md</path>
        <title>PRD</title>
        <section>Product Requirements</section>
        <snippet>Source for user guide content (features, user flows, business requirements)</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>Current architecture</section>
        <snippet>To be updated with Epic 10 "as-built" notes (multi-week plan structure, rotation state, preferences)</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/README.md</path>
        <title>README</title>
        <section>Project overview</section>
        <snippet>To be updated with multi-week meal planning features</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>docs/user-guide-meal-planning.md</path>
        <kind>user-documentation</kind>
        <symbol>User guide</symbol>
        <lines>N/A (to be created)</lines>
        <reason>Non-technical documentation for end users (generating, navigating, regenerating, preferences, accompaniments)</reason>
      </artifact>
      <artifact>
        <path>docs/api/meal-planning-routes.md</path>
        <kind>api-documentation</kind>
        <symbol>API route documentation</symbol>
        <lines>N/A (to be created)</lines>
        <reason>Developer-focused documentation (route signatures, request/response examples)</reason>
      </artifact>
      <artifact>
        <path>docs/images/meal-plan-calendar.png</path>
        <kind>screenshot</kind>
        <symbol>Meal plan calendar screenshot</symbol>
        <lines>N/A (to be created)</lines>
        <reason>Screenshot of multi-week meal plan calendar (captured via Playwright)</reason>
      </artifact>
      <artifact>
        <path>docs/images/preferences-form.png</path>
        <kind>screenshot</kind>
        <symbol>Preferences form screenshot</symbol>
        <lines>N/A (to be created)</lines>
        <reason>Screenshot of meal planning preferences form (captured via Playwright)</reason>
      </artifact>
      <artifact>
        <path>docs/images/shopping-list.png</path>
        <kind>screenshot</kind>
        <symbol>Shopping list screenshot</symbol>
        <lines>N/A (to be created)</lines>
        <reason>Screenshot of week-specific shopping list (captured via Playwright)</reason>
      </artifact>
      <artifact>
        <path>e2e/screenshots/capture-screenshots.ts</path>
        <kind>script</kind>
        <symbol>Screenshot automation script</symbol>
        <lines>N/A (to be created)</lines>
        <reason>Playwright script to capture screenshots (consistent styling, reproducible)</reason>
      </artifact>
      <artifact>
        <path>crates/meal_planning/src/algorithm.rs</path>
        <kind>domain-logic</kind>
        <symbol>generate_multi_week, apply_rotation_state</symbol>
        <lines>N/A</lines>
        <reason>Add Rustdoc comments explaining algorithm logic ("why" not just "what")</reason>
      </artifact>
      <artifact>
        <path>docs/deployment.md</path>
        <kind>deployment-documentation</kind>
        <symbol>Deployment guide</symbol>
        <lines>N/A (to be updated)</lines>
        <reason>Update with Epic 10 migration steps, environment variables, verification steps</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="@playwright/test" version="^1.56.0" dev="true">Screenshot automation (capture-screenshots.ts)</package>
      </node>
      <rust>
        <package name="cargo">cargo doc command to generate HTML documentation from Rustdoc comments</package>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    - User guide: Non-technical language, task-oriented, screenshot-heavy (no code examples)
    - API documentation: Developer-focused, complete route signatures, request/response examples
    - Architecture documentation: "As-built" notes (capture implementation decisions, not just design intent)
    - Screenshots: Automated via Playwright screenshot API (consistent styling, reproducible)
    - Code comments: Rustdoc format, explain "why" (not just "what"), include examples for public APIs
    - Deployment guide: Step-by-step instructions, migration steps, rollback procedures, verification steps
    - All documentation in Markdown (version control, easy diffing)
    - Screenshots in docs/images/ directory (optionally Git LFS for large files)
  </constraints>

  <interfaces>
    <interface>
      <name>User Guide Sections</name>
      <kind>Documentation structure</kind>
      <signature>
        - Introduction (overview)
        - Generating Multi-Week Meal Plans
        - Navigating Between Weeks
        - Regenerating Meal Plans
        - Setting Meal Planning Preferences
        - Accompaniments (can_be_side_dish, needs_side_dish)
      </signature>
      <path>docs/user-guide-meal-planning.md</path>
    </interface>
    <interface>
      <name>API Documentation Routes</name>
      <kind>Documentation structure</kind>
      <signature>
        - POST /plan/generate-multi-week
        - GET /plan?week=YYYY-MM-DD
        - POST /plan/regenerate-week?week=YYYY-MM-DD
        - POST /plan/regenerate-future
        - GET /profile/meal-planning-preferences
        - POST /profile/meal-planning-preferences
        - GET /shopping?week=YYYY-MM-DD
      </signature>
      <path>docs/api/meal-planning-routes.md</path>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Documentation quality criteria: User guide (non-technical, task-oriented, screenshot-heavy), API documentation (complete route signatures, examples), Architecture docs (as-built notes), Code comments (Rustdoc format, explain why), Deployment guide (step-by-step, rollback procedures). Screenshots automated via Playwright (consistent styling). All documentation in Markdown (versioned with code). Rustdoc comments verified via cargo doc (HTML generation).
    </standards>
    <locations>
      docs/user-guide-meal-planning.md (user documentation)
      docs/api/meal-planning-routes.md (API documentation)
      docs/solution-architecture.md (architecture documentation)
      docs/deployment.md (deployment documentation)
      docs/images/ (screenshots)
      e2e/screenshots/capture-screenshots.ts (screenshot automation)
    </locations>
    <ideas>
      <idea ac="1">Task: Create docs/user-guide-meal-planning.md with structure (Introduction, Generating, Navigating, Regenerating, Preferences, Accompaniments)</idea>
      <idea ac="2">Task: Write each user guide section in non-technical language (no code, jargon-free)</idea>
      <idea ac="3">Task: Create docs/api/meal-planning-routes.md documenting all routes (HTTP method, path, params, response codes, examples)</idea>
      <idea ac="4">Task: Update docs/solution-architecture.md with Epic 10 "as-built" notes (multi-week structure, rotation state, preferences)</idea>
      <idea ac="5">Task: Update README.md "Features" section with multi-week meal planning, preferences, accompaniments</idea>
      <idea ac="6">Task: Create e2e/screenshots/capture-screenshots.ts Playwright script to capture 3 screenshots (calendar, preferences, shopping)</idea>
      <idea ac="6">Task: Embed screenshots in user guide with descriptive captions</idea>
      <idea ac="7">Task: Add Rustdoc comments to crates/meal_planning/src/algorithm.rs functions (generate_multi_week, apply_rotation_state)</idea>
      <idea ac="7">Task: Run cargo doc to verify doc comments render correctly</idea>
      <idea ac="8">Task: Update docs/deployment.md with Epic 10 migration steps, environment variables, verification steps</idea>
    </ideas>
  </tests>
</story-context>
