<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>7</epicId>
    <storyId>7.2</storyId>
    <title>Main Course Selection with Preferences</title>
    <status>Draft</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-7.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>meal planning algorithm</asA>
    <iWant>select main courses based on user preferences and constraints</iWant>
    <soThat>meal assignments match user availability, skill level, and variety preferences</soThat>
    <tasks>
      <task id="1" status="pending">
        <title>Implement main course selection function</title>
        <subtasks>
          <subtask>Create function in crates/meal_planning/src/algorithm.rs</subtask>
          <subtask>Signature: pub fn select_main_course_with_preferences(available_main_courses: &amp;[Recipe], preferences: &amp;UserPreferences, rotation_state: &amp;RotationState, date: Date, day_of_week: DayOfWeek) -> Option&lt;Recipe&gt;</subtask>
          <subtask>Return Option&lt;Recipe&gt; (None if no compatible recipes)</subtask>
        </subtasks>
      </task>
      <task id="2" status="pending">
        <title>Implement time constraint filtering</title>
        <subtasks>
          <subtask>Determine if date is weeknight (Mon-Fri) or weekend (Sat-Sun)</subtask>
          <subtask>Weeknight: filter recipes where prep_time_minutes + cook_time_minutes &lt;= preferences.max_prep_time_weeknight</subtask>
          <subtask>Weekend: filter recipes where prep_time_minutes + cook_time_minutes &lt;= preferences.max_prep_time_weekend</subtask>
          <subtask>Default weeknight: 30 minutes, weekend: 90 minutes</subtask>
        </subtasks>
      </task>
      <task id="3" status="pending">
        <title>Implement skill level filtering</title>
        <subtasks>
          <subtask>Beginner: only Simple complexity recipes</subtask>
          <subtask>Intermediate: Simple + Moderate complexity recipes</subtask>
          <subtask>Advanced: all complexity levels (Simple, Moderate, Complex)</subtask>
          <subtask>Filter based on recipe.complexity field</subtask>
        </subtasks>
      </task>
      <task id="4" status="pending">
        <title>Implement consecutive complex avoidance</title>
        <subtasks>
          <subtask>Check preferences.avoid_consecutive_complex flag</subtask>
          <subtask>If true and rotation_state.last_complex_meal_date is yesterday, filter out Complex recipes</subtask>
          <subtask>Allow Complex recipes if last complex was 2+ days ago or None</subtask>
        </subtasks>
      </task>
      <task id="5" status="pending">
        <title>Implement cuisine variety scoring</title>
        <subtasks>
          <subtask>Calculate score: variety_weight * (1.0 / (cuisine_usage_count[recipe.cuisine] + 1.0))</subtask>
          <subtask>Use rotation_state.get_cuisine_usage(cuisine) for usage count</subtask>
          <subtask>variety_weight = preferences.cuisine_variety_weight (0.0-1.0, default 0.7)</subtask>
          <subtask>Higher score = more diverse (less-used cuisine)</subtask>
        </subtasks>
      </task>
      <task id="6" status="pending">
        <title>Select highest-scored recipe</title>
        <subtasks>
          <subtask>After filtering, score all remaining recipes</subtask>
          <subtask>Return recipe with highest cuisine variety score</subtask>
          <subtask>If multiple recipes tie, select first one (deterministic)</subtask>
        </subtasks>
      </task>
      <task id="7" status="pending">
        <title>Handle no compatible recipes</title>
        <subtasks>
          <subtask>If all recipes filtered out, return None</subtask>
          <subtask>Do not panic or error, allow caller to handle gracefully</subtask>
        </subtasks>
      </task>
      <task id="8" status="pending">
        <title>Write comprehensive unit tests</title>
        <subtasks>
          <subtask>Test weeknight time filtering (30min limit)</subtask>
          <subtask>Test weekend time filtering (90min limit)</subtask>
          <subtask>Test skill level filtering (Beginner, Intermediate, Advanced)</subtask>
          <subtask>Test consecutive complex avoidance (yesterday vs 2 days ago)</subtask>
          <subtask>Test cuisine variety scoring formula</subtask>
          <subtask>Test highest-scored selection</subtask>
          <subtask>Test no compatible recipes returns None</subtask>
          <subtask>Test preference combination scenarios</subtask>
        </subtasks>
      </task>
      <task id="9" status="pending">
        <title>Performance benchmark</title>
        <subtasks>
          <subtask>Create benchmark in benches/algorithm_benchmarks.rs</subtask>
          <subtask>Measure selection time with 100 candidate recipes</subtask>
          <subtask>Assert &lt;10ms execution time (P95)</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Function select_main_course_with_preferences implemented</criterion>
    <criterion id="2">Filters by max_prep_time (weeknight vs weekend)</criterion>
    <criterion id="3">Filters by skill_level (Beginner→Simple, Intermediate→Simple+Moderate, Advanced→All)</criterion>
    <criterion id="4">Filters by avoid_consecutive_complex (checks rotation_state.last_complex_meal_date)</criterion>
    <criterion id="5">Scores by cuisine_variety_weight (penalizes recent cuisines per formula)</criterion>
    <criterion id="6">Returns highest-scored recipe</criterion>
    <criterion id="7">Handles no compatible recipes gracefully (returns None)</criterion>
    <criterion id="8">Unit tests cover preference combinations</criterion>
    <criterion id="9">Performance: &lt;10ms for 100 recipes</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>3.2 Services and Modules</section>
        <snippet>
select_main_course_with_preferences | Score and select best main course for specific day respecting time/skill/complexity/cuisine constraints | Vec&lt;Recipe&gt;, UserPreferences, RotationState, Date, DayOfWeek | Option&lt;Recipe&gt; | meal_planning crate
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>3.3 Data Models and Contracts</section>
        <snippet>
pub struct UserPreferences {
    dietary_restrictions: Vec&lt;DietaryRestriction&gt;,
    max_prep_time_weeknight: u32,  // minutes, default 30
    max_prep_time_weekend: u32,     // minutes, default 90
    skill_level: SkillLevel,        // Beginner | Intermediate | Advanced
    avoid_consecutive_complex: bool, // default true
    cuisine_variety_weight: f32,    // 0.0-1.0, default 0.7
}

pub enum SkillLevel {
    Beginner,      // Only Simple recipes
    Intermediate,  // Simple + Moderate
    Advanced,      // All complexity levels
}

pub enum Complexity {
    Simple,
    Moderate,
    Complex,
}
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>3.5 Workflows and Sequencing - Cuisine Variety Scoring Formula</section>
        <snippet>
For each candidate main course recipe:
  cuisine_score = variety_weight * (1.0 / (cuisine_usage_count[recipe.cuisine] + 1.0))

  // variety_weight = 0.0 → no penalty for repeating cuisines
  // variety_weight = 1.0 → maximum penalty for repeating cuisines
  // Default: 0.7

Example with variety_weight=0.7:
  - Italian used 0 times: score = 0.7 * (1.0 / 1) = 0.70
  - Italian used 1 time:  score = 0.7 * (1.0 / 2) = 0.35
  - Italian used 2 times: score = 0.7 * (1.0 / 3) = 0.23

Select recipe with highest score (most diverse)
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>4.1 Performance</section>
        <snippet>
Target Metrics:
- Main course selection with preferences: &lt;10ms per selection
- Use Vec filtering instead of database queries for in-memory algorithm performance
- Cache cuisine usage counts in HashMap for O(1) lookups
- Avoid cloning large Recipe structs—use references where possible
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>6 Acceptance Criteria - Story 7.2</section>
        <snippet>
1. Function select_main_course_with_preferences implemented
2. Filters by max_prep_time (weeknight vs weekend)
3. Filters by skill_level (Beginner→Simple, Intermediate→Simple+Moderate, Advanced→All)
4. Filters by avoid_consecutive_complex (checks rotation_state.last_complex_meal_date)
5. Scores by cuisine_variety_weight (penalizes recent cuisines per formula)
6. Returns highest-scored recipe
7. Handles no compatible recipes gracefully (returns None)
8. Unit tests cover preference combinations
9. Performance: &lt;10ms for 100 recipes
        </snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
        <kind>module</kind>
        <symbol>RotationState</symbol>
        <lines>67-299</lines>
        <reason>RotationState struct provides get_cuisine_usage() and last_complex_meal_date methods needed for Story 7.2 filtering</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
        <kind>method</kind>
        <symbol>RotationState::get_cuisine_usage</symbol>
        <lines>285-287</lines>
        <reason>Returns usage count for cuisine variety scoring (AC-5)</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
        <kind>method</kind>
        <symbol>RotationState::last_complex_meal_date</symbol>
        <lines>85</lines>
        <reason>Used to check if last complex meal was yesterday for consecutive complex avoidance (AC-4)</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>struct</kind>
        <symbol>RecipeForPlanning</symbol>
        <lines>8-20</lines>
        <reason>Recipe data structure including prep_time_min, cook_time_min, complexity, and dietary_tags needed for filtering</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>struct</kind>
        <symbol>UserConstraints</symbol>
        <lines>23-36</lines>
        <reason>Contains weeknight_availability_minutes and dietary_restrictions for filtering (will need to extend for UserPreferences)</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>enum</kind>
        <symbol>Complexity</symbol>
        <lines>39-62</lines>
        <reason>Complexity enum (Simple, Moderate, Complex) for skill level filtering (AC-3)</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>struct</kind>
        <symbol>RecipeComplexityCalculator</symbol>
        <lines>73-124</lines>
        <reason>Provides calculate_complexity() method to map recipes to Complexity enum, and fits_weeknight/fits_weekend helpers</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/dietary_filter.rs</path>
        <kind>function</kind>
        <symbol>filter_by_dietary_restrictions</symbol>
        <lines>46-60</lines>
        <reason>Existing dietary filtering function that Story 7.2 should integrate with for complete filtering pipeline</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <crate name="chrono" version="0.4+" purpose="Date handling for weekday determination (Mon-Fri vs Sat-Sun)" />
        <crate name="serde" version="1.0+" purpose="Serialization for UserPreferences and RotationState" />
        <crate name="rand" version="0.8+" purpose="May be needed for tie-breaking in scoring (deterministic with seed)" />
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="1">
      <title>Pure Function Design</title>
      <description>select_main_course_with_preferences must be a pure function with no side effects, deterministic given same inputs</description>
    </constraint>
    <constraint id="2">
      <title>Stateless Design</title>
      <description>All state must be passed via parameters (RotationState), no internal mutable state</description>
    </constraint>
    <constraint id="3">
      <title>Filter-then-Score Pattern</title>
      <description>Apply hard constraints first (time, skill, complexity avoidance) to narrow candidates, then optimize with scoring</description>
    </constraint>
    <constraint id="4">
      <title>Multi-Factor Decision Algorithm</title>
      <description>Hard Constraints (Filters): Time, skill, consecutive complex - must satisfy ALL. Soft Preferences (Scoring): Cuisine variety - optimize for best match. Selection: Highest score wins.</description>
    </constraint>
    <constraint id="5">
      <title>Weekday Determination</title>
      <description>Monday-Friday: weeknight constraints. Saturday-Sunday: weekend constraints. Use chrono::Datelike::weekday() to get DayOfWeek.</description>
    </constraint>
    <constraint id="6">
      <title>Performance Target</title>
      <description>Must execute in &lt;10ms for 100 recipes. Use Vec filtering, avoid cloning large structs, cache lookups in HashMap.</description>
    </constraint>
    <constraint id="7">
      <title>TDD Approach</title>
      <description>Write failing test for each AC, implement minimal code to pass, refactor for performance/clarity</description>
    </constraint>
    <constraint id="8">
      <title>No External Dependencies</title>
      <description>Function should not call external services or perform I/O - pure domain logic only</description>
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>select_main_course_with_preferences</name>
      <kind>function</kind>
      <signature>pub fn select_main_course_with_preferences(available_main_courses: &amp;[Recipe], preferences: &amp;UserPreferences, rotation_state: &amp;RotationState, date: Date, day_of_week: DayOfWeek) -> Option&lt;Recipe&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
      <description>Main function to implement for Story 7.2 - filters and scores main courses based on preferences</description>
    </interface>
    <interface>
      <name>RotationState::get_cuisine_usage</name>
      <kind>method</kind>
      <signature>pub fn get_cuisine_usage(&amp;self, cuisine: &amp;Cuisine) -> u32</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
      <description>Returns how many times a cuisine has been used, needed for variety scoring (AC-5)</description>
    </interface>
    <interface>
      <name>RotationState::last_complex_meal_date</name>
      <kind>field</kind>
      <signature>pub last_complex_meal_date: Option&lt;String&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
      <description>ISO 8601 date string of last complex meal, used for consecutive complex avoidance (AC-4)</description>
    </interface>
    <interface>
      <name>RecipeComplexityCalculator::calculate_complexity</name>
      <kind>method</kind>
      <signature>pub fn calculate_complexity(recipe: &amp;RecipeForPlanning) -> Complexity</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
      <description>Maps recipe to Complexity enum (Simple/Moderate/Complex) for skill level filtering (AC-3)</description>
    </interface>
    <interface>
      <name>RecipeComplexityCalculator::fits_weeknight</name>
      <kind>method</kind>
      <signature>pub fn fits_weeknight(recipe: &amp;RecipeForPlanning, max_minutes: u32) -> bool</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
      <description>Checks if recipe total time (prep + cook) fits weeknight constraint (AC-2)</description>
    </interface>
    <interface>
      <name>filter_by_dietary_restrictions</name>
      <kind>function</kind>
      <signature>pub fn filter_by_dietary_restrictions(recipes: Vec&lt;RecipeForPlanning&gt;, restrictions: &amp;[DietaryRestriction]) -> Vec&lt;RecipeForPlanning&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/dietary_filter.rs</path>
      <description>Pre-filters recipes by dietary restrictions before main course selection</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TDD enforced: Write failing test for each AC before implementation. Test pattern: Create test recipes with varying prep times, complexities, and cuisines. Use RotationState with pre-populated cuisine usage counts. Assert filtering and scoring behavior matches formula. Target &gt;80% coverage via cargo-tarpaulin. Integration with RotationState using test helpers.
    </standards>
    <locations>
      <location>crates/meal_planning/src/algorithm.rs - Unit tests in #[cfg(test)] mod tests</location>
      <location>crates/meal_planning/tests/ - Integration tests directory</location>
      <location>benches/algorithm_benchmarks.rs - Performance benchmarks using criterion crate</location>
    </locations>
    <ideas>
      <idea ac="2">Test weeknight filtering: Create recipes with 25min, 35min total time. With max_prep_time_weeknight=30, only 25min should pass.</idea>
      <idea ac="2">Test weekend filtering: Create recipe with 75min total time. Should pass weekend (90min default), fail weeknight (30min default).</idea>
      <idea ac="3">Test Beginner skill level: Create Simple, Moderate, Complex recipes. Only Simple should pass for Beginner.</idea>
      <idea ac="3">Test Intermediate skill level: Simple and Moderate should pass, Complex should be filtered out.</idea>
      <idea ac="3">Test Advanced skill level: All complexity levels (Simple, Moderate, Complex) should pass.</idea>
      <idea ac="4">Test consecutive complex avoidance: Set rotation_state.last_complex_meal_date to yesterday, avoid_consecutive_complex=true. Complex recipes should be filtered out.</idea>
      <idea ac="4">Test consecutive complex allowed: Set last_complex_meal_date to 2 days ago. Complex recipes should be allowed.</idea>
      <idea ac="5">Test cuisine variety scoring: Create RotationState with Italian used 2x, Mexican used 0x. Mexican should score higher (0.7 vs 0.23).</idea>
      <idea ac="5">Test cuisine variety weight=0.0: All cuisines should score equally (no variety preference).</idea>
      <idea ac="5">Test cuisine variety weight=1.0: Maximum penalty for repeated cuisines.</idea>
      <idea ac="6">Test highest-scored selection: Create 3 recipes with different cuisine usage counts. Verify least-used cuisine selected.</idea>
      <idea ac="6">Test tie-breaking: Multiple recipes with same score. First one should be selected (deterministic).</idea>
      <idea ac="7">Test no compatible recipes: All recipes filtered by time/skill constraints. Should return None.</idea>
      <idea ac="8">Test preference combinations: Beginner + weeknight + avoid_consecutive_complex all active. Verify all constraints applied.</idea>
      <idea ac="9">Performance benchmark: Generate 100 recipes, call select_main_course_with_preferences, assert execution &lt;10ms (P95) using criterion.</idea>
    </ideas>
  </tests>
</story-context>
