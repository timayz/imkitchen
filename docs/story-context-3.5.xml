<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>5</storyId>
    <title>View Recipe Details from Calendar</title>
    <status>Draft</status>
    <generatedAt>2025-10-17</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-3.5.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user viewing meal plan calendar</asA>
    <iWant>click a meal to see full recipe details</iWant>
    <soThat>I can review instructions before cooking</soThat>
    <tasks>
      <task id="1" ac="1,5">Add Calendar Context to Recipe Detail Route</task>
      <task id="2" ac="4">Implement "Replace This Meal" Button</task>
      <task id="3" ac="6">Kitchen Mode Styling Enhancement</task>
      <task id="4" ac="7">Progressive Disclosure for Instructions</task>
      <task id="5" ac="5">Back Navigation Context Awareness</task>
      <task id="6" ac="3">Ensure Dietary Tags and Complexity Badge Display</task>
      <task id="7" ac="2">Enhance Recipe Detail Display</task>
      <task id="8" ac="all">Write Comprehensive Test Suite (TDD)</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Clicking recipe card on calendar opens recipe detail modal/page</criterion>
    <criterion id="2">Recipe detail displays: title, full ingredient list, step-by-step instructions with optional timers, prep/cook times, advance prep requirements</criterion>
    <criterion id="3">Dietary tags and complexity badge visible</criterion>
    <criterion id="4">"Replace This Meal" button available for quick substitution</criterion>
    <criterion id="5">Back/close navigation returns to calendar view</criterion>
    <criterion id="6">Recipe detail page optimized for kitchen use (large text, high contrast)</criterion>
    <criterion id="7">Instructions viewable in progressive disclosure (expand step-by-step)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epics.md</path>
        <title>Story 3.5: View Recipe Details from Calendar</title>
        <section>Epic 3 - Story 3.5 (lines 656-676)</section>
        <snippet>Recipe detail displays: title, full ingredient list, step-by-step instructions with optional timers, prep/cook times, advance prep requirements. Recipe detail page optimized for kitchen use (large text, high contrast). Instructions viewable in progressive disclosure (expand step-by-step).</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-3.md</path>
        <title>Story 3.5 Implementation Checklist</title>
        <section>Story 3.5 checklist</section>
        <snippet>Clicking recipe card opens recipe detail modal/page. Recipe detail displays: ingredients, instructions, prep/cook times. "Replace This Meal" button available on recipe detail. Back/close navigation returns to calendar view. Recipe detail optimized for kitchen use (large text, high contrast).</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>Kitchen Mode Design Principles</title>
        <section>Design Principles - Kitchen-First Design (line 118-119)</section>
        <snippet>Every interface decision optimized for the kitchen environment. Large touch targets (44x44px minimum), high contrast for varied lighting, spill-resistant patterns avoiding hover states, hands-free voice control compatibility.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>Progressive Disclosure Pattern</title>
        <section>Design Principles (line 124-126)</section>
        <snippet>Display only essential information at each step, revealing complexity gradually as needed. Detailed recipe steps expand only when cooking. Minimize cognitive load during high-stress cooking moments.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>TwinSpark Progressive Enhancement</title>
        <section>API Design - TwinSpark AJAX Enhancements (lines 532-558)</section>
        <snippet>TwinSpark attributes on buttons/forms trigger AJAX requests. Server returns HTML fragments (not JSON). Fragments swapped into DOM via TwinSpark. ts-req, ts-req-method, ts-target, ts-swap, ts-trigger attributes for declarative interactivity.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Route Structure - Recipe Detail</title>
        <section>Page Routing and Navigation (lines 169)</section>
        <snippet>GET /recipes/:id â†’ Recipe detail page. Askama template renders server-side with full recipe data.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Responsive Design Breakpoints</title>
        <section>Responsive Design (lines 870-875)</section>
        <snippet>Mobile (&lt;768px): Single column, stacked, full-width cards. Tablet (768-1024px): 2-column grid. Desktop (&gt;1024px): Multi-column layouts.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>src/routes/recipes.rs</path>
        <kind>route_handler</kind>
        <symbol>get_recipe_detail</symbol>
        <lines>256+</lines>
        <reason>Existing recipe detail handler - needs enhancement for calendar context, kitchen mode, and progressive disclosure</reason>
      </artifact>
      <artifact>
        <path>templates/pages/recipe-detail.html</path>
        <kind>template</kind>
        <symbol>recipe-detail template</symbol>
        <lines>1-400</lines>
        <reason>Complete Askama template for recipe detail - needs conditional rendering for calendar context, kitchen mode styling, and collapsible instructions</reason>
      </artifact>
      <artifact>
        <path>templates/pages/meal-calendar.html</path>
        <kind>template</kind>
        <symbol>meal-calendar template</symbol>
        <lines>all</lines>
        <reason>Calendar template with meal slots - recipe links need context parameters (?from=calendar&meal_plan_id=X&assignment_id=Y)</reason>
      </artifact>
      <artifact>
        <path>src/routes/meal_plan.rs</path>
        <kind>route_handler</kind>
        <symbol>show_meal_calendar (GET /plan)</symbol>
        <lines>80+</lines>
        <reason>Meal calendar route - provides context for where recipe detail is accessed from</reason>
      </artifact>
      <artifact>
        <path>templates/components/meal-slot.html</path>
        <kind>component</kind>
        <symbol>meal-slot component</symbol>
        <lines>all</lines>
        <reason>Meal slot component that links to recipe detail - needs context param additions</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <crate name="axum" version="0.8">HTTP server framework with route extractors</crate>
        <crate name="askama" version="0.14">Compile-time type-safe templates</crate>
        <crate name="sqlx" version="0.8">Async SQL query builder (SQLite)</crate>
        <crate name="evento" version="1.4">Event sourcing and CQRS library</crate>
        <crate name="serde" version="1.0">Serialization for query params</crate>
        <crate name="chrono" version="0.4">Date/time for calendar context</crate>
        <crate name="validator" version="0.20">Input validation</crate>
      </rust>
      <frontend>
        <library name="TwinSpark">Declarative progressive enhancement (static/js/twinspark.js)</library>
        <library name="Tailwind CSS" version="4.1+">Utility-first CSS framework</library>
      </frontend>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Server-side rendering only - use Askama templates, no client-side framework (React/Vue)</constraint>
    <constraint>Progressive enhancement via TwinSpark - features degrade gracefully without JavaScript</constraint>
    <constraint>Event sourcing architecture - all changes via domain events (no direct database writes in routes)</constraint>
    <constraint>TDD required - write failing test first, then implement (80% coverage target)</constraint>
    <constraint>Mobile-first responsive design - minimum 44x44px touch targets</constraint>
    <constraint>Kitchen mode must have 7:1 contrast ratio for accessibility</constraint>
    <constraint>Query parameters for context passing (not session state) - stateless architecture</constraint>
    <constraint>HTML-only responses (no JSON endpoints) - server renders fragments for AJAX</constraint>
  </constraints>
  <interfaces>
    <interface>
      <name>Axum Query Extractor</name>
      <kind>framework</kind>
      <signature>Query&lt;CalendarContext&gt; - parse ?from=calendar&meal_plan_id=X&assignment_id=Y</signature>
      <path>axum::extract::Query</path>
    </interface>
    <interface>
      <name>RecipeDetailTemplate</name>
      <kind>askama_template</kind>
      <signature>struct RecipeDetailTemplate { recipe, is_from_calendar, kitchen_mode, assignment_id, ... }</signature>
      <path>templates/pages/recipe-detail.html</path>
    </interface>
    <interface>
      <name>TwinSpark Attributes</name>
      <kind>progressive_enhancement</kind>
      <signature>ts-req, ts-req-method, ts-target, ts-swap for AJAX behaviors</signature>
      <path>TwinSpark library (static/js/twinspark.js)</path>
    </interface>
    <interface>
      <name>Recipe Query</name>
      <kind>domain_query</kind>
      <signature>crates/recipe/src/read_model.rs::query_recipe_by_id(recipe_id, db_pool)</signature>
      <path>crates/recipe/src/read_model.rs</path>
    </interface>
  </interfaces>
  <tests>
    <standards>TDD enforced - write failing test first, then implement. 80% code coverage target via cargo-tarpaulin. Test types: Unit tests (route handler logic in src/), Integration tests (full HTTP flow in tests/), E2E tests (Playwright in e2e/). Use cargo test for unit/integration, npx playwright test for E2E. Mock databases with in-memory SQLite for integration tests.</standards>
    <locations>
      <location>tests/*_integration_tests.rs - HTTP route integration tests</location>
      <location>src/routes/*_tests.rs - Unit tests for route handlers (if present)</location>
      <location>e2e/tests/*.spec.ts - Playwright E2E tests</location>
      <location>crates/*/tests/ - Domain crate unit tests</location>
    </locations>
    <ideas>
      <idea ac="1">Integration test: GET /recipes/:id?from=calendar renders with calendar context</idea>
      <idea ac="1">Integration test: Recipe link from calendar includes query params</idea>
      <idea ac="2">Unit test: Recipe detail template renders all fields (ingredients, instructions, timers)</idea>
      <idea ac="3">Integration test: Dietary tags and complexity badges display correctly</idea>
      <idea ac="4">Integration test: "Replace This Meal" button visible only when from=calendar</idea>
      <idea ac="4">E2E test: Clicking "Replace This Meal" triggers AJAX replacement</idea>
      <idea ac="5">Integration test: Back button href=/plan when from=calendar, href=/dashboard otherwise</idea>
      <idea ac="6">E2E test: Kitchen mode (?kitchen_mode=true) applies large text and high contrast</idea>
      <idea ac="6">Unit test: Kitchen mode CSS classes applied conditionally</idea>
      <idea ac="7">E2E test: Instruction steps collapsible (TwinSpark toggle)</idea>
      <idea ac="7">E2E test: "Expand All" button expands all instruction steps</idea>
      <idea ac="all">Integration test: Query param parsing for CalendarContext struct</idea>
    </ideas>
  </tests>
</story-context>
