<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>6</epicId>
    <storyId>6.7</storyId>
    <title>Write Comprehensive Domain Model Tests</title>
    <status>Draft</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-6.7.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>backend developer</asA>
    <iWant>to achieve &gt;90% test coverage on all Epic 6 domain models</iWant>
    <soThat>we have confidence in the foundation before implementing the algorithm</soThat>
    <tasks>
      - Write tests for Recipe aggregate (AC: 1, 2, 3, 5) covering all Epic 6 fields, enum variants, event serialization
      - Write tests for MealPlan aggregate (AC: 1, 2, 3, 4, 5) with 1-5 week boundaries, status calculation, event serialization
      - Write tests for User aggregate (AC: 1, 2, 3, 5) covering preferences, validation, event serialization
      - Write tests for RotationState module (AC: 1, 3, 4, 5) with uniqueness constraints, cycle tracking, JSON serialization
      - Run cargo tarpaulin and verify &gt;90% coverage (AC: 1, 7)
      - Add CI integration for coverage enforcement (AC: 6)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Unit test coverage &gt;90% measured by cargo tarpaulin across all Epic 6 domain crates</criterion>
    <criterion id="2">All enum variants tested (RecipeType, AccompanimentCategory, Cuisine, DietaryTag, DietaryRestriction, WeekStatus, Complexity)</criterion>
    <criterion id="3">All event handlers tested for Recipe, MealPlan, User, and RotationState aggregates</criterion>
    <criterion id="4">Edge cases tested: empty lists, null/Option values, boundary conditions (0 weeks, max 5 weeks)</criterion>
    <criterion id="5">Serialization round-trip tests for all domain events (serde + bincode)</criterion>
    <criterion id="6">All tests pass in CI without warnings</criterion>
    <criterion id="7">Test execution completes in &lt;10 seconds total</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic 6: Enhanced Meal Planning - Database &amp; Domain Foundation</title>
        <section>Story 6.7: Write Comprehensive Domain Model Tests</section>
        <snippet>Lines 1641-1661: AC requirements - &gt;90% coverage, enum variants, event handlers, edge cases, serialization, CI integration, &lt;10s execution</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture-compact.md</path>
        <title>Solution Architecture - imkitchen</title>
        <section>13. Testing Strategy</section>
        <snippet>TDD enforced, unit tests for domain aggregates, 80% coverage goal, test pyramid (unit/integration/e2e), projection testing with unsafe_oneshot</snippet>
      </doc>
      <doc>
        <path>docs/architecture-update-meal-planning-enhancements.md</path>
        <title>Architecture Update: Enhanced Meal Planning System</title>
        <section>1.4 Events</section>
        <snippet>MultiWeekMealPlanGenerated, SingleWeekRegenerated, AllFutureWeeksRegenerated event structures with bincode serialization</snippet>
      </doc>
      <doc>
        <path>docs/architecture-update-meal-planning-enhancements.md</path>
        <title>Architecture Update: Enhanced Meal Planning System</title>
        <section>5. Domain Model Updates</section>
        <snippet>Recipe (accepts_accompaniment, preferred_accompaniments, cuisine), MealPlan (generation_batch_id, is_locked, WeekStatus), User (max_prep_time, cuisine_variety_weight), RotationState (cycle tracking)</snippet>
      </doc>
    </docs>

    <code>
      <file>
        <path>crates/recipe/src/aggregate.rs</path>
        <kind>aggregate</kind>
        <symbol>RecipeAggregate</symbol>
        <lines>1-60</lines>
        <reason>Recipe aggregate with Epic 6 fields (accepts_accompaniment, preferred_accompaniments) - needs comprehensive unit tests for AC #1, #2, #3</reason>
      </file>
      <file>
        <path>crates/recipe/src/events.rs</path>
        <kind>events</kind>
        <symbol>RecipeCreated, RecipeAccompanimentSettingsUpdated</symbol>
        <lines>all</lines>
        <reason>Recipe events requiring serialization round-trip tests (bincode + serde) for AC #5</reason>
      </file>
      <file>
        <path>crates/meal_planning/src/aggregate.rs</path>
        <kind>aggregate</kind>
        <symbol>MealPlanAggregate</symbol>
        <lines>all</lines>
        <reason>MealPlan aggregate with multi-week support - needs tests for 1-5 week boundaries (AC #4), week status calculation, generation_batch_id linking</reason>
      </file>
      <file>
        <path>crates/meal_planning/src/events.rs</path>
        <kind>events</kind>
        <symbol>MultiWeekMealPlanGenerated, SingleWeekRegenerated</symbol>
        <lines>all</lines>
        <reason>MealPlan events requiring bincode serialization tests for AC #5</reason>
      </file>
      <file>
        <path>crates/meal_planning/src/rotation.rs</path>
        <kind>module</kind>
        <symbol>RotationState, cycle tracking logic</symbol>
        <lines>all</lines>
        <reason>RotationState module managing recipe uniqueness (main courses) and cycling (appetizers/desserts) - critical logic needing comprehensive tests for AC #1, #3, #4</reason>
      </file>
      <file>
        <path>crates/user/src/aggregate.rs</path>
        <kind>aggregate</kind>
        <symbol>UserAggregate</symbol>
        <lines>all</lines>
        <reason>User aggregate with meal planning preferences (max_prep_time, cuisine_variety_weight, dietary_restrictions) - needs validation tests and preference tests for AC #1, #3</reason>
      </file>
      <file>
        <path>crates/user/src/events.rs</path>
        <kind>events</kind>
        <symbol>UserMealPlanningPreferencesUpdated</symbol>
        <lines>all</lines>
        <reason>User preference events requiring bincode serialization tests for AC #5</reason>
      </file>
      <file>
        <path>crates/recipe/tests/recipe_epic6_tests.rs</path>
        <kind>test</kind>
        <symbol>existing Epic 6 recipe tests</symbol>
        <lines>all</lines>
        <reason>Reference pattern for Epic 6 recipe tests - shows existing test structure to extend</reason>
      </file>
      <file>
        <path>crates/meal_planning/tests/epic6_story63_tests.rs</path>
        <kind>test</kind>
        <symbol>existing Epic 6 MealPlan tests</symbol>
        <lines>all</lines>
        <reason>Reference pattern for Epic 6 MealPlan tests - shows test structure for multi-week logic</reason>
      </file>
      <file>
        <path>crates/meal_planning/tests/multi_week_projection_tests.rs</path>
        <kind>test</kind>
        <symbol>existing projection tests with unsafe_oneshot</symbol>
        <lines>all</lines>
        <reason>Reference for evento subscription testing pattern with unsafe_oneshot (per architecture doc section 13)</reason>
      </file>
    </code>

    <dependencies>
      <rust>
        <package name="bincode" version="2.0">Event serialization format (evento requirement)</package>
        <package name="serde" version="1.0">Serialization/deserialization framework</package>
        <package name="serde_json" version="1.0">JSON serialization for RotationState (stored in DB as TEXT)</package>
        <package name="evento" version="1.5">Event sourcing framework with aggregate support</package>
        <package name="tokio" version="1.40">Async runtime for tests</package>
      </rust>
      <dev-dependencies>
        <package name="cargo-tarpaulin" version="0.27+">Coverage measurement tool (AC #1)</package>
        <package name="quickcheck" version="1.0" optional="true">Property-based testing (optional enhancement)</package>
        <package name="proptest" version="1.4" optional="true">Alternative property-based testing</package>
      </dev-dependencies>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Rust test framework: Use #[cfg(test)] modules colocated in each source file for unit tests</constraint>
    <constraint>Integration tests: Separate files in crates/*/tests/ directory (already used in Story 6.6)</constraint>
    <constraint>Coverage tool: cargo-tarpaulin (industry standard for Rust) with &gt;90% threshold enforced</constraint>
    <constraint>Serialization: bincode for evento events (binary format), serde_json for database JSON fields (RotationState)</constraint>
    <constraint>Test execution: Must be fast (&lt;10s total) to avoid slowing down TDD workflow</constraint>
    <constraint>CI enforcement: Coverage must be measured and enforced automatically in .github/workflows/ci.yml</constraint>
    <constraint>No external dependencies in unit tests: Focus on domain logic, mock/fake external services</constraint>
    <constraint>TDD principles: Write test → Red → Implement → Green → Refactor (per architecture doc section 13)</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>RecipeAggregate</name>
      <kind>struct</kind>
      <signature>
        pub struct RecipeAggregate {
          pub recipe_id: String,
          pub user_id: String,
          pub title: String,
          pub recipe_type: String, // "appetizer" | "main_course" | "dessert" | "accompaniment"
          pub ingredients: Vec&lt;Ingredient&gt;,
          pub instructions: Vec&lt;InstructionStep&gt;,
          pub accepts_accompaniment: bool, // Epic 6
          pub preferred_accompaniments: Vec&lt;AccompanimentCategory&gt;, // Epic 6
          pub tags: RecipeTags,
          // ... other fields
        }
      </signature>
      <path>crates/recipe/src/aggregate.rs</path>
    </interface>
    <interface>
      <name>AccompanimentCategory</name>
      <kind>enum</kind>
      <signature>
        pub enum AccompanimentCategory {
          Pasta, Rice, Fries, Bread, Salad, Vegetables
        }
      </signature>
      <path>crates/recipe/src/types.rs</path>
    </interface>
    <interface>
      <name>RecipeType</name>
      <kind>enum</kind>
      <signature>pub enum RecipeType { Appetizer, MainCourse, Dessert, Accompaniment }</signature>
      <path>crates/recipe/src/types.rs</path>
    </interface>
    <interface>
      <name>Cuisine</name>
      <kind>enum</kind>
      <signature>pub enum Cuisine { Italian, Mexican, Asian, Indian, Mediterranean, American }</signature>
      <path>crates/recipe/src/types.rs or meal_planning</path>
    </interface>
    <interface>
      <name>DietaryTag</name>
      <kind>enum</kind>
      <signature>pub enum DietaryTag { Vegetarian, Vegan, GlutenFree, DairyFree, NutFree, Halal, Kosher }</signature>
      <path>crates/recipe/src/tagging.rs</path>
    </interface>
    <interface>
      <name>WeekStatus</name>
      <kind>enum</kind>
      <signature>pub enum WeekStatus { Future, Current, Past, Archived }</signature>
      <path>crates/meal_planning/src/types.rs or events.rs</path>
    </interface>
    <interface>
      <name>Complexity</name>
      <kind>enum</kind>
      <signature>pub enum Complexity { Simple, Moderate, Complex }</signature>
      <path>crates/recipe/src/tagging.rs</path>
    </interface>
    <interface>
      <name>RotationState</name>
      <kind>struct</kind>
      <signature>
        pub struct RotationState {
          pub used_main_course_ids: Vec&lt;String&gt;, // MUST be unique across all weeks
          pub used_appetizer_ids: Vec&lt;String&gt;, // Can repeat after all used once (cycle)
          pub used_dessert_ids: Vec&lt;String&gt;, // Can repeat after all used once (cycle)
          pub cuisine_usage_count: HashMap&lt;String, u32&gt;,
          pub last_complex_meal_date: Option&lt;String&gt;,
        }
      </signature>
      <path>crates/meal_planning/src/rotation.rs</path>
    </interface>
    <interface>
      <name>MultiWeekMealPlanGenerated</name>
      <kind>event</kind>
      <signature>
        #[derive(evento::AggregatorName, bincode::Encode, bincode::Decode)]
        struct MultiWeekMealPlanGenerated {
          generation_batch_id: String,
          user_id: String,
          weeks: Vec&lt;WeekMealPlanData&gt;,
          rotation_state: RotationState,
          generated_at: String,
        }
      </signature>
      <path>crates/meal_planning/src/events.rs</path>
    </interface>
  </interfaces>

  <tests>
    <standards>
      This project follows TDD principles with comprehensive test coverage requirements. Unit tests use #[cfg(test)] modules colocated with source files. Integration tests reside in crates/*/tests/ directories. Coverage measured by cargo-tarpaulin with &gt;90% threshold for Epic 6 domain crates (recipe, meal_planning, user). All tests must pass without warnings in CI. Serialization round-trips verified with both bincode (evento events) and serde_json (database JSON fields like RotationState). Test execution must complete in &lt;10 seconds to support fast TDD workflow. Architecture doc (solution-architecture-compact.md section 13) mandates TDD enforcement, 80% minimum coverage goal (Epic 6 raises to 90%), and test pyramid (unit &gt; integration &gt; e2e).
    </standards>

    <locations>
      - Unit tests: #[cfg(test)] modules in crates/recipe/src/*.rs, crates/meal_planning/src/*.rs, crates/user/src/*.rs
      - Integration tests: crates/recipe/tests/*.rs, crates/meal_planning/tests/*.rs, crates/user/tests/*.rs
      - Coverage reports: target/tarpaulin/ (HTML and XML formats)
      - CI workflow: .github/workflows/ci.yml (add tarpaulin step)
    </locations>

    <ideas>
      <test ac="1,2,3,5">Recipe aggregate - Test CreateRecipe command with all Epic 6 fields (accepts_accompaniment=true, preferred_accompaniments=[Pasta, Rice], cuisine=Italian, dietary_tags=[Vegetarian]). Verify RecipeCreated event bincode serialization round-trip. Test all RecipeType enum variants (Appetizer, MainCourse, Dessert, Accompaniment). Test all AccompanimentCategory variants (Pasta, Rice, Fries, Bread, Salad, Vegetables). Test all Cuisine variants. Test all DietaryTag variants. Test edge cases: empty preferred_accompaniments Vec, None for Option&lt;Cuisine&gt;.</test>
      <test ac="1,2,3,4,5">MealPlan aggregate - Test MultiWeekMealPlanGenerated with 1 week (minimum boundary). Test with 5 weeks (maximum boundary). Test with 0 favorite recipes (should error). Test week status calculation: Future (start_date &gt; today), Current (start_date &lt;= today &lt;= end_date), Past (end_date &lt; today). Test all WeekStatus enum variants. Test is_locked=true when week is Current or Past. Test generation_batch_id links all weeks from same generation. Test exactly 21 meal_assignments per week (7 days × 3 courses). Test accompaniment_recipe_id assignment for main courses. Test MultiWeekMealPlanGenerated bincode serialization round-trip.</test>
      <test ac="1,2,3,5">User aggregate - Test UserMealPlanningPreferencesUpdated event with all preference fields (max_prep_time_weeknight, max_prep_time_weekend, avoid_consecutive_complex, cuisine_variety_weight, dietary_restrictions). Test DietaryRestriction enum variants. Test Complexity enum variants. Test preference validation: max_prep_time_weeknight &lt; max_prep_time_weekend. Test cuisine_variety_weight range: 0.0 (repeat OK) to 1.0 (max variety). Test UserMealPlanningPreferencesUpdated bincode serialization. Test edge case: empty dietary_restrictions Vec.</test>
      <test ac="1,3,4,5">RotationState module - Test initialization (all fields empty). Test add_used_main_course: verify uniqueness constraint (no duplicates allowed). Test add_used_appetizer: allow repeats after all used once (cycle tracking). Test add_used_dessert: allow repeats after all used once (cycle tracking). Test cuisine_usage_count increment. Test last_complex_meal_date update. Test RotationState serialization to JSON (stored in DB as TEXT). Test deserialization from JSON. Test edge cases: empty used_*_ids Vecs, HashMap with 0 entries.</test>
      <test ac="1,7">Coverage verification - Run `cargo tarpaulin --workspace --exclude-files 'tests/*' --timeout 120`. Verify overall coverage &gt;90% for Epic 6 crates. Generate HTML report: `cargo tarpaulin --workspace --out Html`. Review uncovered lines and add missing tests. Ensure all tests pass: `cargo test --workspace`. Verify execution time &lt;10 seconds: `time cargo test --workspace`.</test>
      <test ac="6">CI integration - Update .github/workflows/ci.yml to run cargo tarpaulin. Add coverage threshold check: fail CI if coverage &lt;90%. Upload coverage report to CI artifacts. Add badge to README showing coverage percentage. Configure CI to fail on test warnings (--deny warnings flag).</test>
    </ideas>
  </tests>
</story-context>
