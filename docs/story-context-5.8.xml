<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>5</epicId>
    <storyId>8</storyId>
    <title>Real-Time Sync When Connectivity Restored</title>
    <status>Draft</status>
    <generatedAt>2025-10-19</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-5.8.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user who made changes offline</asA>
    <iWant>changes automatically synced when online</iWant>
    <soThat>I don't lose my work</soThat>
    <tasks>
      - Task 1: Implement Background Sync API detection and registration (AC: 1)
      - Task 2: Process queued mutations in order when sync triggered (AC: 2, 8)
      - Task 3: Implement conflict resolution and error handling (AC: 3, 6)
      - Task 4: Display sync progress and success notifications (AC: 4, 5)
      - Task 5: Write comprehensive tests for sync behavior (AC: All)
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Background Sync API detects network restoration
    2. Queued changes sent to server in order
    3. Conflicts resolved gracefully (server state wins, user notified)
    4. Sync progress indicator shows while syncing
    5. Success confirmation: "Changes synced"
    6. Failure handling: retry up to 3 times, then notify user
    7. Sync does not block user interaction
    8. Large data changes batched to reduce network load
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md" title="Solution Architecture" section="Section 8.3">
        PWA Offline Strategy with Background Sync API - Service worker intercepts requests, serves cached content when offline, Background Sync queues mutations when offline, syncs on reconnect
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-5.md" title="Technical Specification Epic 5" section="Module 6: Background Sync for Offline Mutations (lines 897-951)">
        Background Sync Strategy: When user submits form offline, service worker intercepts POST/PUT request, request fails due to no network, Workbox BackgroundSyncPlugin queues request in IndexedDB, when connectivity restored service worker replays queued requests, user receives notification of successful sync
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-5.md" title="Technical Specification Epic 5" section="Workflow 3: Background Sync (Offline → Online) sequence diagram (lines 1323-1405)">
        Complete sequence: User creates recipe offline → POST /recipes intercepted → Network fails → BackgroundSyncPlugin queues → 202 Accepted synthetic response → User sees "Saved offline" → Network restored → 'online' event → Sync event triggered → Replay queued requests → Server processes → 302 Redirect → Dequeue successful → postMessage to main thread → Toast "Your changes have been synced!"
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md" title="Epic Breakdown" section="Story 5.8: Real-Time Sync When Connectivity Restored (lines 1348-1370)">
        Prerequisites: User made changes offline (favorited recipe, checked shopping list item). Acceptance criteria include Background Sync API detection, queued changes sent in order, graceful conflict resolution, sync progress indicator, success confirmation, retry logic (up to 3 times), non-blocking sync, batched large data changes
      </doc>
      <doc path="/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-5.md" title="Technical Specification Epic 5" section="Test Strategy: Background Sync E2E test in Playwright (lines 2229-2257)">
        Test Case: Login, visit recipe form, go offline, submit form, verify "Saved offline" toast, go online, wait for sync completion (max 10s), verify "Your changes have been synced!" toast, navigate to /recipes and verify new recipe appears
      </doc>
    </docs>
    <code>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/static/sw.js" kind="service-worker" symbol="workbox.routing.registerRoute" lines="1-100">
        Existing service worker with Workbox caching strategies (Story 5.2 + 5.3). Contains precaching, runtime caching (HTML, images, recipes), IndexedDB integration. MUST BE EXTENDED with sync event listener and BackgroundSyncPlugin for POST/PUT/DELETE requests.
      </file>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/static/js/offline-db.js" kind="javascript" symbol="IndexedDB helpers" lines="1-500">
        IndexedDB helper functions for offline data persistence (Story 5.3). Contains recipe caching logic. May be useful for tracking sync queue metadata if needed beyond Workbox BackgroundSyncPlugin.
      </file>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/static/js/offline-indicator.js" kind="javascript" symbol="offline indicator UI" lines="1-150">
        Offline indicator UI component (Story 5.3). Displays "You're offline" message. Can be extended to show sync progress indicator or referenced for consistent toast styling.
      </file>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/e2e/tests/service-worker-offline.spec.ts" kind="test" symbol="Service Worker E2E tests" lines="1-100">
        Existing E2E tests for service worker registration and offline caching (Story 5.2). MUST BE EXTENDED with new test case for Story 5.8: "Real-time sync when connectivity restored" to verify sync event triggers, progress indicator displays, and queued requests replay successfully.
      </file>
      <file path="/home/snapiz/projects/github/timayz/imkitchen/static/js/sw-register.js" kind="javascript" symbol="service worker registration" lines="1-100">
        Service worker registration logic in main thread. May need to add message event listeners here to receive SYNC_PROGRESS and SYNC_COMPLETE messages from service worker.
      </file>
    </code>
    <dependencies>
      <npm>
        <package name="workbox-cli" version="^7.1.0">
          Workbox CLI tool for generating service worker with precaching manifest. Used in build:sw script. BackgroundSyncPlugin is part of Workbox core functionality.
        </package>
      </npm>
      <javascript>
        <library name="Workbox" version="7.1.0" source="CDN">
          Imported in sw.js: importScripts('https://storage.googleapis.com/workbox-cdn/releases/7.1.0/workbox-sw.js'). Provides BackgroundSyncPlugin, routing, caching strategies. Core dependency for this story.
        </library>
      </javascript>
    </dependencies>
  </artifacts>

  <constraints>
    1. **Service Worker Architecture**: Must extend existing sw.js from Story 5.2/5.3, not create separate service worker file. All sync logic goes in single service worker.

    2. **Workbox BackgroundSyncPlugin**: Use Workbox's built-in BackgroundSyncPlugin for queue management. Do NOT implement custom IndexedDB queue logic unless absolutely necessary for retry metadata.

    3. **evento Event Sourcing Conflict Resolution**: Server state always wins in conflict scenarios due to evento's aggregate versioning. Client cannot override server state. User notification is only UX response to conflicts.

    4. **iOS Safari Limitation**: Background Sync API not supported on iOS Safari as of iOS 16. MUST detect iOS and provide fallback: manual sync button + warning message.

    5. **Non-Blocking UI**: Sync progress indicator must be non-modal toast in bottom-right corner. User can continue interacting with app while sync runs in background.

    6. **Batch Size Limit**: Process maximum 10 requests per sync event to avoid blocking service worker thread. If queue has >10 requests, process first 10 and re-register sync event for next batch.

    7. **Testing Framework**: Use Playwright for E2E tests. Extend existing service-worker-offline.spec.ts test suite. Test on Chromium and Firefox (both support Background Sync), skip WebKit (iOS Safari limitation).

    8. **No New Domain Events**: This story is purely client-side (service worker + UI). No modifications to Rust domain crates or evento aggregates required.

    9. **Message Protocol**: Service worker communicates with main thread via postMessage() with structured message format: {type: 'SYNC_PROGRESS', current: N, total: M} and {type: 'SYNC_COMPLETE'}.

    10. **Exponential Backoff**: Retry failed requests with exponential backoff: 1min, 5min, 15min. After 3 retries, remove from queue and show persistent error notification.
  </constraints>

  <interfaces>
    <interface name="Background Sync API" kind="browser-api" signature="navigator.serviceWorker.ready.then(reg => reg.sync.register('sync-changes'))" path="Browser API">
      Registers background sync event with tag 'sync-changes'. Browser fires sync event when network connectivity restored. Service worker listens for this event to trigger queue replay.
    </interface>

    <interface name="Workbox BackgroundSyncPlugin" kind="workbox-plugin" signature="new workbox.backgroundSync.BackgroundSyncPlugin('mutation-queue', {maxRetentionTime: 24 * 60})" path="Workbox 7.1.0">
      Automatically queues failed POST/PUT/DELETE requests in IndexedDB. Provides onSync callback to process queue when sync event fires. maxRetentionTime: 24 hours (1440 minutes).
    </interface>

    <interface name="Service Worker postMessage" kind="api" signature="self.clients.matchAll().then(clients => clients.forEach(client => client.postMessage({type: 'SYNC_PROGRESS', current: 2, total: 5})))" path="Service Worker API">
      Posts messages from service worker to all active clients (main thread). Used to communicate sync progress and completion to UI layer for toast notifications.
    </interface>

    <interface name="Main Thread message listener" kind="event-listener" signature="navigator.serviceWorker.addEventListener('message', (event) => { if (event.data.type === 'SYNC_COMPLETE') { showToast('Your changes have been synced!'); } })" path="static/js/sw-register.js or templates/base.html">
      Listens for messages from service worker in main thread. Displays toast notifications for sync progress and completion. Must be added to existing service worker registration code.
    </interface>

    <interface name="Cache API" kind="browser-api" signature="caches.match(request).then(response => response || fetch(request))" path="Browser API">
      Used by service worker to check cache for resources. Already in use in sw.js for stale-while-revalidate and cache-first strategies. Background sync logic may need to check cache before replaying requests.
    </interface>

    <interface name="IndexedDB API" kind="browser-api" signature="indexedDB.open('workbox-background-sync')" path="Browser API">
      Workbox BackgroundSyncPlugin uses IndexedDB to persist mutation queue. Developer may need to inspect this database for debugging/testing but should not directly manipulate it (Workbox manages it).
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing follows TDD approach with 80% code coverage target (NFR requirement). Three test layers:

      1. **Unit Tests**: JavaScript/TypeScript unit tests for sync handler logic (if extracted to separate module). Use Jest or similar framework.

      2. **Integration Tests**: Service worker integration tests using Playwright's service worker API. Mock network offline/online transitions, verify sync event triggers, verify queue processing.

      3. **E2E Tests**: Full user flow tests with Playwright. Submit form offline, go online, verify sync completes and data appears on server. Test on Chromium and Firefox (skip WebKit for Background Sync tests due to iOS Safari limitation).

      Test locations: e2e/tests/service-worker-offline.spec.ts (extend existing suite), e2e/tests/background-sync.spec.ts (new file if needed for dedicated sync tests).

      **Critical Test Coverage**:
      - Background sync event triggers on network restoration
      - Queued requests replay in FIFO order
      - 409 Conflict response triggers user notification
      - 5xx Server Error triggers retry with exponential backoff
      - After 3 retries, persistent error notification shown
      - Sync progress indicator displays during sync
      - Success toast appears after successful sync
      - iOS Safari shows manual sync button and warning (fallback)
    </standards>

    <locations>
      - e2e/tests/service-worker-offline.spec.ts (extend existing)
      - e2e/tests/background-sync.spec.ts (new file for dedicated sync tests)
      - static/js/__tests__/sync-handler.test.js (if sync logic extracted to separate module)
    </locations>

    <ideas>
      <test id="AC-1" description="Background Sync API detects network restoration">
        - Playwright E2E: Go offline, submit form, verify queued, go online, verify sync event fires within 5 seconds
        - Mock navigator.onLine property, trigger 'online' event manually
        - Verify service worker sync event listener registered with correct tag 'sync-changes'
      </test>

      <test id="AC-2" description="Queued changes sent to server in order">
        - Integration test: Pre-populate IndexedDB with 3 POST requests (recipe A, B, C)
        - Trigger sync event, verify server receives requests in order: A → B → C
        - Use Playwright network interception to track request order
      </test>

      <test id="AC-3" description="Conflicts resolved gracefully">
        - E2E test: Submit recipe edit offline, modify same recipe on different device (simulate with server state change)
        - Trigger sync, server responds 409 Conflict
        - Verify toast displays: "Conflict detected for [Recipe Title]. Server version restored."
        - Verify request removed from queue (not retried)
      </test>

      <test id="AC-4" description="Sync progress indicator shows while syncing">
        - E2E test: Queue 5 requests offline, go online
        - Verify progress indicator appears: "Syncing changes... (1 of 5)" → "Syncing changes... (2 of 5)" → ... → "Syncing changes... (5 of 5)"
        - Use page.locator('.sync-progress-toast') to verify indicator visibility
      </test>

      <test id="AC-5" description="Success confirmation displays">
        - E2E test: Submit form offline, go online, wait for sync
        - Verify success toast appears: "Your changes have been synced!"
        - Verify toast auto-dismisses after 3 seconds
      </test>

      <test id="AC-6" description="Failure handling with retry logic">
        - Integration test: Mock server to return 500 Internal Server Error for first 2 attempts
        - Verify retry 1 at 1 minute delay, retry 2 at 5 minute delay, retry 3 at 15 minute delay
        - After 3 retries, verify persistent error notification: "Sync failed for Create Recipe. [Retry Now] [Dismiss]"
        - Use Playwright's clock manipulation: page.clock.fastForward(60000) to simulate time passing
      </test>

      <test id="AC-7" description="Sync does not block user interaction">
        - E2E test: Trigger sync with 10 queued requests
        - While sync in progress, verify user can navigate to /recipes, /dashboard
        - Verify no modal dialogs blocking interaction
        - Verify sync progress indicator is non-modal toast in bottom-right corner
      </test>

      <test id="AC-8" description="Large data changes batched">
        - Integration test: Queue 25 POST requests, trigger sync
        - Verify first batch processes 10 requests, then sync event re-registered for remaining 15
        - Verify second batch processes next 10, third batch processes final 5
        - Track sync event registrations via service worker logs
      </test>

      <test id="iOS-Safari-Fallback" description="iOS Safari fallback works">
        - E2E test: Detect iOS Safari (user agent check), verify warning displayed: "Background sync not available on iOS"
        - Verify manual sync button visible
        - Click manual sync button, verify queued requests sent to server
        - Use Playwright's iPhone device emulation for realistic test
      </test>
    </ideas>
  </tests>
</story-context>
