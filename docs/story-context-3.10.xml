<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>10</storyId>
    <title>Handle Insufficient Recipes for Generation</title>
    <status>Draft</status>
    <generatedAt>2025-10-17</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-3.10.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user with too few favorite recipes</asA>
    <iWant>clear guidance on what's needed</iWant>
    <soThat>I can successfully generate a meal plan</soThat>
    <tasks>
### Task 1: Implement Pre-flight Validation (AC: 1, 2, 6)
- Add validation check in meal plan generation route handler
  - Query favorite recipe count: `SELECT COUNT(*) FROM recipes WHERE user_id=? AND is_favorite=true`
  - Compare count against minimum threshold (7 recipes)
  - If insufficient, return validation error instead of executing algorithm
- Create `InsufficientRecipesError` in meal planning domain error types
  - Include current_count and required_count fields
  - Map to HTTP 422 Unprocessable Entity status
- Write unit tests:
  - Test: count &lt; 7 returns validation error
  - Test: count &gt;= 7 proceeds to generation
  - Test: error includes correct counts in message

### Task 2: Create Helpful Error Template (AC: 2, 3, 4, 5)
- Create or update error display template component
  - Render error message with dynamic count: "You need at least 7 favorite recipes... You currently have {count}."
  - Calculate and display recipes needed: {7 - count} more recipes
  - Use friendly styling: soft orange/yellow background, informational icon (not red alert)
- Add action buttons to error message
  - "Add Recipe" button linking to `/recipes/new`
  - "Discover Recipes" button linking to `/discover`
  - Buttons styled as primary CTAs for clear user action
- Write integration tests:
  - Test: error page renders with correct message
  - Test: action links navigate to correct routes
  - Test: friendly styling applied (no alarming colors)

### Task 3: Real-time Count Update (AC: 7)
- Add favorite count display to dashboard
  - Query and display: "You have {count} favorite recipes"
  - Update count when user favorites/unfavorites recipe
  - Show progress toward minimum: "{count}/7 recipes (need {7-count} more to generate plan)"
- Add conditional button state on dashboard
  - If count &lt; 7: Button shows "Add More Recipes" (disabled generation)
  - If count &gt;= 7: Button shows "Generate Meal Plan" (enabled)
  - Tooltip explains requirement when hovering disabled button
- Write E2E tests with Playwright:
  - Test: user with 5 recipes sees helpful guidance
  - Test: user adds 2 more recipes, count updates, button enables
  - Test: user clicks "Generate Meal Plan" with sufficient recipes, generation succeeds
</tasks>
  </story>

  <acceptanceCriteria>
1. "Generate Meal Plan" button visible but triggers validation
2. Error message: "You need at least 7 favorite recipes to generate a weekly meal plan. You currently have {count}."
3. Helpful guidance: "Add {7 - count} more recipes to get started!"
4. Direct link to "Add Recipe" page or "Discover Recipes" page
5. Error displayed with friendly styling (not alarming red)
6. Validation prevents wasted algorithm execution
7. Count updates in real-time as user adds/removes favorites
</acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic 3: Intelligent Meal Planning Engine - Story 3.10</title>
        <section>Story 3.10: Handle Insufficient Recipes for Generation</section>
        <snippet>
**As a** user with too few favorite recipes
**I want** clear guidance on what's needed
**So that** I can successfully generate a meal plan

**Prerequisites:** User has &lt;7 favorite recipes

**Acceptance Criteria:**
1. "Generate Meal Plan" button visible but triggers validation
2. Error message: "You need at least 7 favorite recipes to generate a weekly meal plan. You currently have {count}."
3. Helpful guidance: "Add {7 - count} more recipes to get started!"
4. Direct link to "Add Recipe" page or "Discover Recipes" page
5. Error displayed with friendly styling (not alarming red)
6. Validation prevents wasted algorithm execution
7. Count updates in real-time as user adds/removes favorites

**Technical Notes:**
- Pre-flight validation before algorithm execution
- Read model query: COUNT(recipes WHERE is_favorited=true AND user_id=?)
- Minimum threshold configurable (default 7 for 7 days * 1 meal, flexible for MVP)
        </snippet>
      </doc>

      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-3.md</path>
        <title>Technical Specification: Intelligent Meal Planning Engine</title>
        <section>Validation Logic and Error Handling</section>
        <snippet>
**Pre-flight Validation:**
- Minimum threshold: **7 favorite recipes** (configurable via domain constant)
- Validation occurs before algorithm execution to avoid wasted computation
- Pre-flight check in route handler: `crates/meal_planning/src/read_model.rs` query
- Domain error type: `MealPlanningError::InsufficientRecipes { current: usize, required: usize }`

**HTTP Routes (Server-Rendered HTML):**
```rust
async fn generate_meal_plan(
    State(state): State&lt;AppState&gt;,
    auth: Auth,
) -&gt; Result&lt;Redirect, AppError&gt; {
    // 1. Query user profile and favorite recipes
    let user_profile = query_user_profile(auth.user_id, &amp;state.db).await?;
    let favorite_recipes = query_favorite_recipes(auth.user_id, &amp;state.db).await?;

    // 2. Validate minimum recipe count
    if favorite_recipes.len() &lt; 7 {
        return Err(AppError::InsufficientRecipes {
            current: favorite_recipes.len(),
            required: 7,
        });
    }
    // ... continue with generation
}
```

**Error Display:**
- HTTP 422 Unprocessable Entity status
- Friendly styling (soft orange/yellow background, informational icon)
- Actionable guidance with direct navigation links
- Real-time count updates (TwinSpark optional enhancement)
        </snippet>
      </doc>

      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>4.1.2 Form Actions and Mutations - Error Handling</section>
        <snippet>
**Form Validation Pattern:**
```rust
#[derive(Deserialize, Validate)]
struct CreateRecipeForm {
    #[validate(length(min = 3, max = 200))]
    title: String,
    // ...
}

async fn handler(
    auth: Auth,
    Form(form): Form&lt;CreateRecipeForm&gt;,
) -&gt; Result&lt;impl IntoResponse, AppError&gt; {
    // 1. Validate
    form.validate()?;

    // 2. Invoke domain command
    let cmd = CreateRecipeCommand { ... };
    let recipe_id = recipe::create_recipe(cmd).await?;

    // 3. Redirect to success page (PRG pattern)
    Ok(Redirect::to(&amp;format!("/recipes/{}", recipe_id)))
}
```

**Error Handling:**
- Validation errors: 422 Unprocessable Entity with form re-rendered with errors
- Domain errors (e.g., "Recipe limit reached") displayed as flash messages
- Unexpected errors logged, user sees generic error page

**Response Patterns:**
- Success: 302 Redirect (PRG pattern) or 200 OK with HTML fragment (TwinSpark)
- Validation error: 422 Unprocessable Entity with form re-rendered with errors
- Auth error: 401 Unauthorized, redirect to /login
- Not found: 404 with error page
        </snippet>
      </doc>

      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>3.2 Data Models - recipes table</section>
        <snippet>
**recipes table:**
```sql
CREATE TABLE recipes (
  id TEXT PRIMARY KEY,
  user_id TEXT NOT NULL,
  title TEXT NOT NULL,
  ingredients TEXT NOT NULL,     -- JSON array of {name, qty, unit}
  instructions TEXT NOT NULL,    -- JSON array of step strings
  prep_time_min INTEGER,
  cook_time_min INTEGER,
  advance_prep_hours INTEGER,    -- NULL if no advance prep
  serving_size INTEGER,
  is_favorite BOOLEAN DEFAULT FALSE,
  is_shared BOOLEAN DEFAULT FALSE,
  complexity TEXT,               -- simple|moderate|complex
  cuisine TEXT,
  created_at TEXT NOT NULL,
  updated_at TEXT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE INDEX idx_recipes_user_id ON recipes(user_id);
CREATE INDEX idx_recipes_favorite ON recipes(user_id, is_favorite);
CREATE INDEX idx_recipes_shared ON recipes(is_shared) WHERE is_shared = TRUE;
```

**Favorite Recipe Query Pattern:**
```sql
SELECT COUNT(*) as count
FROM recipes
WHERE user_id = ? AND is_favorite = TRUE
```
        </snippet>
      </doc>

      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>UX Design Principles</section>
        <snippet>
**Principle 5: Graceful Failure Recovery**
When things go wrong, offer immediate solutions rather than error messages. Can't generate meal plan → suggest adding more recipes with "Add Recipe" button. Network unavailable → show cached content with sync indicator. Failed payment → inline retry with alternative payment method option.

**Principle 4: Instant Feedback and Confirmation**
Provide immediate visual confirmation for all user actions. Recipe saved → green checkmark animation. Meal replaced → calendar updates in real-time. Shopping list item tapped → strike-through with haptic feedback. Eliminate user uncertainty about system state.

**Principle 7: Minimize Input Friction**
Reduce manual data entry through smart defaults, autocomplete, and progressive enhancement. Recipe entry suggests common ingredient units, auto-categorizes ingredients, and learns user's frequently used items. Profile preferences inferred from early behavior and refined through usage.
        </snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/error.rs</path>
        <section>AppError - InsufficientRecipes variant (lines 29-30, 165-175)</section>
        <snippet>
// Error variant already exists for insufficient recipes:
#[error("Insufficient recipes: need at least {required}, have {current}")]
InsufficientRecipes { current: usize, required: usize },

// Error handler maps to HTTP 422 Unprocessable Entity with friendly message:
AppError::InsufficientRecipes { current, required } =&gt; (
    StatusCode::UNPROCESSABLE_ENTITY,
    "Not Enough Recipes".to_string(),
    format!(
        "You need at least {} favorite recipes to generate a meal plan. You currently have {}. Add {} more recipe{} to get started!",
        required,
        current,
        required - current,
        if required - current &gt; 1 { "s" } else { "" }
    ),
),
        </snippet>
        <relevance>Error type and HTTP response already implemented - AC 2, 3, 6</relevance>
      </file>

      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/meal_plan.rs</path>
        <section>post_generate_meal_plan - Validation logic (lines 212-250)</section>
        <snippet>
/// POST /plan/generate - Generate new meal plan
/// AC-10: If insufficient recipes (&lt;7 favorites), display helpful error
pub async fn post_generate_meal_plan(
    Extension(auth): Extension&lt;Auth&gt;,
    State(state): State&lt;AppState&gt;,
) -&gt; Result&lt;impl IntoResponse, AppError&gt; {
    // ... lock acquisition code ...

    // Query user's favorited recipes
    let favorites = query_recipes_by_user(&amp;auth.user_id, true, &amp;state.db_pool).await?;

    // AC-10: Validate minimum 7 favorite recipes
    if favorites.len() &lt; 7 {
        return Err(AppError::InsufficientRecipes {
            current: favorites.len(),
            required: 7,
        });
    }

    // ... continue with generation ...
}
        </snippet>
        <relevance>Validation already exists in generation route - Need to add pre-flight check to dashboard button</relevance>
      </file>

      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/dashboard.rs</path>
        <section>DashboardTemplate and dashboard_handler (lines 34-86)</section>
        <snippet>
#[derive(Template)]
#[template(path = "pages/dashboard.html")]
pub struct DashboardTemplate {
    pub user: Option&lt;()&gt;,
    pub todays_meals: Option&lt;TodaysMealsData&gt;,
    pub has_meal_plan: bool,
    pub recipe_count: usize,
    pub favorite_count: usize,  // Already available in template context
}

pub async fn dashboard_handler(
    Extension(auth): Extension&lt;Auth&gt;,
    State(state): State&lt;AppState&gt;,
) -&gt; Result&lt;Html&lt;String&gt;, AppError&gt; {
    // Query today's meals with recipe details
    let todays_meal_assignments =
        MealPlanQueries::get_todays_meals(&amp;auth.user_id, &amp;state.db_pool).await?;

    // Query recipe stats for dashboard cards
    let (recipe_count, favorite_count) = query_recipe_count(&amp;auth.user_id, &amp;state.db_pool).await?;

    // ... template rendering ...
}
        </snippet>
        <relevance>Dashboard already queries favorite_count - Need to pass to template for conditional button</relevance>
      </file>

      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/read_model.rs</path>
        <section>query_recipe_count function (lines 440-466)</section>
        <snippet>
/// Query recipe count stats for user dashboard.
/// Returns (total_count, favorite_count) tuple for dashboard stats display.
pub async fn query_recipe_count(user_id: &amp;str, pool: &amp;SqlitePool) -&gt; RecipeResult&lt;(usize, usize)&gt; {
    // Count total recipes
    let total_count: (i64,) = sqlx::query_as(
        r#"
        SELECT COUNT(*) as count
        FROM recipes
        WHERE user_id = ?1 AND deleted_at IS NULL
        "#,
    )
    .bind(user_id)
    .fetch_one(pool)
    .await?;

    // Count favorite recipes
    let favorite_count: (i64,) = sqlx::query_as(
        r#"
        SELECT COUNT(*) as count
        FROM recipes
        WHERE user_id = ?1 AND is_favorite = 1 AND deleted_at IS NULL
        "#,
    )
    .bind(user_id)
    .fetch_one(pool)
    .await?;

    Ok((total_count.0 as usize, favorite_count.0 as usize))
}
        </snippet>
        <relevance>Function already exists to query favorite count - Used in dashboard handler</relevance>
      </file>

      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/templates/pages/error.html</path>
        <section>Generic error page template (lines 1-30)</section>
        <snippet>
{% extends "base.html" %}

{% block content %}
&lt;div class="min-h-screen flex items-center justify-center py-12"&gt;
    &lt;div class="max-w-md w-full bg-white rounded-lg shadow-md p-8"&gt;
        &lt;div class="text-center"&gt;
            &lt;svg class="mx-auto h-12 w-12 text-red-500" ...&gt;&lt;/svg&gt;
            &lt;h1 class="mt-4 text-3xl font-bold text-gray-900"&gt;{{ error_title }}&lt;/h1&gt;
            &lt;p class="mt-2 text-sm text-gray-500"&gt;Error {{ status_code }}&lt;/p&gt;
            &lt;p class="mt-4 text-gray-600"&gt;{{ error_message }}&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class="mt-6 space-y-3"&gt;
            &lt;a href="/recipes" class="w-full block text-center bg-blue-600 text-white py-2 px-4 rounded-md ..."&gt;
                Go to My Recipes
            &lt;/a&gt;
            &lt;a href="/" class="w-full block text-center bg-gray-100 text-gray-700 py-2 px-4 rounded-md ..."&gt;
                Go Home
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
{% endblock %}
        </snippet>
        <relevance>Generic error page - Need to customize for InsufficientRecipes with action buttons per AC 4, 5</relevance>
      </file>

      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/templates/pages/dashboard.html</path>
        <section>Generate Meal Plan button (lines 152-183)</section>
        <snippet>
&lt;!-- Generate Meal Plan Card --&gt;
&lt;div class="bg-gradient-to-br from-primary-500 to-primary-600 rounded-lg shadow-lg p-6 text-white col-span-full lg:col-span-2"&gt;
    &lt;div class="flex items-start justify-between"&gt;
        &lt;div class="flex-1"&gt;
            &lt;h2 class="text-2xl font-bold mb-2"&gt;🍽️ Weekly Meal Plan&lt;/h2&gt;
            {% if has_meal_plan %}
            &lt;!-- ... existing meal plan UI ... --&gt;
            {% else %}
            &lt;p class="text-primary-100 mb-4"&gt;
                Let us help you plan your week! Generate a personalized meal plan based on your favorite recipes.
            &lt;/p&gt;
            &lt;button
                ts-req="/plan/generate"
                ts-req-method="POST"
                ts-trigger="click"
                class="px-8 py-4 bg-white text-primary-600 rounded-lg hover:bg-primary-50 transition-colors font-bold text-lg shadow-md"&gt;
                    Generate Meal Plan
                &lt;/button&gt;
            {% endif %}
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
        </snippet>
        <relevance>Current dashboard template - Need to add conditional logic and real-time count display per AC 7</relevance>
      </file>
    </code>

    <dependencies>
      <framework>
        <name>Axum 0.8</name>
        <purpose>HTTP routing and request handling framework</purpose>
        <relevant_features>
          - Form handling with axum::Form
          - Response types: Html, Redirect, IntoResponse
          - Extension and State extractors for auth and app state
          - Status code mapping (StatusCode::UNPROCESSABLE_ENTITY)
        </relevant_features>
      </framework>

      <framework>
        <name>Askama 0.14</name>
        <purpose>Type-safe HTML template rendering</purpose>
        <relevant_features>
          - Templates in templates/pages/ and templates/components/
          - Template macro: #[derive(Template)] with #[template(path = "...")]
          - Conditional rendering: {% if %}, {% else %}
          - Variable interpolation: {{ variable_name }}
        </relevant_features>
      </framework>

      <framework>
        <name>SQLx 0.8</name>
        <purpose>Async SQL database access with compile-time query validation</purpose>
        <relevant_features>
          - SqlitePool for connection pooling
          - query_as for type-safe queries
          - COUNT(*) queries for favorite recipe validation
        </relevant_features>
      </framework>

      <framework>
        <name>TwinSpark (client-side)</name>
        <purpose>Declarative AJAX with HTML attributes for progressive enhancement</purpose>
        <relevant_features>
          - ts-req attribute for AJAX requests
          - ts-req-method for HTTP method
          - ts-trigger for event binding
          - ts-target and ts-swap for DOM updates
        </relevant_features>
      </framework>

      <library>
        <name>recipe::read_model</name>
        <purpose>Recipe read model queries</purpose>
        <functions>
          - query_recipe_count(user_id, pool) -&gt; Result&lt;(usize, usize)&gt;
          - query_recipes_by_user(user_id, is_favorite, pool) -&gt; Result&lt;Vec&lt;RecipeReadModel&gt;&gt;
        </functions>
      </library>

      <constant>
        <name>MINIMUM_RECIPES_FOR_GENERATION</name>
        <value>7</value>
        <location>Hardcoded in validation logic (lines 246, 894 in meal_plan.rs)</location>
        <note>Should be extracted to domain constant for configurability</note>
      </constant>
    </dependencies>
  </artifacts>

  <constraints>
    <technical>
      <constraint>Server-rendered HTML with progressive enhancement (no SPA framework)</constraint>
      <constraint>TwinSpark for AJAX interactions without JavaScript framework</constraint>
      <constraint>Askama templates must be type-safe and compile-time validated</constraint>
      <constraint>All database queries must use SQLx with type-safe bindings</constraint>
      <constraint>Error responses must use HTTP 422 Unprocessable Entity for validation failures</constraint>
      <constraint>Minimum 7 favorite recipes required for meal plan generation (configurable domain rule)</constraint>
    </technical>

    <architectural>
      <constraint>Follow existing error handling pattern in src/error.rs AppError enum</constraint>
      <constraint>HTTP responses must follow PRG (Post-Redirect-Get) pattern for form submissions</constraint>
      <constraint>Error pages must extend base.html template for consistent layout</constraint>
      <constraint>Use existing query_recipe_count function from recipe::read_model crate</constraint>
      <constraint>Dashboard template context already includes favorite_count - reuse existing data flow</constraint>
    </architectural>

    <ux>
      <constraint>Error styling must be friendly (soft orange/yellow, informational icon) not alarming red - AC 5</constraint>
      <constraint>Error message must include current count and required count - AC 2</constraint>
      <constraint>Provide actionable guidance with direct links to add recipes - AC 3, 4</constraint>
      <constraint>Real-time count updates when user favorites/unfavorites recipes - AC 7</constraint>
      <constraint>Button state should be conditional based on favorite count - AC 1, 7</constraint>
    </ux>

    <data>
      <constraint>Favorite count query: SELECT COUNT(*) FROM recipes WHERE user_id=? AND is_favorite=1 AND deleted_at IS NULL</constraint>
      <constraint>Validation threshold: 7 recipes (matches 7 days * 1 meal for MVP weekly plan)</constraint>
      <constraint>Error includes dynamic counts for user clarity</constraint>
    </data>
  </constraints>

  <interfaces>
    <route>
      <method>POST</method>
      <path>/plan/generate</path>
      <handler>src/routes/meal_plan.rs::post_generate_meal_plan</handler>
      <current_behavior>
        - Validates favorite count &gt;= 7
        - Returns AppError::InsufficientRecipes if validation fails
        - Error handler renders generic error page with message
      </current_behavior>
      <required_changes>
        - No changes needed - validation already implemented
        - Error response already returns 422 with helpful message
      </required_changes>
    </route>

    <template>
      <path>templates/pages/dashboard.html</path>
      <context>DashboardTemplate { user, todays_meals, has_meal_plan, recipe_count, favorite_count }</context>
      <current_behavior>
        - Displays favorite_count in "Favorites" card (line 224)
        - "Generate Meal Plan" button always visible when no plan exists
        - Button triggers POST /plan/generate via TwinSpark
      </current_behavior>
      <required_changes>
        - Add conditional logic: if favorite_count &lt; 7, show guidance instead of enabled button
        - Display progress: "You have {count}/7 favorite recipes" when count &lt; 7
        - Add tooltip/message explaining requirement
        - Optionally disable button or show "Add More Recipes" state - AC 7
      </required_changes>
    </template>

    <template>
      <path>templates/pages/error.html</path>
      <context>ErrorPageTemplate { status_code, error_title, error_message, user }</context>
      <current_behavior>
        - Generic error page with red alert styling
        - Shows error title, status code, and message
        - Provides "Go to My Recipes" and "Go Home" links
      </current_behavior>
      <required_changes>
        - Customize styling for InsufficientRecipes error (friendly orange/yellow) - AC 5
        - Add specific action buttons: "Add Recipe" → /recipes/new, "Discover Recipes" → /discover - AC 4
        - Consider creating specialized component template for insufficient recipes error
      </required_changes>
    </template>

    <error_handler>
      <location>src/error.rs::AppError::IntoResponse (lines 165-175)</error_handler>
      <current_implementation>
        - Returns 422 status code
        - Error title: "Not Enough Recipes"
        - Error message includes current count, required count, and recipes needed
      </current_implementation>
      <evaluation>Already meets AC 2, 3, 6 - Message is clear and includes counts</evaluation>
      <optional_enhancement>Could improve error template rendering to use specialized component with better styling and action buttons</optional_enhancement>
    </error_handler>
  </interfaces>

  <tests>
    <standards>
      <pattern>Unit tests use #[test] or #[tokio::test] attributes</pattern>
      <pattern>Integration tests create in-memory SQLite database with create_test_db() helper</pattern>
      <pattern>Tests follow Arrange-Act-Assert pattern with clear comments</pattern>
      <pattern>Database tests run evento migrations + app migrations before testing</pattern>
      <pattern>Helper functions create test users, recipes with create_test_user(), create_test_recipes()</pattern>
      <pattern>Error cases verified by checking Result&lt;T, E&gt; returns Err variant with expected error type</pattern>
      <pattern>HTTP route tests would use axum::test (if implemented) or integration test with test server</pattern>
    </standards>

    <locations>
      <location>
        <path>tests/meal_plan_integration_tests.rs</path>
        <purpose>Integration tests for meal planning features with evento and read model projections</purpose>
        <pattern>Create test DB → emit events → verify read model state</pattern>
      </location>
      <location>
        <path>src/routes/meal_plan.rs</path>
        <purpose>Route handler unit tests (lines 965-1105)</purpose>
        <pattern>Test helper functions like build_day_data() with mock data structures</pattern>
      </location>
      <location>
        <path>src/routes/dashboard.rs</path>
        <purpose>Dashboard handler unit tests (lines 130-259)</purpose>
        <pattern>Test map_to_todays_meals() with various meal assignment scenarios</pattern>
      </location>
    </locations>

    <ideas>
      <test>
        <name>test_insufficient_recipes_error_returned_on_generation</name>
        <type>Integration test</type>
        <description>
          Arrange: Create user with only 5 favorite recipes
          Act: POST /plan/generate
          Assert: Returns HTTP 422 with AppError::InsufficientRecipes { current: 5, required: 7 }
        </description>
        <acceptance_criteria>AC 1, 2, 6</acceptance_criteria>
      </test>

      <test>
        <name>test_generation_succeeds_with_sufficient_recipes</name>
        <type>Integration test</type>
        <description>
          Arrange: Create user with 7 favorite recipes
          Act: POST /plan/generate
          Assert: Returns 302 Redirect to /plan (successful generation)
        </description>
        <acceptance_criteria>AC 1, 6</acceptance_criteria>
      </test>

      <test>
        <name>test_dashboard_shows_recipe_progress_when_insufficient</name>
        <type>Template rendering test or E2E with Playwright</type>
        <description>
          Arrange: User with 4 favorite recipes
          Act: GET /dashboard
          Assert:
            - Template shows "You have 4/7 favorite recipes"
            - Generate button is disabled or shows "Add More Recipes"
            - Tooltip/message explains requirement
        </description>
        <acceptance_criteria>AC 7</acceptance_criteria>
      </test>

      <test>
        <name>test_error_page_displays_friendly_styling</name>
        <type>Template rendering test or E2E with Playwright</type>
        <description>
          Arrange: Trigger InsufficientRecipes error (e.g., via test helper)
          Act: Render error page
          Assert:
            - Background color is soft orange/yellow (not red)
            - Icon is informational (not alert/warning triangle)
            - Error message includes current and required counts
            - Action buttons present: "Add Recipe" and "Discover Recipes"
        </description>
        <acceptance_criteria>AC 2, 3, 4, 5</acceptance_criteria>
      </test>

      <test>
        <name>test_favorite_count_updates_in_real_time</name>
        <type>E2E test with Playwright</type>
        <description>
          Arrange: User with 6 favorite recipes on dashboard
          Act:
            1. Navigate to recipe detail page
            2. Click "Favorite" button (unfavorite)
            3. Navigate back to dashboard
          Assert: Favorite count shows 5/7, button remains disabled
          Act:
            1. Favorite 2 more recipes
            2. Return to dashboard
          Assert: Favorite count shows 7/7, "Generate Meal Plan" button now enabled
        </description>
        <acceptance_criteria>AC 7</acceptance_criteria>
      </test>

      <test>
        <name>test_regenerate_also_validates_minimum_recipes</name>
        <type>Integration test</type>
        <description>
          Arrange: User has active meal plan, unfavorites recipes until only 5 remain
          Act: POST /plan/regenerate
          Assert: Returns HTTP 422 with InsufficientRecipes error (validation applies to regeneration too)
        </description>
        <acceptance_criteria>AC 6 (validation prevents wasted algorithm execution)</acceptance_criteria>
      </test>
    </ideas>
  </tests>
</story-context>
