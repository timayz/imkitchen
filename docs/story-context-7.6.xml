<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>7</epicId>
    <storyId>7.6</storyId>
    <title>Shopping List Generation</title>
    <status>Draft</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-7.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>meal planning system</asA>
    <iWant>generate aggregated shopping lists from weekly meal assignments</iWant>
    <soThat>users can shop efficiently for all ingredients in one trip</soThat>
    <tasks>
      - Implement shopping list generation function (AC: 1)
        - Create function in crates/meal_planning/src/algorithm.rs
        - Signature: pub fn generate_shopping_list_for_week(meal_assignments: &amp;[MealAssignment], recipes: &amp;[Recipe], week_start_date: Date) -> ShoppingList
        - Return ShoppingList struct

      - Load recipes from assignments (AC: 2)
        - Extract recipe_id from each MealAssignment
        - Also extract accompaniment_recipe_id if Some
        - Look up full Recipe structs from recipes slice
        - Collect all recipes (mains + accompaniments) for ingredient extraction

      - Extract ingredients from all recipes (AC: 3)
        - Iterate through loaded recipes
        - Access recipe.ingredients: Vec&lt;Ingredient&gt;
        - Collect all Ingredient structs into flat list
        - Total ingredients = sum across all 21 meals + accompaniments

      - Aggregate duplicate ingredients (AC: 5)
        - Group ingredients by ingredient.name (case-insensitive)
        - Sum ingredient.quantity for duplicates
        - Keep first unit (assume consistent units, conversion out of scope)
        - Track from_recipe_ids for traceability
        - Example: "onion 2 whole" + "onion 1 whole" = "onion 3 whole"

      - Categorize ingredients (AC: 4)
        - Map ingredient names to categories:
          * Produce: vegetables, fruits (onion, tomato, apple, lettuce)
          * Dairy: milk, cheese, butter, yogurt, cream
          * Meat: chicken, beef, pork, fish, seafood
          * Grains: rice, pasta, bread, flour, oats
          * Pantry: oils, spices, canned goods, condiments
          * Frozen: frozen vegetables, ice cream
        - Create ShoppingCategory per category
        - Assign ingredients to categories
        - Use simple keyword matching (e.g., "chicken" → Meat category)

      - Construct ShoppingList result (AC: 6)
        - Generate UUID for id
        - Set meal_plan_id (from assignments)
        - Set week_start_date
        - Create categories: Vec&lt;ShoppingCategory&gt;
        - Each category has name and items: Vec&lt;ShoppingItem&gt;
        - Return ShoppingList

      - Include main and accompaniment ingredients (AC: 7)
        - Verify both recipe_id and accompaniment_recipe_id recipes loaded
        - Test that accompaniment ingredients appear in final list

      - Write unit tests (AC: 8)
        - Test single meal assignment (3 ingredients)
        - Test duplicate aggregation (2 onions + 1 onion = 3)
        - Test categorization (chicken → Meat, onion → Produce)
        - Test full week (21 assignments) with realistic recipes
        - Test accompaniment ingredient inclusion
        - Test empty meal assignments returns empty shopping list
        - Test case-insensitive ingredient matching ("Onion" vs "onion")
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Function `generate_shopping_list_for_week` implemented
    2. Loads recipes from assignments (main + accompaniments)
    3. Aggregates ingredients (extracts from all recipes in week)
    4. Groups by category (Produce, Dairy, Meat, Grains, Pantry, Frozen)
    5. Combines duplicates (2 onions + 1 onion = 3 onions, same ingredient name)
    6. Returns `ShoppingList` with categorized items
    7. Includes both main AND accompaniment ingredients
    8. Unit tests cover aggregation and categorization
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>Section 3.6 - Shopping List Generation</section>
        <snippet>
Shopping list generation per week via `generate_shopping_list_for_week`:
- Loads recipes from assignments (main + accompaniments)
- Aggregates ingredients (extracts from all recipes in week)
- Groups by category (Produce, Dairy, Meat, Grains, Pantry, Frozen)
- Combines duplicates (2 onions + 1 onion = 3 onions, same ingredient name)
- Returns `ShoppingList` with categorized items
- Performance target: &lt;100ms per week
        </snippet>
      </doc>

      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Data Models and Contracts</title>
        <section>Shopping List Structures</section>
        <snippet>
pub struct ShoppingList {
    id: String,                     // UUID
    meal_plan_id: String,
    week_start_date: Date,
    categories: Vec&lt;ShoppingCategory&gt;,
}

pub struct ShoppingCategory {
    name: String,                   // Produce, Dairy, Meat, Grains, Pantry, Frozen, Other
    items: Vec&lt;ShoppingItem&gt;,
}

pub struct ShoppingItem {
    ingredient_name: String,
    quantity: f32,
    unit: String,
    from_recipe_ids: Vec&lt;RecipeId&gt;, // Traceability
}

pub struct Ingredient {
    name: String,
    quantity: f32,
    unit: String,
    recipe_id: RecipeId,            // Added for traceability
}
        </snippet>
      </doc>

      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Workflows and Sequencing</title>
        <section>Shopping List Flow</section>
        <snippet>
Call generate_shopping_list_for_week(week.meal_assignments, recipes):
├─ Load all recipes referenced in assignments (main + accompaniments)
├─ Aggregate ingredients (combine duplicates by name)
├─ Categorize by ingredient type (Produce, Dairy, Meat, Grains, Pantry, Frozen)
└─ Return ShoppingList

Category Keywords Map:
const PRODUCE_KEYWORDS: &amp;[&amp;str] = &amp;["onion", "tomato", "potato", "lettuce", "carrot", "apple", "banana"];
const DAIRY_KEYWORDS: &amp;[&amp;str] = &amp;["milk", "cheese", "butter", "yogurt", "cream"];
const MEAT_KEYWORDS: &amp;[&amp;str] = &amp;["chicken", "beef", "pork", "fish", "salmon", "shrimp", "turkey"];
const GRAINS_KEYWORDS: &amp;[&amp;str] = &amp;["rice", "pasta", "bread", "flour", "oats", "quinoa"];
const PANTRY_KEYWORDS: &amp;[&amp;str] = &amp;["oil", "salt", "pepper", "sugar", "vinegar", "sauce", "spice"];
const FROZEN_KEYWORDS: &amp;[&amp;str] = &amp;["frozen", "ice cream"];
        </snippet>
      </doc>

      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Performance Requirements</title>
        <section>Shopping List Performance</section>
        <snippet>
Shopping list aggregation: &lt;100ms per week
- Use Vec filtering instead of database queries for in-memory performance
- Pre-filter recipes by dietary restrictions once at start
- Cache ingredient data in HashMap for O(1) lookups
- Avoid cloning large Recipe structs—use references where possible
        </snippet>
      </doc>

      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Unit Conversion (Out of Scope)</title>
        <section>Technical Debt</section>
        <snippet>
MVP assumes consistent units (e.g., all "onions" use "whole")
- "1 cup flour" + "2 cups flour" = "3 cups flour" ✓
- "1 cup flour" + "100g flour" = separate items (not converted) ⚠️
- Documented technical debt for future enhancement
        </snippet>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/events.rs</path>
        <kind>struct</kind>
        <symbol>MealAssignment</symbol>
        <lines>1-50</lines>
        <reason>MealAssignment structure contains recipe_id and accompaniment_recipe_id fields needed to identify which recipes to load for shopping list generation</reason>
      </artifact>

      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/events.rs</path>
        <kind>struct</kind>
        <symbol>Ingredient</symbol>
        <lines>8-13</lines>
        <reason>Ingredient structure defines the data model with name, quantity, and unit fields that must be aggregated for shopping lists</reason>
      </artifact>

      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/aggregation.rs</path>
        <kind>service</kind>
        <symbol>IngredientAggregationService</symbol>
        <lines>35-241</lines>
        <reason>Existing ingredient aggregation service with unit normalization and quantity summing logic that can be referenced for shopping list implementation</reason>
      </artifact>

      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>module</kind>
        <symbol>algorithm</symbol>
        <lines>1-50</lines>
        <reason>Main algorithm module where generate_shopping_list_for_week function should be implemented alongside existing meal planning functions</reason>
      </artifact>

      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/lib.rs</path>
        <kind>module</kind>
        <symbol>lib</symbol>
        <lines>1-29</lines>
        <reason>Public API exports showing how to expose new shopping list generation function to other modules</reason>
      </artifact>
    </code>

    <dependencies>
      <rust>
        <crate name="uuid" version="1.10+">Generate shopping_list_id (v4 UUIDs)</crate>
        <crate name="chrono" version="0.4+">Date handling for week_start_date (ISO 8601)</crate>
        <crate name="serde" version="1.0+">Serialization for ShoppingList, ShoppingCategory, ShoppingItem</crate>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    - TDD enforced: Write tests first, implement to pass (cargo test, &gt;80% coverage)
    - No external HTTP/IO in algorithm functions (pure business logic)
    - Performance target: &lt;100ms for shopping list generation per week
    - Unit conversion out of scope for MVP - assume consistent units per ingredient
    - Case-insensitive ingredient name matching for duplicate detection
    - Simple keyword matching for ingredient categorization (not perfect, but good enough for MVP)
    - Accompaniment ingredients MUST be included in shopping lists
    - Empty meal assignments should return empty shopping list (not error)
    - Uncategorized ingredients go to "Other" category as fallback
  </constraints>

  <interfaces>
    <interface>
      <name>generate_shopping_list_for_week</name>
      <kind>function</kind>
      <signature>pub fn generate_shopping_list_for_week(meal_assignments: &amp;[MealAssignment], recipes: &amp;[Recipe], week_start_date: Date) -> ShoppingList</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
    </interface>

    <interface>
      <name>Ingredient</name>
      <kind>struct</kind>
      <signature>pub struct Ingredient { pub name: String, pub quantity: f32, pub unit: String }</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/recipe/src/events.rs</path>
    </interface>

    <interface>
      <name>MealAssignment</name>
      <kind>struct</kind>
      <signature>pub struct MealAssignment { pub recipe_id: String, pub accompaniment_recipe_id: Option&lt;String&gt;, ... }</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/events.rs</path>
    </interface>

    <interface>
      <name>IngredientAggregationService::aggregate</name>
      <kind>method</kind>
      <signature>pub fn aggregate(ingredients: Vec&lt;(String, f32, String)&gt;) -> Result&lt;Vec&lt;(String, f32, String)&gt;, String&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/shopping/src/aggregation.rs</path>
    </interface>
  </interfaces>

  <tests>
    <standards>
Test-Driven Development (TDD) enforced for all Epic 7 stories. Write failing tests first, implement minimal code to pass, then refactor. Use built-in Rust #[test] framework with assert_eq!, assert! macros. Target &gt;80% line coverage measured via cargo-tarpaulin. Tests organized in crates/meal_planning/tests/ directory with unit tests in tests/unit/ and integration tests in tests/integration/. All edge cases must have explicit test coverage (empty lists, boundary values, exhaustion scenarios). Deterministic test data with helper functions for realistic Recipe and Ingredient fixtures.
    </standards>

    <locations>
      crates/meal_planning/tests/unit/test_shopping.rs
      crates/meal_planning/src/algorithm.rs (inline #[cfg(test)] mod tests)
    </locations>

    <ideas>
      <idea ac="1">Test generate_shopping_list_for_week function exists and returns ShoppingList struct with correct signature</idea>
      <idea ac="2">Test loading recipes from meal assignments - verify both main recipe_id and accompaniment_recipe_id recipes are loaded when present</idea>
      <idea ac="3">Test ingredient extraction from multiple recipes - verify all ingredients collected into flat list from 21 meal assignments</idea>
      <idea ac="4">Test ingredient categorization - "chicken" goes to Meat category, "onion" to Produce, "milk" to Dairy using keyword matching</idea>
      <idea ac="5">Test duplicate ingredient aggregation - "onion 2 whole" + "onion 1 whole" = "onion 3 whole" with case-insensitive matching</idea>
      <idea ac="6">Test ShoppingList structure - verify id (UUID), meal_plan_id, week_start_date, and categories are correctly populated</idea>
      <idea ac="7">Test accompaniment ingredient inclusion - meal with accompaniment_recipe_id includes both main and side ingredients in shopping list</idea>
      <idea ac="8">Test empty meal assignments - empty Vec returns ShoppingList with empty categories (not error)</idea>
      <idea ac="8">Test case-insensitive ingredient matching - "Onion" and "onion" aggregate together as same ingredient</idea>
      <idea ac="8">Test uncategorized ingredients - ingredients not matching keywords go to "Other" category as fallback</idea>
      <idea ac="8">Test full week scenario - 21 meal assignments (7 days × 3 courses) with realistic recipes produces complete shopping list with all categories</idea>
      <idea ac="8">Test performance - shopping list generation completes in &lt;100ms for typical week (benchmark with criterion crate)</idea>
    </ideas>
  </tests>
</story-context>
