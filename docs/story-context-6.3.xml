<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>6</epicId>
    <storyId>6.3</storyId>
    <title>Update MealPlan Domain Model</title>
    <status>Draft</status>
    <generatedAt>2025-10-25</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-6.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>backend developer</asA>
    <iWant>to extend MealPlan aggregate for multi-week support</iWant>
    <soThat>the system can generate and track multiple weeks</soThat>
    <tasks>
      - Create WeekStatus enum (AC: 3)
      - Create WeekMealPlan struct (AC: 1)
      - Create RotationState struct (AC: 4)
      - Create MultiWeekMealPlan struct (AC: 2)
      - Update MealAssignment struct (AC: 8)
      - Create MultiWeekMealPlanGenerated event (AC: 5)
      - Create SingleWeekRegenerated event (AC: 6)
      - Create AllFutureWeeksRegenerated event (AC: 7)
      - Update MealPlanAggregate with evento handlers (AC: 5, 6, 7)
      - Create comprehensive unit tests (AC: 9, 10)
      - Verify compilation and existing tests (AC: 9, 10)
    </tasks>
  </story>

  <acceptanceCriteria>
    1. WeekMealPlan struct created with fields: end_date, is_locked, generation_batch_id, status
    2. MultiWeekMealPlan struct created
    3. WeekStatus enum created (Future, Current, Past, Archived)
    4. RotationState struct created with tracking fields
    5. MultiWeekMealPlanGenerated event created
    6. SingleWeekRegenerated event created
    7. AllFutureWeeksRegenerated event created
    8. MealAssignment updated with accompaniment_recipe_id field
    9. Unit tests cover all event handlers
    10. All tests pass with >90% coverage
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/architecture-update-meal-planning-enhancements.md" section="1. Multi-Week Meal Plan Generation">
        <title>Multi-Week Meal Plan Generation Design</title>
        <snippet>
          **Generate ALL Possible Weeks:**
          - Algorithm calculates maximum weeks based on favorite recipe counts
          - Generates all weeks simultaneously in single batch
          - Each week gets its own shopping list
          - Maximum 5 weeks generated per batch (hard cap)

          **Week Locking:**
          - Current week (today falls within Monday-Sunday range) becomes **locked**
          - Locked weeks cannot be regenerated
          - Future weeks can be regenerated individually or all at once
        </snippet>
        <relevance>Core design for multi-week architecture and locking rules</relevance>
      </doc>

      <doc path="docs/architecture-update-meal-planning-enhancements.md" section="1.3 Data Model Changes">
        <title>Data Model: WeekMealPlan, MultiWeekMealPlan, RotationState</title>
        <snippet>
          ```rust
          pub struct WeekMealPlan {
              id: String,
              user_id: UserId,
              start_date: Date,
              end_date: Date,
              status: WeekStatus,
              is_locked: bool,
              generation_batch_id: String,
              meal_assignments: Vec&lt;MealAssignment&gt;,
              shopping_list_id: String,
              created_at: DateTime,
          }

          pub enum WeekStatus {
              Future, Current, Past, Archived,
          }

          pub struct RotationState {
              used_main_course_ids: Vec&lt;RecipeId&gt;,  // MUST be unique
              used_appetizer_ids: Vec&lt;RecipeId&gt;,    // can repeat
              used_dessert_ids: Vec&lt;RecipeId&gt;,      // can repeat
              cuisine_usage_count: HashMap&lt;Cuisine, u32&gt;,
              last_complex_meal_date: Option&lt;Date&gt;,
          }
          ```
        </snippet>
        <relevance>Complete struct specifications for AC 1-4</relevance>
      </doc>

      <doc path="docs/architecture-update-meal-planning-enhancements.md" section="1.4 Events">
        <title>Event Schemas for Multi-Week Events</title>
        <snippet>
          ```rust
          #[derive(evento::AggregatorName, bincode::Encode, bincode::Decode)]
          struct MultiWeekMealPlanGenerated {
              generation_batch_id: String,
              user_id: UserId,
              weeks: Vec&lt;WeekMealPlanData&gt;,
              rotation_state: RotationState,
              generated_at: DateTime,
          }

          #[derive(evento::AggregatorName, bincode::Encode, bincode::Decode)]
          struct SingleWeekRegenerated {
              week_id: String,
              week_start_date: Date,
              meal_assignments: Vec&lt;MealAssignment&gt;,
              updated_rotation_state: RotationState,
          }

          #[derive(evento::AggregatorName, bincode::Encode, bincode::Decode)]
          struct AllFutureWeeksRegenerated {
              generation_batch_id: String,
              user_id: UserId,
              weeks: Vec&lt;WeekMealPlanData&gt;,
              preserved_current_week_id: Option&lt;String&gt;,
          }
          ```
        </snippet>
        <relevance>Event schemas for AC 5-7</relevance>
      </doc>

      <doc path="docs/solution-architecture-compact.md" section="13. Testing Strategy">
        <title>Testing Standards</title>
        <snippet>
          **TDD Enforced:** Write test → Red → Implement → Green → Refactor

          **Test Pyramid:**
          - **Unit:** Domain aggregates (evento commands/events)
          - **Integration:** HTTP routes, projections (use `unsafe_oneshot` for sync)
          - **E2E:** Playwright critical flows

          **Projection Testing:**
          ```rust
          evento::subscribe("recipe-projections")
              .aggregator::&lt;Recipe&gt;()
              .handler(project_recipe_to_list_view)
              .unsafe_oneshot(&amp;executor)  // Sync processing for tests
              .await?;
          ```

          **Coverage:** 80% goal (cargo-tarpaulin), CI enforced.
        </snippet>
        <relevance>Testing standards and unsafe_oneshot usage for AC 9-10</relevance>
      </doc>

      <doc path="docs/twinspark.md" section="Core Directives">
        <title>TwinSpark Progressive Enhancement</title>
        <snippet>
          Core directives for server-rendered HTML with progressive enhancement:
          - ts-req: Make request for HTML
          - ts-target: Replace part of page
          - ts-swap: HTML replacement strategy
          - ts-trigger: Event triggering request
        </snippet>
        <relevance>Frontend integration context (not directly used in domain model, but relevant for future UI)</relevance>
      </doc>

      <doc path="docs/ux-specification.md" section="Flow 5: Shopping List Generation">
        <title>Multi-Week Shopping List UX</title>
        <snippet>
          **Shopping List Week Selector:**
          - Week selector dropdown: "This Week", "Next Week", "Week of {date}"
          - Each week generates independent shopping list
          - Progress indicator per week
        </snippet>
        <relevance>Context for shopping_list_id field in WeekMealPlan</relevance>
      </doc>
    </docs>

    <code>
      <artifact path="crates/meal_planning/src/aggregate.rs" kind="struct" symbol="MealPlanAggregate" lines="1-33">
        <reason>Existing aggregate to extend with multi-week support - understand current single-week structure</reason>
      </artifact>

      <artifact path="crates/meal_planning/src/events.rs" kind="struct" symbol="MealAssignment" lines="45-52">
        <reason>MealAssignment struct to extend with accompaniment_recipe_id field (AC 8)</reason>
      </artifact>

      <artifact path="crates/meal_planning/src/events.rs" kind="event" symbol="MealPlanGenerated" lines="60-67">
        <reason>Existing MealPlanGenerated event - pattern to follow for new multi-week events (AC 5-7)</reason>
      </artifact>

      <artifact path="crates/meal_planning/src/aggregate.rs" kind="handler" symbol="meal_plan_generated" lines="74-80">
        <reason>Existing evento handler pattern - template for new event handlers (AC 5-7)</reason>
      </artifact>

      <artifact path="crates/meal_planning/src/rotation.rs" kind="module">
        <reason>Existing rotation state logic - extend for multi-week tracking (AC 4)</reason>
      </artifact>

      <artifact path="crates/recipe/src/types.rs" kind="enum" symbol="Cuisine">
        <reason>Cuisine enum needed for RotationState.cuisine_usage_count HashMap (AC 4)</reason>
      </artifact>

      <artifact path="crates/meal_planning/tests/persistence_tests.rs" kind="test">
        <reason>Existing test patterns using unsafe_oneshot for synchronous event processing (AC 9-10)</reason>
      </artifact>
    </code>

    <dependencies>
      <rust>
        <crate name="evento" version="1.5" features="sqlite">Event sourcing framework</crate>
        <crate name="bincode" version="2.0">Binary serialization for evento events</crate>
        <crate name="serde" version="1.0" features="derive">JSON serialization</crate>
        <crate name="serde_json" version="1.0">JSON parsing for rotation_state_json</crate>
        <crate name="chrono" version="0.4" features="serde">Date/DateTime types</crate>
        <crate name="uuid" version="1.10" features="v4,serde">UUID generation for batch IDs</crate>
        <crate name="anyhow" version="1.0">Error handling</crate>
        <crate name="tokio" version="1.40" features="full">Async runtime for tests</crate>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    **Event Sourcing:**
    - All new events must have #[derive(evento::AggregatorName, bincode::Encode, bincode::Decode)]
    - Use #[serde(default)] or Option types for backwards compatibility
    - Events are immutable - never modify existing event structures

    **Bincode Compatibility:**
    - All aggregate fields must be String types (per existing MealPlanAggregate pattern)
    - Complex types serialized to JSON strings (e.g., rotation_state_json)

    **Rotation State Rules:**
    - Main courses MUST be unique across all weeks (never repeat)
    - Appetizers/desserts CAN repeat after exhausting full list
    - Store rotation state as JSON in RotationState struct and serialize to String for aggregate

    **Week Locking:**
    - Current week (start_date &lt;= today &lt;= end_date) must be locked (is_locked: true)
    - Locked weeks cannot be regenerated (enforced at application layer)
    - Database trigger also enforces locking (from Story 6.1)

    **Testing:**
    - Use unsafe_oneshot instead of run for subscribe (synchronous event processing in tests)
    - Achieve >90% code coverage with cargo-tarpaulin
    - TDD: Write test → Red → Implement → Green → Refactor
  </constraints>

  <interfaces>
    <interface name="evento::Aggregator" kind="trait" signature="impl evento::Aggregator for MealPlanAggregate">
      <path>evento crate</path>
      <description>Evento aggregator trait for event replay and state reconstruction</description>
    </interface>

    <interface name="#[evento::aggregator]" kind="macro" signature="#[evento::aggregator] impl MealPlanAggregate { async fn event_handler(...) }">
      <path>evento crate</path>
      <description>Macro to generate event dispatch logic for aggregate handlers</description>
    </interface>

    <interface name="RotationState" kind="struct" signature="pub struct RotationState { used_main_course_ids: Vec&lt;String&gt;, ... }">
      <path>crates/meal_planning/src/rotation.rs</path>
      <description>Existing rotation state struct to extend for multi-week tracking</description>
    </interface>

    <interface name="Cuisine" kind="enum" signature="pub enum Cuisine { Italian, Indian, Custom(String), ... }">
      <path>crates/recipe/src/types.rs</path>
      <description>Cuisine enum from Story 6.2 for cuisine_usage_count HashMap</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      **Testing Framework:** Rust's built-in test framework with tokio async runtime

      **Unit Testing:**
      - Test each struct serialization/deserialization (serde + bincode round-trips)
      - Test evento event handlers in isolation
      - Test RotationState helper methods

      **Integration Testing:**
      - Test aggregate state reconstruction from event stream
      - Test event replay with new multi-week events
      - Use `unsafe_oneshot` for synchronous event processing:
        ```rust
        evento::subscribe("test-subscription")
            .aggregator::&lt;MealPlan&gt;()
            .handler(handler_fn)
            .unsafe_oneshot(&amp;executor)
            .await?;
        ```

      **Coverage Requirements:**
      - Minimum 90% coverage via cargo-tarpaulin
      - All event handlers must have test coverage
      - Backwards compatibility tests (old events still deserialize)
    </standards>

    <locations>
      - crates/meal_planning/tests/*.rs (integration tests)
      - crates/meal_planning/src/*.rs (inline unit tests with #[cfg(test)])
      - Run tests: `cargo test --package meal_planning`
      - Run coverage: `cargo tarpaulin --package meal_planning`
    </locations>

    <ideas>
      **AC 1-4: Struct Creation Tests**
      - test_week_status_serialization_round_trip() - Verify Future, Current, Past, Archived serialize correctly
      - test_week_meal_plan_creation() - Create WeekMealPlan with all 10 fields
      - test_rotation_state_new_constructor() - Verify RotationState::new() initializes empty vectors
      - test_rotation_state_mark_used_main_course() - Verify main courses tracked uniquely
      - test_rotation_state_is_main_course_used() - Verify uniqueness check
      - test_multi_week_meal_plan_serialization() - Serialize MultiWeekMealPlan with 3 weeks

      **AC 5-7: Event Tests**
      - test_multi_week_meal_plan_generated_event_serialization() - Bincode round-trip
      - test_single_week_regenerated_event_serialization() - Bincode round-trip
      - test_all_future_weeks_regenerated_event_serialization() - Bincode round-trip
      - test_meal_plan_aggregate_handles_multi_week_generated() - Evento handler
      - test_meal_plan_aggregate_handles_single_week_regenerated() - Evento handler
      - test_meal_plan_aggregate_handles_all_future_regenerated() - Evento handler

      **AC 8: MealAssignment Extension**
      - test_meal_assignment_with_accompaniment_id() - Create MealAssignment with accompaniment_recipe_id
      - test_meal_assignment_without_accompaniment_id() - None case

      **AC 9-10: Integration & Coverage**
      - test_aggregate_replay_from_multi_week_events() - Full event stream replay
      - test_backwards_compatibility_old_meal_plan_generated() - Old event still works
      - Measure coverage with: `cargo tarpaulin --package meal_planning --out Xml`
    </ideas>
  </tests>
</story-context>
