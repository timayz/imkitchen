<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>8</storyId>
    <title>Day-of Cooking Reminders</title>
    <status>Draft</status>
    <generatedAt>2025-10-18T23:27:28Z</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-4.8.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user</asA>
    <iWant>reminders for today's meals</iWant>
    <soThat>I remember to cook on schedule</soThat>
    <tasks>
      - Implement day-of cooking reminder scheduling logic (AC: 1, 2, 7)
        - Create daily scheduled job querying today's meal plan assignments
        - Calculate reminder time: meal_time - 1 hour (e.g., dinner at 6pm â†’ reminder at 5pm)
        - Query user profile for availability settings and adjust if needed
        - Filter meals with scheduled_date = today
        - Schedule reminder with reminder_type="day_of_cooking"

      - Implement notification message generation for cooking reminders (AC: 3, 4)
        - Create message template: "{meal_type_label}'s {meal_type}: {recipe_name} - Ready in {total_time}"
        - Calculate total_time from recipe (prep_time + cook_time)
        - Load recipe image URL for notification icon
        - Format notification title and body per AC #3

      - Implement deep linking to recipe detail in cooking mode (AC: 5)
        - Add click_action URL to push notification payload
        - Format URL: /recipes/{recipe_id}?mode=cooking
        - Ensure recipe detail page handles mode=cooking parameter
        - Activate kitchen mode display automatically when parameter present

      - Implement notification action buttons (AC: 6)
        - Add "Dismiss" action button to notification payload
        - Add "Snooze 30 min" action button
        - Add "Snooze 1 hour" action button
        - Implement snooze handler: reschedule notification with new time
        - Implement dismiss handler: mark notification as dismissed in read model

      - Add integration tests (AC: all)
        - Test: Cooking reminder scheduled 1 hour before meal time
        - Test: Reminder message format correct for breakfast/lunch/dinner (AC #3)
        - Test: Recipe image included in notification payload (AC #4)
        - Test: Deep link URL formatted correctly with mode=cooking (AC #5)
        - Test: Snooze 30min reschedules notification correctly (AC #6)
        - Test: Snooze 1hour reschedules notification correctly (AC #6)
        - Test: Dismiss removes notification from pending queue (AC #6)
        - Test: No reminder sent if no meal plan for today

      - Update notification UI for cooking reminders (AC: 4, 5)
        - Display recipe image in notification card
        - Show total cooking time estimate
        - Add "Open Recipe" button with cooking mode deep link
        - Show snooze/dismiss options in notification center
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Cooking reminder sent 1 hour before typical meal time
    2. Default meal times: Breakfast 8am, Lunch 12pm, Dinner 6pm
    3. Reminder content: "Tonight's dinner: {recipe_name} - Ready in {total_time}"
    4. Reminder displays recipe image and key info
    5. Tapping opens recipe detail in cooking mode
    6. User can dismiss or snooze (30 min, 1 hour)
    7. Reminder respects user profile availability settings
    8. No reminder sent if meal already marked as completed (out of MVP scope)
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-4.md</path>
        <title>Technical Specification: Shopping &amp; Preparation Orchestration</title>
        <section>Notifications Crate Architecture</section>
        <snippet>
          **Notifications Crate** (`crates/notifications/`):
          - **Aggregate**: `NotificationAggregate` - Manages notification scheduling, delivery tracking, user preferences
          - **Commands**: `ScheduleReminder`, `SendReminder`, `DismissNotification`, `SubscribeToPush`
          - **Events**: `ReminderScheduled`, `ReminderSent`, `ReminderDismissed`, `PushSubscriptionCreated`
          - **Read Models**: `notifications` table (scheduled/sent reminders), `push_subscriptions` table (browser push endpoints)
          - **Business Logic**:
            - Reminder scheduling algorithm (calculate trigger times based on advance prep hours)
            - Push notification payload generation
            - Background worker (tokio tasks) for scheduled notification delivery
            - VAPID-based Web Push API integration
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Event Sourcing with evento</section>
        <snippet>
          **Event Sourcing**: All state changes recorded as immutable events (evento).
          **CQRS**: Commands write events, queries read from materialized views (read models).
          **DDD**: Bounded contexts (domain crates) with aggregates, commands, events.
          **Server-Side Rendering**: Askama templates compiled at build time, no client-side framework.
          **Progressive Enhancement**: TwinSpark for AJAX behaviors, degrades gracefully without JS.
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic Breakdown - Story 4.8: Day-of Cooking Reminders</title>
        <section>Story 4.8</section>
        <snippet>
          **As a** user
          **I want** reminders for today's meals
          **So that** I remember to cook on schedule

          **Acceptance Criteria:**
          1. Cooking reminder sent 1 hour before typical meal time
          2. Default meal times: Breakfast 8am, Lunch 12pm, Dinner 6pm
          3. Reminder content: "Tonight's dinner: {recipe_name} - Ready in {total_time}"
          4. Reminder displays recipe image and key info
          5. Tapping opens recipe detail in cooking mode
          6. User can dismiss or snooze (30 min, 1 hour)
          7. Reminder respects user profile availability settings
          8. No reminder sent if meal already marked as completed (out of MVP scope)

          **Technical Notes:**
          - Scheduled reminders based on meal type and user preferences
          - Default times configurable, future: user customization
          - Notification with action buttons: "View Recipe", "Dismiss"
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-4.8.md</path>
        <title>Story 4.8: Day-of Cooking Reminders</title>
        <section>Dev Notes - Architecture Patterns and Constraints</section>
        <snippet>
          **Event Sourcing with evento**:
          - ReminderScheduled event contains reminder_type="day_of_cooking" to distinguish from advance_prep and morning reminders
          - Cooking reminders scheduled dynamically: meal_time - 1 hour
          - Snooze functionality implemented via ReminderRescheduled event with updated scheduled_time

          **Scheduler Design**:
          - Background worker runs every 15 minutes, queries meal_plan_slots for today's meals
          - Query pattern: `SELECT * FROM meal_plan_slots WHERE meal_date = CURRENT_DATE AND reminder_sent = false`
          - Calculate reminder_time based on meal_type and default times (breakfast 8am, lunch 12pm, dinner 6pm)
          - Respect user availability settings if configured (future enhancement)

          **Notification Message Format** (per AC #3):
          ```
          Title: "Dinner Reminder"
          Body: "Tonight's dinner: Chicken Tikka Masala - Ready in 50 minutes"
          ```

          **Deep Linking with Cooking Mode** (per AC #5):
          - Web Push notification click_action: `https://imkitchen.app/recipes/{recipe_id}?mode=cooking`
          - Frontend: Recipe detail page activates kitchen mode when mode=cooking query param present
          - Kitchen mode: high contrast, large text, step-by-step display

          **Notification Actions** (per AC #6):
          - Web Push supports action buttons (Dismiss, Snooze 30min, Snooze 1hour)
          - Service worker handles notificationclick event with action detection
          - Snooze: calculate new scheduled_time, emit ReminderRescheduled event
          - Dismiss: emit ReminderDismissed event, update read model
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-4.8.md</path>
        <title>Story 4.8: Day-of Cooking Reminders</title>
        <section>Testing Standards Summary</section>
        <snippet>
          **TDD Approach**:
          1. Write failing test for cooking reminder scheduled 1 hour before meal
          2. Implement day_of_cooking_reminder_scheduler() in scheduler.rs
          3. Write failing test for message format (AC #3, #4)
          4. Implement message generation with recipe image
          5. Write failing test for cooking mode deep linking (AC #5)
          6. Implement click_action URL with mode parameter
          7. Write failing test for snooze functionality (AC #6)
          8. Implement RescheduleReminderCommand and handler
          9. Write failing test for dismiss functionality (AC #6)
          10. Implement dismiss handler

          **Test Coverage Targets**:
          - scheduler.rs cooking reminder logic: 85%
          - Snooze/dismiss handlers: 90%
          - Integration tests covering all 8 acceptance criteria
        </snippet>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/scheduler.rs</path>
        <kind>module</kind>
        <symbol>calculate_reminder_time</symbol>
        <lines>22-65</lines>
        <reason>Existing function for calculating reminder times based on prep hours. Story 4.8 needs similar logic for calculating day-of cooking reminder times (meal_time - 1 hour) with default meal times for breakfast/lunch/dinner.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/scheduler.rs</path>
        <kind>module</kind>
        <symbol>generate_notification_body</symbol>
        <lines>69-112</lines>
        <reason>Existing function for generating notification message bodies. Story 4.8 requires similar message generation for cooking reminders with format: "Tonight's dinner: {recipe_name} - Ready in {total_time}"</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/scheduler.rs</path>
        <kind>module</kind>
        <symbol>determine_reminder_type</symbol>
        <lines>115-123</lines>
        <reason>Function that determines reminder type based on prep hours. Story 4.8 introduces new reminder_type="day_of_cooking" that needs to be integrated into this logic.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/scheduler.rs</path>
        <kind>module</kind>
        <symbol>NotificationWorker</symbol>
        <lines>476-666</lines>
        <reason>Background worker that polls for due notifications and sends them via Web Push API. Story 4.8 day-of cooking reminders will be processed by this same worker infrastructure.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/events.rs</path>
        <kind>module</kind>
        <symbol>ReminderScheduled</symbol>
        <lines>10-19</lines>
        <reason>Event struct for scheduled reminders. Story 4.8 will emit ReminderScheduled events with reminder_type="day_of_cooking" to distinguish from other reminder types.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/events.rs</path>
        <kind>module</kind>
        <symbol>ReminderSnoozed</symbol>
        <lines>42-49</lines>
        <reason>Event struct for snoozed reminders. Story 4.8 AC #6 requires snooze functionality (30 min, 1 hour) using this event.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/events.rs</path>
        <kind>module</kind>
        <symbol>ReminderDismissed</symbol>
        <lines>33-39</lines>
        <reason>Event struct for dismissed reminders. Story 4.8 AC #6 requires dismiss functionality using this event.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/commands.rs</path>
        <kind>module</kind>
        <symbol>ScheduleReminderCommand</symbol>
        <lines>10-19</lines>
        <reason>Command struct for scheduling reminders. Story 4.8 will reuse this command with reminder_type="day_of_cooking".</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/commands.rs</path>
        <kind>module</kind>
        <symbol>schedule_reminder</symbol>
        <lines>75-110</lines>
        <reason>Command handler for scheduling reminders. Story 4.8 will invoke this function to create day-of cooking reminder events.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/commands.rs</path>
        <kind>module</kind>
        <symbol>snooze_reminder</symbol>
        <lines>177-210</lines>
        <reason>Command handler for snoozing reminders. Story 4.8 AC #6 requires snooze functionality (30 min, 1 hour) using this handler.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/commands.rs</path>
        <kind>module</kind>
        <symbol>dismiss_reminder</symbol>
        <lines>147-169</lines>
        <reason>Command handler for dismissing reminders. Story 4.8 AC #6 requires dismiss functionality using this handler.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/push.rs</path>
        <kind>module</kind>
        <symbol>create_push_payload</symbol>
        <lines>40-70</lines>
        <reason>Function that creates notification payload for Web Push. Story 4.8 needs to extend this to include recipe image, cooking mode deep link, and snooze/dismiss action buttons per AC #4, #5, #6.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/push.rs</path>
        <kind>module</kind>
        <symbol>NotificationPayload</symbol>
        <lines>13-34</lines>
        <reason>Struct defining notification payload structure. Story 4.8 requires adding action buttons for snooze (30min, 1hour) and dismiss per AC #6.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/push.rs</path>
        <kind>module</kind>
        <symbol>send_push_notification</symbol>
        <lines>80-180</lines>
        <reason>Function that sends push notifications via Web Push API. Story 4.8 day-of cooking reminders will be delivered using this same infrastructure.</reason>
      </artifact>
    </code>

    <dependencies>
      <rust>
        <package name="evento" version="1.4" features="sqlite-migrator" />
        <package name="tokio" version="1.40" features="full" />
        <package name="chrono" version="0.4" features="serde" />
        <package name="uuid" version="1.10" features="v4, serde" />
        <package name="web-push" version="0.10" />
        <package name="sqlx" version="0.8" features="runtime-tokio, sqlite, chrono, uuid" />
        <package name="serde" version="1.0" features="derive" />
        <package name="serde_json" version="1.0" />
        <package name="bincode" version="2.0" />
        <package name="thiserror" version="1.0" />
        <package name="anyhow" version="1.0" />
        <package name="tracing" version="0.1" />
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>
      <type>pattern</type>
      <description>Event Sourcing with evento: All state changes must be recorded as immutable events. Use evento::create and evento::save for aggregate operations.</description>
    </constraint>
    <constraint>
      <type>pattern</type>
      <description>CQRS: Commands write events via aggregate command handlers, queries read from materialized read model tables.</description>
    </constraint>
    <constraint>
      <type>pattern</type>
      <description>Reminder Type Differentiation: Use reminder_type field to distinguish between "advance_prep" (24h+), "morning" (4-23h), and "day_of_cooking" (&lt;4h) reminders.</description>
    </constraint>
    <constraint>
      <type>testing</type>
      <description>TDD Enforced: Write failing test first, then implement feature. All tests must pass before committing. Target 85% code coverage for scheduler.rs, 90% for snooze/dismiss handlers.</description>
    </constraint>
    <constraint>
      <type>naming</type>
      <description>Event Naming: Past tense (ReminderScheduled, ReminderSent, ReminderDismissed, ReminderRescheduled). Command Naming: Imperative (ScheduleReminder, SendReminder, DismissReminder, SnoozeReminder).</description>
    </constraint>
    <constraint>
      <type>architecture</type>
      <description>Background Worker Pattern: Use tokio tasks for scheduled notification delivery. Poll notifications table every 1 minute for due reminders (scheduled_time &lt;= now).</description>
    </constraint>
    <constraint>
      <type>database</type>
      <description>Read Model Projections: All events must have corresponding projection handlers that update read model tables (notifications, push_subscriptions).</description>
    </constraint>
    <constraint>
      <type>security</type>
      <description>Web Push API: Use VAPID-based authentication. Validate subscription endpoints are HTTPS. Handle 410 Gone responses by deleting invalid subscriptions.</description>
    </constraint>
    <constraint>
      <type>performance</type>
      <description>Notification Delivery: Implement exponential backoff retry (1s, 2s, 4s) for failed push deliveries. Queue failed notifications for later retry.</description>
    </constraint>
    <constraint>
      <type>compatibility</type>
      <description>Cross-Crate Event Subscriptions: Use manual SubscribeHandler trait implementation when subscribing to events from other domain crates (e.g., MealPlanGenerated from meal_planning crate).</description>
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>calculate_reminder_time</name>
      <kind>function</kind>
      <signature>pub fn calculate_reminder_time(meal_date: &amp;str, meal_time_opt: Option&lt;&amp;str&gt;, prep_hours: i32) -> Result&lt;String, SchedulerError&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/scheduler.rs</path>
      <description>Calculates RFC3339 timestamp for when reminder should be scheduled based on meal date/time and prep hours. For day-of cooking reminders (&lt;4h prep), returns meal_time - 1 hour.</description>
    </interface>
    <interface>
      <name>generate_notification_body</name>
      <kind>function</kind>
      <signature>pub fn generate_notification_body(recipe_title: &amp;str, meal_date: &amp;str, prep_hours: i32, prep_task: Option&lt;&amp;str&gt;) -> Result&lt;String, SchedulerError&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/scheduler.rs</path>
      <description>Generates human-readable notification message body based on reminder type. For day-of cooking reminders: "Start cooking in 1 hour: {recipe_title}"</description>
    </interface>
    <interface>
      <name>schedule_reminder</name>
      <kind>function</kind>
      <signature>pub async fn schedule_reminder&lt;E: evento::Executor&gt;(cmd: ScheduleReminderCommand, executor: &amp;E) -> Result&lt;String, NotificationError&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/commands.rs</path>
      <description>Command handler that validates reminder_type, generates notification_id, creates NotificationAggregate, and emits ReminderScheduled event.</description>
    </interface>
    <interface>
      <name>snooze_reminder</name>
      <kind>function</kind>
      <signature>pub async fn snooze_reminder&lt;E: evento::Executor&gt;(cmd: SnoozeReminderCommand, executor: &amp;E) -> Result&lt;(), NotificationError&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/commands.rs</path>
      <description>Command handler that validates snooze_duration_hours (must be 1, 2, or 4), calculates new scheduled_time, and emits ReminderSnoozed event.</description>
    </interface>
    <interface>
      <name>dismiss_reminder</name>
      <kind>function</kind>
      <signature>pub async fn dismiss_reminder&lt;E: evento::Executor&gt;(cmd: DismissReminderCommand, executor: &amp;E) -> Result&lt;(), NotificationError&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/commands.rs</path>
      <description>Command handler that emits ReminderDismissed event with current timestamp.</description>
    </interface>
    <interface>
      <name>create_push_payload</name>
      <kind>function</kind>
      <signature>pub fn create_push_payload(notification_id: &amp;str, recipe_id: &amp;str, recipe_title: &amp;str, message_body: &amp;str) -> NotificationPayload</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/push.rs</path>
      <description>Creates Web Push notification payload with title, body, icon, badge, action buttons, and data (recipe_id, notification_id, deep link URL). Story 4.8 needs to extend this to add recipe image, cooking mode URL parameter, and snooze action buttons.</description>
    </interface>
    <interface>
      <name>send_push_notification</name>
      <kind>function</kind>
      <signature>pub async fn send_push_notification(subscription: &amp;PushSubscription, payload: &amp;NotificationPayload, config: &amp;WebPushConfig) -> Result&lt;(), PushError&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/push.rs</path>
      <description>Sends push notification via Web Push API using VAPID authentication. Handles 410 Gone (endpoint invalid), 429 Rate Limited, and 5xx server errors.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TDD approach enforced with 80% minimum code coverage (85% target for scheduler logic, 90% for command handlers). Use Rust cargo test framework for unit and integration tests. Test structure: Given-When-Then pattern. Mock evento executor with in-memory event store for unit tests. Use sqlx test fixtures for integration tests requiring database. Test file naming: {module}_tests.rs for unit tests, {story}_integration_tests.rs for integration tests. Use #[tokio::test] for async tests.
    </standards>

    <locations>
      /home/snapiz/projects/github/timayz/imkitchen/crates/notifications/src/scheduler.rs (inline #[cfg(test)] mod tests)
      /home/snapiz/projects/github/timayz/imkitchen/tests/day_of_cooking_reminder_tests.rs (integration tests)
      /home/snapiz/projects/github/timayz/imkitchen/tests/morning_reminder_tests.rs (reference for similar test patterns)
    </locations>

    <ideas>
      <idea ac="1">
        Test: Cooking reminder scheduled 1 hour before meal time
        Given: Meal plan with dinner at 6pm today
        When: day_of_cooking_reminder_scheduler() runs
        Then: ReminderScheduled event emitted with scheduled_time=5:00pm, reminder_type="day_of_cooking"
      </idea>
      <idea ac="2">
        Test: Default meal times used when meal_time not specified
        Given: Meal plan with breakfast, lunch, dinner (no explicit times)
        When: Scheduler calculates reminder times
        Then: Reminders scheduled at 7am (breakfast-1h), 11am (lunch-1h), 5pm (dinner-1h)
      </idea>
      <idea ac="3">
        Test: Reminder message format correct for dinner
        Given: Recipe "Chicken Tikka Masala" with prep_time=20, cook_time=30
        When: generate_notification_body() called for dinner
        Then: Message = "Tonight's dinner: Chicken Tikka Masala - Ready in 50 minutes"
      </idea>
      <idea ac="3">
        Test: Reminder message format correct for breakfast
        Given: Recipe "Oatmeal" with prep_time=5, cook_time=5
        When: generate_notification_body() called for breakfast
        Then: Message = "This morning's breakfast: Oatmeal - Ready in 10 minutes"
      </idea>
      <idea ac="4">
        Test: Recipe image URL included in notification payload
        Given: Recipe with image_url="/uploads/recipe-123.jpg"
        When: create_push_payload() called
        Then: Payload.icon contains recipe image URL
      </idea>
      <idea ac="5">
        Test: Deep link URL formatted with mode=cooking
        Given: Recipe ID "abc-123"
        When: create_push_payload() called
        Then: Payload.data.url = "/recipes/abc-123?mode=cooking"
      </idea>
      <idea ac="6">
        Test: Snooze 30min reschedules notification
        Given: Cooking reminder scheduled for 5:00pm
        When: User clicks "Snooze 30 min" at 5:00pm
        Then: ReminderSnoozed event emitted with snoozed_until=5:30pm
      </idea>
      <idea ac="6">
        Test: Snooze 1hour reschedules notification
        Given: Cooking reminder scheduled for 5:00pm
        When: User clicks "Snooze 1 hour" at 5:00pm
        Then: ReminderSnoozed event emitted with snoozed_until=6:00pm
      </idea>
      <idea ac="6">
        Test: Dismiss removes notification from pending queue
        Given: Cooking reminder in pending status
        When: User clicks "Dismiss"
        Then: ReminderDismissed event emitted, notification status updated to "dismissed"
      </idea>
      <idea ac="7">
        Test: Reminder respects user availability settings
        Given: User profile with weeknight_availability=6:30pm-7:30pm
        When: Meal scheduled for 7pm (within availability window)
        Then: Reminder scheduled for 6pm (1 hour before)
      </idea>
      <idea ac="all">
        Test: No reminder sent if no meal plan for today
        Given: User with no active meal plan or empty meal assignments for today
        When: day_of_cooking_reminder_scheduler() runs
        Then: No ReminderScheduled events emitted
      </idea>
      <idea ac="all">
        Integration test: Full reminder delivery flow
        Given: Meal plan with dinner at 6pm, reminder scheduled for 5pm
        When: Background worker runs at 5:00pm, sends push notification
        Then: ReminderSent event emitted, notification status="sent", user receives push
      </idea>
    </ideas>
  </tests>
</story-context>
