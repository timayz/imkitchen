<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>4.9</storyId>
    <title>Prep Task Completion Tracking</title>
    <status>Draft</status>
    <generatedAt>2025-10-18</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-4.9.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user</asA>
    <iWant>to mark prep tasks as complete</iWant>
    <soThat>I track my preparation progress</soThat>
    <tasks>
      - Implement prep task completion tracking in notification system (AC: 1, 2, 5, 6)
      - Add dashboard prep task display (AC: 3, 4)
      - Add prep status to recipe detail page (AC: 8)
      - Handle uncompleted tasks in reminder cycle (AC: 7)
      - Add integration tests and update notification templates/UI
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Advance prep reminders include "Mark Complete" button
    2. Clicking marks task as completed
    3. Completed tasks display checkmark on dashboard
    4. Dashboard shows "Prep Tasks for Today" section with completion status
    5. Completed tasks removed from active reminders
    6. Completion tracked per recipe, per meal slot
    7. Uncompleted tasks carried over to next reminder cycle
    8. Recipe detail page shows prep completion status
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-4.md" title="Epic 4 Technical Specification" section="Story 10: Prep Task Completion Tracking">
        Technical verification requirements for prep task completion:
        - Notification action button has URL: /recipes/:id?notification_id=:notif_id
        - Recipe detail page queries notification by ID
        - UI renders prep task with checkbox
        - POST /notifications/:id/dismiss marks task complete
        - ReminderDismissed event written to evento stream
        - Read model notifications.status updated to 'dismissed'
      </doc>
      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="Event Sourcing and CQRS">
        Architecture leverages event sourcing and CQRS via evento to maintain full audit trails.
        - evento 1.4+ for event sourcing with SQLite backend
        - Domain crates maintain their own read models from event streams
        - CQRS pattern: Commands write events, queries read from materialized views
      </doc>
      <doc path="docs/epics.md" title="Epic Breakdown" section="Story 4.9: Prep Task Completion Tracking">
        User Story: As a user, I want to mark prep tasks as complete, so that I track my preparation progress.
        8 Acceptance Criteria covering completion tracking, dashboard display, and reminder carry-over.
      </doc>
    </docs>
    <code>
      <file path="src/routes/notifications.rs" kind="route-handler" symbol="dismiss_notification" lines="72-100" reason="Existing dismiss endpoint pattern - reference for implementing complete_prep_task endpoint with similar authorization checks"/>
      <file path="src/routes/notifications.rs" kind="route-handler" symbol="notifications_page" lines="30-55" reason="Dashboard notifications page template - needs modification to add 'Prep Tasks for Today' section"/>
      <file path="crates/notifications/src/commands.rs" kind="command-handler" symbol="DismissReminderCommand" lines="28-32" reason="Similar command structure to replicate for CompletePrepTaskCommand"/>
      <file path="crates/notifications/src/commands.rs" kind="command-handler" symbol="dismiss_reminder" lines="90-120" reason="Pattern for implementing complete_prep_task command handler with evento integration"/>
      <file path="crates/notifications/src/events.rs" kind="event" symbol="ReminderDismissed" lines="32-39" reason="Event pattern to replicate for PrepTaskCompleted event"/>
      <file path="crates/notifications/src/aggregate.rs" kind="aggregate" symbol="NotificationAggregate" lines="1-50" reason="Aggregate structure needs new prep_task_completed event handler"/>
      <file path="crates/notifications/src/read_model.rs" kind="query" symbol="get_user_pending_notifications" lines="1-40" reason="Query pattern for implementing get_user_prep_tasks_for_today"/>
      <file path="templates/pages/notifications.html" kind="template" reason="Template to modify for adding prep tasks section with checkmarks and completion buttons"/>
      <file path="templates/pages/recipe-detail.html" kind="template" reason="Template to modify for adding prep task checklist with completion status"/>
      <file path="tests/day_of_cooking_reminder_tests.rs" kind="integration-test" reason="Reference for TDD pattern and test structure to follow for prep_task_completion_tests.rs"/>
    </code>
    <dependencies>
      <rust>
        <package name="evento" version="1.4" reason="Event sourcing framework - aggregate pattern, event handlers, subscriptions"/>
        <package name="sqlx" version="0.8" reason="Async SQL queries for read model projections"/>
        <package name="axum" version="0.8" reason="HTTP server and routing"/>
        <package name="askama" version="0.14" reason="Type-safe server-side templates"/>
        <package name="chrono" version="0.4" reason="Date/time handling for completion timestamps"/>
        <package name="uuid" version="1.10" reason="Notification ID generation"/>
        <package name="thiserror" version="1.0" reason="Custom error types"/>
        <package name="tokio" version="1.40" reason="Async runtime"/>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    - Event sourcing pattern: All state changes must emit events (PrepTaskCompleted)
    - CQRS: Commands write events, queries read from read models
    - TDD enforced: Write failing tests first, then implement
    - 80% code coverage target via cargo-tarpaulin
    - Use evento-generated ULID as notification_id for aggregate lookup consistency
    - Authorization: Validate user owns notification before allowing completion
    - Security: Return PermissionDenied for both not-found and unauthorized (prevent ID enumeration)
    - Naming: Commands use PascalCase imperative, Events use PascalCase past tense
    - Database: SQLite with evento event store + read model tables
    - Template integration: Use TwinSpark for real-time UI updates without full page reload
  </constraints>

  <interfaces>
    <api name="POST /api/notifications/:id/complete" kind="http-endpoint" signature="async fn complete_prep_task(Extension(auth): Extension&lt;Auth&gt;, State(state): State&lt;AppState&gt;, Path(notification_id): Path&lt;String&gt;) -&gt; Result&lt;impl IntoResponse, AppError&gt;" path="src/routes/notifications.rs" reason="New endpoint to create - marks prep task as complete"/>
    <api name="complete_prep_task" kind="command-handler" signature="pub async fn complete_prep_task&lt;E: evento::Executor&gt;(cmd: CompletePrepTaskCommand, executor: &amp;E) -&gt; Result&lt;(), NotificationError&gt;" path="crates/notifications/src/commands.rs" reason="New command handler to create - emits PrepTaskCompleted event"/>
    <api name="get_user_prep_tasks_for_today" kind="query" signature="pub async fn get_user_prep_tasks_for_today(pool: &amp;SqlitePool, user_id: &amp;str) -&gt; Result&lt;Vec&lt;UserNotification&gt;, sqlx::Error&gt;" path="crates/notifications/src/read_model.rs" reason="New query to create - fetches pending prep tasks for dashboard"/>
    <api name="project_prep_task_completed" kind="projection" signature="async fn project_prep_task_completed&lt;E: evento::Executor&gt;(context: &amp;evento::Context&lt;'_, E&gt;, event: EventDetails&lt;PrepTaskCompleted&gt;) -&gt; anyhow::Result&lt;()&gt;" path="crates/notifications/src/read_model.rs" reason="New projection handler to create - updates read model on PrepTaskCompleted event"/>
  </interfaces>

  <tests>
    <standards>
      TDD approach mandatory: Write failing test first, implement feature to pass test.
      Test pyramid: Unit tests (domain logic), Integration tests (HTTP + database), E2E tests (Playwright).
      Use tokio::test for async tests, evento::unsafe_oneshot for synchronous event processing in tests.
      Target 80% code coverage via cargo-tarpaulin.
      Test file naming: *_tests.rs or *_integration_tests.rs
      Given-When-Then structure in test comments for clarity.
    </standards>
    <locations>
      - tests/prep_task_completion_tests.rs (new file to create)
      - crates/notifications/src/commands.rs (unit tests inline)
      - crates/notifications/src/read_model.rs (unit tests inline)
    </locations>
    <ideas>
      - AC #1,2: Test POST /api/notifications/:id/complete creates PrepTaskCompleted event
      - AC #3: Test completed tasks display checkmark icon on dashboard
      - AC #4: Test dashboard "Prep Tasks for Today" section displays pending/completed tasks
      - AC #5: Test completed tasks removed from get_user_pending_notifications() query
      - AC #6: Test completion tracked per meal_plan_slot_id (multiple prep tasks for same recipe)
      - AC #7: Test uncompleted tasks carried over when scheduler runs next cycle
      - AC #7: Test max_reminder_count prevents infinite reminders (status='expired' after 3 attempts)
      - AC #8: Test recipe detail page displays prep completion status when notification_id query param present
      - Negative test: User cannot complete another user's prep task (returns PermissionDenied)
      - Edge case: Completing already-completed task is idempotent (no error)
    </ideas>
  </tests>
</story-context>
