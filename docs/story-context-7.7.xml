<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>7</epicId>
    <storyId>7.7</storyId>
    <title>Algorithm Integration Tests and Benchmarks</title>
    <status>Draft</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-7.7.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>development team</asA>
    <iWant>comprehensive integration tests and performance benchmarks for the meal planning algorithm</iWant>
    <soThat>we ensure correctness, reliability, and performance targets are met</soThat>
    <tasks>
      - Create integration test suite (AC: 1)
        - Create tests/integration/test_multi_week.rs
        - Set up test fixture: 50 recipes (15 appetizers, 20 mains, 15 desserts, 10 accompaniments)
        - Vary complexity, cuisines, dietary tags, times
        - Create realistic UserPreferences
        - Call generate_multi_week_meal_plans() end-to-end
        - Assert successful generation (no errors)
        - Assert 5 weeks generated
        - Assert 21 assignments per week

      - Test dietary restriction filtering (AC: 2)
        - Test Vegan user: all assigned recipes have Vegan tag
        - Test GlutenFree + DairyFree: recipes have both tags
        - Test Custom("peanuts"): no recipes with peanut ingredients
        - Iterate through all assignments, validate dietary tags
        - Assert filter_by_dietary_restrictions integration

      - Test time and skill constraints (AC: 3)
        - Test Beginner user: all assigned main courses are Simple complexity
        - Test Intermediate user: no Complex main courses
        - Test weeknight assignments: prep+cook ≤ 30 minutes
        - Test weekend assignments: prep+cook ≤ 90 minutes
        - Iterate through assignments by day of week, validate constraints

      - Test main course uniqueness (AC: 4)
        - Collect all main course recipe IDs from 5 weeks (35 total)
        - Assert no duplicates: unique_ids.len() == 35
        - Test with exactly 35 main courses (boundary: full rotation)
        - Test with 40 main courses (5 unused at end)

      - Test accompaniment pairing (AC: 5)
        - Find main courses with accepts_accompaniment = true
        - Assert corresponding MealAssignment has accompaniment_recipe_id = Some(...)
        - Verify accompaniment recipe exists and is correct category
        - Find main courses with accepts_accompaniment = false
        - Assert accompaniment_recipe_id = None

      - Create performance benchmark suite (AC: 6)
        - Create benches/algorithm_benchmarks.rs
        - Add criterion dev dependency to Cargo.toml
        - Benchmark: filter_by_dietary_restrictions with 100 recipes
        - Benchmark: select_main_course_with_preferences with 100 candidates
        - Benchmark: generate_single_week with 50 recipes
        - Benchmark: generate_multi_week_meal_plans 5 weeks with 50 recipes
        - Assert P95 &lt; 5 seconds for multi-week generation
        - Run with cargo bench

      - Measure code coverage (AC: 7)
        - Install cargo-tarpaulin: cargo install cargo-tarpaulin
        - Run: cargo tarpaulin --package meal_planning --out Html --output-dir coverage/
        - Open coverage/index.html and review
        - Identify uncovered lines, add tests if critical
        - Assert overall coverage &gt;80% for crates/meal_planning/src/algorithm.rs

      - Edge case integration tests
        - Test insufficient recipes error (6 appetizers, 7 mains, 7 desserts)
        - Test dietary filtering reduces to insufficient
        - Test single week generation (7 of each type)
        - Test appetizer/dessert exhaustion and reset mid-generation
        - Test no compatible main course for specific day (error propagation)

      - CI/CD integration
        - Add test execution to CI pipeline
        - Add benchmark execution (informational, not blocking)
        - Add coverage report generation
        - Fail build if coverage &lt;80%
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Integration test: full multi-week generation with realistic data (50 recipes)
    2. Test: dietary restrictions filter correctly (all enums + custom)
    3. Test: time/skill constraints respected (weeknight vs weekend, skill levels)
    4. Test: main courses never repeat across weeks (uniqueness verified)
    5. Test: accompaniments assigned correctly (pairing logic)
    6. Benchmark: 5-week generation &lt;5 seconds using criterion crate
    7. Coverage &gt;80% for algorithm module (measured via cargo-tarpaulin)
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>3.7 Integration Tests</section>
        <snippet>
**Services and Modules:**
- filter_by_dietary_restrictions: Filter recipes incompatible with user dietary restrictions (AND logic)
- select_main_course_with_preferences: Score and select best main course for specific day
- select_accompaniment: Pair accompaniment with main course based on preferred categories
- generate_single_week: Generate complete week (21 assignments) with rotation tracking
- generate_multi_week_meal_plans: Calculate max weeks, generate all weeks in batch, create shopping lists
- generate_shopping_list_for_week: Aggregate ingredients from week's meal assignments, categorize

**Performance Targets:**
- Multi-week generation (5 weeks): &lt;5 seconds (P95), measured with 50 recipes per user
- Single week generation: &lt;1 second (P95)
- Dietary filtering: &lt;10ms for 100 recipes
- Main course selection with preferences: &lt;10ms per selection
- Shopping list aggregation: &lt;100ms per week

**Test Strategy Summary:**
- TDD enforced: Write tests first, implement to pass
- Unit Tests (70%): Individual functions in isolation
- Integration Tests (25%): Multi-function workflows
- Performance Benchmarks (5%): Performance regression detection
- Coverage Targets: &gt;80% line coverage for crates/meal_planning/src/
- Critical Functions: 100% coverage for filter_by_dietary_restrictions, select_main_course_with_preferences
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>5.1 - AC Story 7.7</section>
        <snippet>
**Story 7.7: Algorithm Integration Tests and Benchmarks**
1. Integration test: full multi-week generation with realistic data (50 recipes)
2. Test: dietary restrictions filter correctly (all enums + custom)
3. Test: time/skill constraints respected (weeknight vs weekend, skill levels)
4. Test: main courses never repeat across weeks (uniqueness verified)
5. Test: accompaniments assigned correctly (pairing logic)
6. Benchmark: 5-week generation &lt;5 seconds using criterion crate
7. Coverage &gt;80% for algorithm module (measured via cargo-tarpaulin)

**Test Organization:**
crates/meal_planning/
├── src/
│   ├── algorithm.rs          // Implementation
│   └── rotation.rs            // RotationState (Epic 6)
└── tests/
    ├── unit/
    │   ├── test_filtering.rs
    │   ├── test_selection.rs
    │   ├── test_rotation.rs
    │   └── test_shopping.rs
    ├── integration/
    │   ├── test_single_week.rs
    │   └── test_multi_week.rs
    └── benchmarks/
        └── algorithm_benchmarks.rs

**Coverage Interpretation:**
- &gt;80% overall: Good (meets AC-7)
- Critical paths 100%: dietary filtering, main selection, week generation
- Lower coverage acceptable: error handling branches, edge cases
- Exclude from coverage: Debug implementations, test utilities
        </snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-7.md</path>
        <title>Technical Specification: Enhanced Meal Planning - Algorithm Implementation</title>
        <section>Data Models and Contracts</section>
        <snippet>
**Core Domain Models:**
- Recipe: id, user_id, title, ingredients, instructions, prep_time_minutes, cook_time_minutes, recipe_type (Appetizer|MainCourse|Dessert), complexity (Simple|Moderate|Complex), accepts_accompaniment, preferred_accompaniments, accompaniment_category, cuisine, dietary_tags
- UserPreferences: dietary_restrictions, max_prep_time_weeknight (default 30), max_prep_time_weekend (default 90), skill_level (Beginner|Intermediate|Advanced), avoid_consecutive_complex, cuisine_variety_weight (0.0-1.0, default 0.7)
- RotationState: used_main_course_ids (NEVER repeat), used_appetizer_ids (can repeat after exhaustion), used_dessert_ids (can repeat after exhaustion), cuisine_usage_count, last_complex_meal_date
- WeekMealPlan: id, user_id, start_date (Monday ISO 8601), end_date (Sunday), status (Future|Current|Past|Archived), is_locked, generation_batch_id, meal_assignments (21 assignments: 7 days × 3 courses), shopping_list_id, created_at
- MealAssignment: id, meal_plan_id, date, course_type (Appetizer|MainCourse|Dessert), recipe_id, accompaniment_recipe_id (optional), prep_required
- MultiWeekMealPlan: user_id, generation_batch_id, generated_weeks (Vec&lt;WeekMealPlan&gt;), rotation_state

**Error Types:**
- InsufficientRecipes { appetizers, main_courses, desserts }
- NoCompatibleRecipes { course_type, reason }
- AlgorithmTimeout
- InvalidPreferences(String)
        </snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>module</kind>
        <symbol>MealPlanningAlgorithm</symbol>
        <lines>206-487</lines>
        <reason>Core meal planning algorithm service - target for integration testing and benchmarking. Contains generate() method (AC-1), score_recipe_for_slot() for constraint evaluation (AC-2, AC-3), and performance-critical code paths (AC-6).</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
        <kind>module</kind>
        <symbol>RecipeComplexityCalculator</symbol>
        <lines>64-124</lines>
        <reason>Complexity calculation service used by algorithm - validates time/skill constraints (AC-3). Contains calculate_score(), calculate_complexity(), fits_weeknight(), fits_weekend() methods.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/dietary_filter.rs</path>
        <kind>module</kind>
        <symbol>filter_by_dietary_restrictions</symbol>
        <lines>1-50</lines>
        <reason>Dietary restriction filtering function - primary target for AC-2 integration testing. Validates all dietary enums (Vegan, GlutenFree, DairyFree, etc.) and custom restrictions.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
        <kind>module</kind>
        <symbol>RotationState</symbol>
        <lines>67-150</lines>
        <reason>Rotation state tracking - critical for AC-4 main course uniqueness validation. Contains mark_used_main_course(), is_main_course_used(), reset logic for appetizers/desserts.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/error.rs</path>
        <kind>module</kind>
        <symbol>MealPlanningError</symbol>
        <lines>1-61</lines>
        <reason>Error types for algorithm - integration tests must validate error handling for InsufficientRecipes, NoCompatibleRecipes, InvalidWeekStart, etc.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/tests/algorithm_reasoning_tests.rs</path>
        <kind>test</kind>
        <symbol>existing_algorithm_tests</symbol>
        <lines>1-100</lines>
        <reason>Existing algorithm test patterns - reference for test structure and fixtures. Shows how to create test recipes, validate reasoning text generation.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/tests/constraints_tests.rs</path>
        <kind>test</kind>
        <symbol>existing_constraint_tests</symbol>
        <lines>1-100</lines>
        <reason>Existing constraint evaluation tests - reference for testing time/skill constraints (AC-3). Shows constraint validation patterns.</reason>
      </artifact>
      <artifact>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/Cargo.toml</path>
        <kind>config</kind>
        <symbol>dependencies</symbol>
        <lines>1-23</lines>
        <reason>Cargo manifest for meal_planning crate - needs criterion dev-dependency added for benchmarks (AC-6). Currently has tokio test-util, needs criterion = "0.5".</reason>
      </artifact>
    </code>
    <dependencies>
      <rust>
        <dependency name="evento" version="1.5+" purpose="Event sourcing framework (SQLite backend), aggregate traits, event handling" />
        <dependency name="chrono" version="0.4+" purpose="Date/time handling (week calculations, Monday start dates, ISO 8601)" />
        <dependency name="uuid" version="1.10+" purpose="Generate generation_batch_id, shopping_list_id (v4 UUIDs)" />
        <dependency name="rand" version="0.9" purpose="Random accompaniment selection (thread_rng), deterministic seeding for tests" />
        <dependency name="tracing" version="0.1+" purpose="Structured logging for observability" />
        <dependency name="thiserror" version="1.0+" purpose="Custom error type definitions (MealPlanningError enum)" />
        <dependency name="serde" version="1.0+" purpose="Serialization for evento events (bincode + JSON)" />
        <dependency name="bincode" version="2.0+" purpose="Binary encoding for evento event persistence" />
        <dependency name="criterion" version="0.5" purpose="Benchmarking suite (dev dependency) - NEEDS TO BE ADDED" dev="true" />
        <dependency name="tokio" version="1.0" purpose="Async runtime with test-util features for integration tests" dev="true" />
        <dependency name="sqlx" version="workspace" purpose="Database queries for read models" />
      </rust>
      <internal>
        <module name="crates/meal_planning/src/rotation.rs" exports="RotationState, RotationSystem" purpose="Track used recipes across weeks, manage uniqueness/exhaustion" />
        <module name="crates/meal_planning/src/dietary_filter.rs" exports="filter_by_dietary_restrictions" purpose="Filter recipes by dietary restrictions (AC-2)" />
        <module name="crates/meal_planning/src/error.rs" exports="MealPlanningError" purpose="Error types for validation" />
        <module name="crates/meal_planning/src/constraints.rs" exports="Constraint types, CourseType, MealSlot" purpose="Constraint evaluation system" />
        <module name="crates/recipe" exports="Recipe domain model" purpose="Recipe data structures" />
        <module name="crates/user" exports="User domain model with preferences" purpose="User profile constraints" />
      </internal>
    </dependencies>
  </artifacts>

  <constraints>
    **TDD Enforced:**
    - Write failing test → Implement minimal code to pass → Refactor → Repeat
    - All stories begin with test creation before implementation
    - This story IS the test creation story - tests must be comprehensive and thorough

    **Architecture Constraints:**
    - No external HTTP/IO in algorithm functions (pure business logic)
    - Dependency injection for data access
    - evento pattern: unsafe_oneshot for synchronous processing in tests
    - Performance target: &lt;5 seconds for 5-week generation

    **Test Organization:**
    - Integration tests in tests/ directory (NOT src/)
    - Benchmarks in benches/ directory
    - Use #[tokio::test] for async functions
    - Each test creates own data (no shared state)
    - Clean up any side effects

    **Coverage Requirements:**
    - Overall: &gt;80% line coverage for crates/meal_planning/src/
    - Critical paths: 100% for dietary filtering, main selection, week generation
    - Lower coverage acceptable: error handling branches, edge cases
    - CI enforcement: build fails if coverage &lt;80%

    **Performance Benchmarking:**
    - Use criterion crate for statistical benchmarking
    - Measure P50, P95, P99 latencies
    - Realistic test data: 50 recipes (15 appetizers, 20 mains, 15 desserts)
    - Regression tests: alert on &gt;10% performance degradation

    **Rust Testing Standards:**
    - Use assert!, assert_eq!, assert_ne! macros
    - Custom error messages for context: assert!(condition, "Expected X but got Y: {:?}", value)
    - Test naming: test_&lt;feature&gt;_&lt;scenario&gt;_&lt;expected_outcome&gt;
    - Group related tests with mod tests { ... } blocks
    - Use #[should_panic] for expected failures

    **Business Rules to Validate:**
    - Main courses NEVER repeat across weeks (strict uniqueness)
    - Appetizers/desserts CAN repeat after exhaustion
    - Dietary restrictions use AND logic (all must be satisfied)
    - Weeknight max prep time default: 30 minutes
    - Weekend max prep time default: 90 minutes
    - Week always starts Monday (ISO 8601)
  </constraints>

  <interfaces>
    <interface>
      <name>MealPlanningAlgorithm::generate</name>
      <kind>function</kind>
      <signature>
        pub fn generate(
            start_date: &amp;str,
            favorites: Vec&lt;RecipeForPlanning&gt;,
            constraints: UserConstraints,
            rotation_state: RotationState,
            seed: Option&lt;u64&gt;,
        ) -&gt; Result&lt;(Vec&lt;MealAssignment&gt;, RotationState), MealPlanningError&gt;
      </signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
    </interface>
    <interface>
      <name>filter_by_dietary_restrictions</name>
      <kind>function</kind>
      <signature>
        pub fn filter_by_dietary_restrictions(
            recipes: Vec&lt;Recipe&gt;,
            restrictions: &amp;[DietaryRestriction],
        ) -&gt; Vec&lt;Recipe&gt;
      </signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/dietary_filter.rs</path>
    </interface>
    <interface>
      <name>RecipeComplexityCalculator::calculate_complexity</name>
      <kind>function</kind>
      <signature>
        pub fn calculate_complexity(recipe: &amp;RecipeForPlanning) -&gt; Complexity
      </signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
    </interface>
    <interface>
      <name>RecipeComplexityCalculator::fits_weeknight</name>
      <kind>function</kind>
      <signature>
        pub fn fits_weeknight(recipe: &amp;RecipeForPlanning, max_minutes: u32) -&gt; bool
      </signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs</path>
    </interface>
    <interface>
      <name>RotationState::is_main_course_used</name>
      <kind>function</kind>
      <signature>
        pub fn is_main_course_used(&amp;self, recipe_id: &amp;RecipeId) -&gt; bool
      </signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/rotation.rs</path>
    </interface>
    <interface>
      <name>generate_multi_week_meal_plans</name>
      <kind>function</kind>
      <signature>
        pub async fn generate_multi_week_meal_plans(
            user_id: UserId,
            favorite_recipes: Vec&lt;Recipe&gt;,
            preferences: UserPreferences,
        ) -&gt; Result&lt;MultiWeekMealPlan, Error&gt;
      </signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs (Story 7.5)</path>
    </interface>
    <interface>
      <name>generate_shopping_list_for_week</name>
      <kind>function</kind>
      <signature>
        pub fn generate_shopping_list_for_week(
            meal_assignments: &amp;[MealAssignment],
            recipes: &amp;[Recipe],
            week_start_date: Date,
        ) -&gt; ShoppingList
      </signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/algorithm.rs (Story 7.6)</path>
    </interface>
  </interfaces>

  <tests>
    <standards>
**Test-Driven Development (TDD) Enforced:**
Write failing test → Implement minimal code to pass → Refactor → Repeat. All stories begin with test creation before implementation.

**Test Pyramid:**
1. Unit Tests (70%): Individual functions in isolation (filter, select, score)
2. Integration Tests (25%): Multi-function workflows (single week generation, multi-week generation)
3. Performance Benchmarks (5%): Performance regression detection

**Test Frameworks:**
- Built-in Rust #[test], #[tokio::test], assert_eq!, assert! macros
- criterion crate for performance benchmarking
- cargo-tarpaulin for coverage measurement

**Test Data Management:**
- Fixtures: Helper functions create realistic Recipe, UserPreferences structs
- Deterministic Randomness: Seed rand::thread_rng in tests for reproducibility
- Edge Cases: Explicit tests for empty lists, boundary values, exhaustion scenarios

**Test Execution:**
- Local: cargo test (runs all unit + integration tests)
- Benchmarks: cargo bench (runs criterion benchmarks)
- Coverage: cargo tarpaulin --package meal_planning --out Html --output-dir coverage/
- CI/CD: GitHub Actions runs cargo test, cargo tarpaulin, cargo bench on every PR

**Test Pattern for evento Integration:**
Use unsafe_oneshot for sync processing in tests (see /home/snapiz/projects/github/timayz/imkitchen/crates/meal_planning/src/lib.rs lines 128-261 for examples)
    </standards>
    <locations>
      - crates/meal_planning/tests/ (integration tests)
      - crates/meal_planning/benches/ (benchmarks - needs to be created)
      - crates/meal_planning/src/algorithm.rs (inline unit tests at bottom of file)
      - crates/meal_planning/src/rotation.rs (inline unit tests)
    </locations>
    <ideas>
      <test ac="1" description="Integration test: full multi-week generation with realistic data">
        Create test_multi_week.rs in tests/integration/ directory. Generate 50 realistic recipes:
        - 15 appetizers (varied complexity, cuisines: Italian, Mexican, Chinese)
        - 20 main courses (distributed: 10 Simple, 6 Moderate, 4 Complex)
        - 15 desserts (varied prep times: 5-60 minutes)
        - Vary dietary tags: some Vegan, some GlutenFree, some DairyFree
        Call MealPlanningAlgorithm::generate() 5 times sequentially with same rotation state.
        Assert: 5 successful generations, each with 21 assignments (7 days × 3 courses).
        Validate: start_date increments by 7 days each week, all dates are consecutive Mon-Sun.
      </test>
      <test ac="2" description="Test: dietary restrictions filter correctly">
        Create test_dietary_filtering.rs. Test scenarios:
        1. Vegan user: Generate 50 recipes (25 Vegan tagged, 25 non-Vegan). Generate meal plan with dietary_restrictions=[Vegan]. Assert all assigned recipes have Vegan tag.
        2. GlutenFree + DairyFree: Generate recipes with combined tags. Assert filter uses AND logic (all restrictions satisfied).
        3. Custom("peanuts"): Generate recipes with "peanuts" in ingredients. Assert filter excludes by case-insensitive ingredient text search.
        4. Empty restrictions: Assert all recipes pass through unfiltered.
      </test>
      <test ac="3" description="Test: time/skill constraints respected">
        Create test_constraints.rs. Test scenarios:
        1. Beginner user (skill_level=Beginner): Generate plan. Assert all main courses are Simple complexity only.
        2. Intermediate user: Assert no Complex main courses assigned.
        3. Weeknight time (Mon-Fri): Create recipes with varying total_time (prep+cook). Assert weeknight assignments have total_time ≤ max_prep_time_weeknight (30min default).
        4. Weekend time (Sat-Sun): Assert weekend assignments can have longer times (up to 90min).
        Iterate through all 21 assignments, validate day_of_week → constraint mapping.
      </test>
      <test ac="4" description="Test: main courses never repeat across weeks">
        Create test_rotation.rs. Generate 5-week meal plan with 40 main course recipes available.
        Collect all main_course recipe_ids from all 5 weeks (35 total assignments for mains: 7 days × 5 weeks).
        Assert: unique_ids.len() == 35 (no duplicates).
        Boundary test: Generate with exactly 35 main courses (full rotation) - should succeed.
        Insufficient test: Generate with only 34 main courses - should fail on week 5 day 7.
      </test>
      <test ac="5" description="Test: accompaniments assigned correctly">
        Create test_accompaniment.rs. Generate recipes with accepts_accompaniment field:
        - 10 main courses with accepts_accompaniment=true and preferred_accompaniments=[Pasta, Rice]
        - 10 main courses with accepts_accompaniment=false
        - 10 accompaniment recipes (5 Pasta category, 5 Rice category)
        Generate meal plan. Iterate through main course assignments.
        Assert: If main.accepts_accompaniment=true → assignment.accompaniment_recipe_id.is_some()
        Assert: If main.accepts_accompaniment=false → assignment.accompaniment_recipe_id.is_none()
        Verify: accompaniment recipe exists in recipe list and has correct category.
      </test>
      <test ac="6" description="Benchmark: 5-week generation &lt;5 seconds">
        Create benches/algorithm_benchmarks.rs. Add criterion to Cargo.toml [dev-dependencies].
        Benchmark suite:
        1. bench_filter_by_dietary_restrictions_100_recipes: 100 recipes, 3 restrictions
        2. bench_select_main_course_100_candidates: Score 100 candidate recipes for single slot
        3. bench_generate_single_week_50_recipes: Full week generation
        4. bench_generate_multi_week_5_weeks_50_recipes: 5 consecutive weeks
        Assert P95 &lt; 5 seconds for multi-week benchmark (criterion::BenchmarkId).
        Use black_box() to prevent compiler optimization.
        Run: cargo bench --package meal_planning
      </test>
      <test ac="7" description="Coverage &gt;80% for algorithm module">
        Install: cargo install cargo-tarpaulin
        Run: cargo tarpaulin --package meal_planning --out Html --output-dir coverage/
        Open coverage/index.html and review algorithm.rs coverage.
        Identify uncovered lines:
        - Error handling branches (test with invalid inputs)
        - Edge cases (empty recipe lists, all recipes filtered out)
        - Fallback logic (no recipe scores &gt;0)
        Add missing tests to reach &gt;80% overall coverage.
        CI integration: Add coverage check to GitHub Actions workflow, fail build if &lt;80%.
      </test>
      <test description="Edge case: insufficient recipes error">
        Create test with 6 appetizers, 7 mains, 7 desserts (insufficient variety).
        Assert: MealPlanningError::InsufficientRecipes with minimum=7, current=6.
        Test dietary filtering edge: 50 recipes total, but all filtered out by Vegan restriction.
        Assert: InsufficientRecipes error after filtering.
      </test>
      <test description="Edge case: appetizer/dessert exhaustion and reset">
        Create test with exactly 7 appetizers, 20 mains, 7 desserts.
        Generate 1 week (uses all 7 appetizers once, all 7 desserts once).
        Generate 2nd week: appetizers/desserts should reset and cycle through again.
        Assert: rotation_state.used_appetizer_ids cleared after exhaustion.
        Assert: Main courses still unique (no reset for mains).
      </test>
      <test description="Edge case: no compatible main course for specific day">
        Create test where all main courses violate weeknight time constraint (all &gt;60min).
        Set max_prep_time_weeknight=30.
        Attempt generation for weekday slot.
        Assert: MealPlanningError or fallback to least-worst option (score &gt; 0 check).
      </test>
    </ideas>
  </tests>
</story-context>
