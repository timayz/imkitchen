<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>5</storyId>
    <title>Profile Editing</title>
    <status>Draft</status>
    <generatedAt>2025-10-13T14:14:35-04:00</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/home/snapiz/projects/github/timayz/imkitchen/docs/stories/story-1.5.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a registered user</asA>
    <iWant>to update my profile preferences</iWant>
    <soThat>meal planning reflects my current needs</soThat>
    <tasks>
      <task id="1" status="pending">Create profile edit page template (AC: 1, 2)
        - Create GET /profile handler in src/routes/profile.rs
        - Query user by ID from Auth middleware claims
        - Create ProfilePageTemplate with Askama
        - Pre-populate form fields with current user profile data
        - Dietary restrictions as checkboxes (pre-checked from user.dietary_restrictions JSON)
        - Household size as number input (value from user.household_size)
        - Skill level as radio buttons (selected from user.skill_level)
        - Weeknight availability as time picker + duration slider (parsed from user.weeknight_availability JSON)
        - Style with Tailwind CSS utility classes
        - Add "Save Changes" button</task>
      <task id="2" status="pending">Implement PUT /profile handler (AC: 2, 3, 4)
        - Create UpdateProfileForm struct with validator derives
        - Parse dietary_restrictions from comma-separated string to Vec&lt;String&gt;
        - Validate household_size range (1-20 per validator)
        - Parse skill_level string to SkillLevel enum
        - Parse weeknight_availability as JSON string
        - Create UpdateProfileCommand with form data
        - Call user::update_profile command handler (crates/user)
        - Handle validation errors (re-render form with inline error messages)
        - On success: redirect to /profile?updated=true
        - Display success toast notification on redirect</task>
      <task id="3" status="pending">Implement domain command and event handling (AC: 3, 4, 7)
        - Implement update_profile command in crates/user/src/commands.rs
        - Load UserAggregate from evento stream
        - Validate command (form validation already done in route)
        - Append ProfileUpdated event with changed fields only
        - Commit event to evento executor
        - Add profile_updated event handler to UserAggregate
        - Update aggregate state with new profile fields (COALESCE logic for optional updates)
        - ProfileUpdated event includes timestamp for audit trail</task>
      <task id="4" status="pending">Add read model projection (AC: 4, 7)
        - Create project_profile_updated handler in crates/user/src/read_model.rs
        - Subscribe to ProfileUpdated events via evento::handler
        - Parse dietary_restrictions Vec to JSON string for storage
        - Map SkillLevel enum to string ("beginner"|"intermediate"|"expert")
        - Update users table: SET dietary_restrictions, household_size, skill_level, weeknight_availability, updated_at WHERE id = ?
        - Use COALESCE to only update non-null fields
        - Update updated_at timestamp to track change history</task>
      <task id="5" status="pending">Test profile editing flow (AC: 1, 2, 3, 4, 5, 6, 7)
        - Unit test: ProfileUpdated event handler updates aggregate state correctly
        - Unit test: update_profile command validates input and emits ProfileUpdated event
        - Integration test: GET /profile renders pre-populated form with user data
        - Integration test: PUT /profile with valid changes updates users table via projection
        - Integration test: PUT /profile with household_size &gt; 20 returns 422 with validation error
        - Integration test: PUT /profile with invalid skill_level returns 422
        - Integration test: Profile changes don't affect active meal plans (query meal_plans table)
        - E2E test: Complete user flow - register, onboard, edit profile, verify changes persist</task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC-1">Profile page displays current preferences in editable form</criterion>
    <criterion id="AC-2">User can modify dietary restrictions, household size, skill level, availability</criterion>
    <criterion id="AC-3">Changes validated before saving</criterion>
    <criterion id="AC-4">Successful save updates profile and shows confirmation message</criterion>
    <criterion id="AC-5">Updated preferences immediately affect future meal plan generations</criterion>
    <criterion id="AC-6">Active meal plans remain unchanged until regenerated</criterion>
    <criterion id="AC-7">Profile change history tracked for audit purposes</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture - User Aggregate</title>
        <section>Section 3.2: Data Models</section>
        <snippet>UserAggregate event sourcing pattern with ProfileUpdated events. Read model schema for users table with dietary_restrictions (TEXT JSON array), household_size (INTEGER), skill_level (TEXT), weeknight_availability (TEXT JSON). Event projection pattern via evento subscriptions for read model updates.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture - CQRS Pattern</title>
        <section>Section 2.4: Data Fetching Approach</section>
        <snippet>Commands write events to evento stream, queries read from materialized users table. ProfileUpdated event projected to read model via evento::handler subscription. COALESCE logic for partial updates - only update non-null fields.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/solution-architecture.md</path>
        <title>Solution Architecture - Route Handlers</title>
        <section>Section 2.3: Page Routing and Navigation</section>
        <snippet>GET /profile - View profile page with editable form. PUT /profile - Update profile handler. Post/Redirect/Get pattern: validate form, invoke domain command, redirect to success page. Validation errors re-render form with inline error messages.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-1.md</path>
        <title>Epic 1 Tech Spec - Profile Routes</title>
        <section>APIs and Interfaces - Profile Routes</section>
        <snippet>GET /profile: Query user from read model, render ProfilePageTemplate. PUT /profile: Validate UpdateProfileForm, invoke update_profile command, redirect to /profile?updated=true. Auth middleware provides user_id from JWT claims.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-1.md</path>
        <title>Epic 1 Tech Spec - ProfileUpdated Event</title>
        <section>Data Models - Events</section>
        <snippet>ProfileUpdated event with optional fields: dietary_restrictions (Option&lt;Vec&lt;String&gt;&gt;), household_size (Option&lt;u32&gt;), skill_level (Option&lt;SkillLevel&gt;), weeknight_availability (Option&lt;String&gt;). Only changed fields included in event for partial updates.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-1.md</path>
        <title>Epic 1 Tech Spec - Read Model Projection</title>
        <section>Data Models - Read Model Projections</section>
        <snippet>project_profile_updated handler: Parse dietary Vec to JSON, map SkillLevel enum to string, UPDATE users SET fields with COALESCE for non-null values only, update updated_at timestamp. Subscription ensures read model stays in sync with event stream.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/tech-spec-epic-1.md</path>
        <title>Epic 1 Tech Spec - Validation Strategy</title>
        <section>Detailed Design - UpdateProfileCommand</section>
        <snippet>validator crate for form validation: household_size range (1-20), skill_level enum validation. Server-side validation before domain command, domain layer minimal validation (structural checks only). Re-render form with inline errors on validation failure.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/epics.md</path>
        <title>Epic 1 - Story 1.5: Profile Editing</title>
        <section>Story 1.5</section>
        <snippet>User updates profile preferences so meal planning reflects current needs. Profile page displays editable form, changes validated, successful save shows confirmation, updated preferences affect future meal plans, active plans unchanged until regenerated, change history tracked for audit.</snippet>
      </doc>
      <doc>
        <path>/home/snapiz/projects/github/timayz/imkitchen/docs/PRD.md</path>
        <title>PRD - User Profile Management</title>
        <section>Functional Requirements - FR-13</section>
        <snippet>Users manage profile including dietary restrictions (vegetarian, vegan, gluten-free, allergens), cooking skill level, typical weeknight availability, and household size. Profile data informs meal planning algorithm for personalized recommendations.</snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/aggregate.rs</path>
        <kind>Aggregate</kind>
        <symbol>UserAggregate</symbol>
        <lines>1-131</lines>
        <reason>User aggregate with existing event handlers for profile fields (dietary_restrictions_set, household_size_set, skill_level_set, weeknight_availability_set). Need to add profile_updated handler for consolidated ProfileUpdated event that supports partial updates with COALESCE logic.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/events.rs</path>
        <kind>Events</kind>
        <symbol>DietaryRestrictionsSet, HouseholdSizeSet, SkillLevelSet, WeeknightAvailabilitySet</symbol>
        <lines>1-68</lines>
        <reason>Existing individual step events for onboarding. Need to add ProfileUpdated event struct for consolidated profile editing that includes all fields as Option types for partial updates.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/commands.rs</path>
        <kind>Commands</kind>
        <symbol>SetDietaryRestrictionsCommand, SetHouseholdSizeCommand, SetSkillLevelCommand, SetWeeknightAvailabilityCommand</symbol>
        <lines>1-291</lines>
        <reason>Existing individual field commands for onboarding. Need to add update_profile command that accepts UpdateProfileCommand with optional fields and emits single ProfileUpdated event for atomic profile updates.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/profile.rs</path>
        <kind>Routes</kind>
        <symbol>get_onboarding, post_onboarding_step_*</symbol>
        <lines>1-402</lines>
        <reason>Existing onboarding routes. Need to add GET /profile and PUT /profile handlers. GET renders ProfilePageTemplate with current user data from read model. PUT validates UpdateProfileForm, calls user::update_profile command, redirects with success message.</reason>
      </file>
      <file>
        <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/read_model.rs</path>
        <kind>Projections</kind>
        <symbol>project_user_created, on_dietary_restrictions_set, etc.</symbol>
        <lines>N/A</lines>
        <reason>Need to implement project_profile_updated evento::handler subscription. Parses dietary Vec to JSON, maps SkillLevel to string, uses COALESCE to update only non-null fields in users table, updates updated_at timestamp for audit trail.</reason>
      </file>
    </code>
    <dependencies>
      <rust>
        <package name="evento" version="1.3" features="sqlite-migrator">Event sourcing framework for UserAggregate and ProfileUpdated event</package>
        <package name="sqlx" version="0.8" features="runtime-tokio,sqlite,chrono,uuid">Database queries for read model, read user data for profile page</package>
        <package name="validator" version="0.20" features="derive">Form validation for UpdateProfileForm (household_size range, etc.)</package>
        <package name="serde_json" version="1.0">Parse/serialize dietary_restrictions and weeknight_availability JSON</package>
        <package name="askama" version="0.14">ProfilePageTemplate server-side rendering</package>
        <package name="axum" version="0.8">Route handlers GET /profile, PUT /profile</package>
        <package name="chrono" version="0.4">Timestamps for updated_at field, ProfileUpdated event</package>
      </rust>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>CQRS Architecture: Commands (update_profile) write ProfileUpdated events to evento stream. Queries (GET /profile) read from users read model table. No direct database writes in route handlers.</constraint>
    <constraint>Event Sourcing: All profile changes recorded as ProfileUpdated events in evento stream for complete audit trail (AC-7). Aggregate rebuilt from event stream for command validation.</constraint>
    <constraint>Partial Updates: ProfileUpdated event includes only changed fields (Option types). Read model projection uses SQL COALESCE to update non-null fields only. Supports editing individual fields without overwriting others.</constraint>
    <constraint>Validation Strategy: Client-side HTML5 validation (required, min, max) + Server-side validator crate on UpdateProfileForm. Domain layer minimal validation (structural checks). Validation errors re-render form with inline messages.</constraint>
    <constraint>Meal Plan Isolation: Profile changes affect future meal plan generations (AC-5). Active meal plans remain unchanged until regenerated (AC-6). No cascade updates to existing meal_plan records.</constraint>
    <constraint>Testing: TDD enforced - unit tests for event handlers and commands, integration tests for route handlers and projections, E2E test for complete profile editing flow. 80% code coverage minimum.</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>Auth Middleware</name>
      <kind>Middleware</kind>
      <signature>Extension&lt;Auth&gt; provides user_id from JWT claims</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/src/middleware/auth.rs</path>
      <reason>GET /profile and PUT /profile require authenticated user. Auth middleware validates JWT cookie, extracts user_id, injects Auth extension for route handlers.</reason>
    </interface>
    <interface>
      <name>AppState</name>
      <kind>State</kind>
      <signature>State&lt;AppState&gt; provides evento_executor and db_pool</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/src/routes/auth.rs</path>
      <reason>Route handlers need evento_executor for command invocation and db_pool for read model queries. AppState injected via Axum State extractor.</reason>
    </interface>
    <interface>
      <name>user::update_profile</name>
      <kind>Command Handler</kind>
      <signature>pub async fn update_profile(cmd: UpdateProfileCommand, executor: &amp;Sqlite) -&gt; UserResult&lt;()&gt;</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/crates/user/src/commands.rs</path>
      <reason>PUT /profile handler calls this command to emit ProfileUpdated event. Loads UserAggregate, validates command, appends event to evento stream.</reason>
    </interface>
    <interface>
      <name>users table read model</name>
      <kind>Database Schema</kind>
      <signature>SELECT dietary_restrictions, household_size, skill_level, weeknight_availability FROM users WHERE id = ?</signature>
      <path>/home/snapiz/projects/github/timayz/imkitchen/migrations/001_create_users_table.sql</path>
      <reason>GET /profile queries read model to populate form. PUT /profile projection updates read model via evento subscription. Fields: dietary_restrictions (TEXT JSON), household_size (INTEGER), skill_level (TEXT), weeknight_availability (TEXT JSON), updated_at (TEXT).</reason>
    </interface>
  </interfaces>

  <tests>
    <standards>TDD approach enforced with unit tests for UserAggregate event handlers and command logic, integration tests for route handlers with in-memory SQLite database and evento projections, E2E tests using Playwright for complete user flows. Validation: validator crate for form inputs, SQL injection prevention via SQLx parameterized queries. Coverage target: 80% minimum (90% for user crate security-critical code). Test execution: cargo test for unit/integration, npm test for E2E.</standards>
    <locations>
      <location>crates/user/tests/aggregate_tests.rs - Unit tests for UserAggregate.profile_updated event handler</location>
      <location>crates/user/tests/command_tests.rs - Unit tests for update_profile command validation and event emission</location>
      <location>tests/profile_tests.rs - Integration tests for GET /profile and PUT /profile routes</location>
      <location>e2e/tests/profile.spec.ts - E2E test for register → onboard → edit profile → verify persistence</location>
    </locations>
    <ideas>
      <idea criterion="AC-1">Integration test: GET /profile with authenticated user returns 200 OK with pre-populated form fields matching users table data. Verify dietary_restrictions parsed from JSON, household_size displayed, skill_level selected, weeknight_availability time/duration shown.</idea>
      <idea criterion="AC-2,AC-3,AC-4">Integration test: PUT /profile with valid UpdateProfileForm (household_size=5, skill_level="expert") emits ProfileUpdated event, projects to read model, redirects to /profile?updated=true. Verify users table updated, updated_at timestamp changed.</idea>
      <idea criterion="AC-3">Integration test: PUT /profile with household_size=25 (exceeds validator range 1-20) returns 422 Unprocessable Entity with validation error message. Verify form re-rendered with inline error, no event emitted.</idea>
      <idea criterion="AC-5,AC-6">Integration test: Create meal plan, update profile dietary_restrictions, verify meal plan unchanged (query meal_plans table), regenerate meal plan, verify new plan respects updated dietary restrictions.</idea>
      <idea criterion="AC-7">Unit test: ProfileUpdated event handler updates UserAggregate.dietary_restrictions, .household_size, .skill_level, .weeknight_availability. Verify COALESCE logic: null fields preserve existing values, non-null fields update.</idea>
      <idea criterion="AC-7">Integration test: PUT /profile twice with different fields, verify evento event stream contains 2 ProfileUpdated events with timestamps, read model reflects latest values.</idea>
    </ideas>
  </tests>
</story-context>
