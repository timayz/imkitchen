# OpenTelemetry Collector Configuration for imkitchen
# Receives traces and metrics from the Rust application via OTLP
# Exports to Jaeger for distributed tracing visualization

receivers:
  # OTLP receiver for traces and metrics from the application
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4319
      http:
        endpoint: 0.0.0.0:4320

processors:
  # Batch processor to reduce number of outgoing connections
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Add resource attributes
  resource:
    attributes:
      - key: service.name
        value: imkitchen
        action: insert
      - key: deployment.environment
        value: development
        action: insert

exporters:
  # OTLP exporter to Jaeger (uses OTLP protocol)
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true

  # Debug exporter for development (prints to collector logs)
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

  # Prometheus exporter for metrics (exposed on :9090/metrics)
  prometheus:
    endpoint: 0.0.0.0:9090
    namespace: imkitchen

extensions:
  # Health check endpoint
  health_check:
    endpoint: 0.0.0.0:13133

  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

  # zPages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]

  pipelines:
    # Traces pipeline: OTLP -> processors -> Jaeger + Debug
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource]
      exporters: [otlp/jaeger, debug]

    # Metrics pipeline: OTLP -> processors -> Prometheus + Debug
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource]
      exporters: [prometheus, debug]

  telemetry:
    logs:
      level: info
