const SELECTORS={CHECKBOX:".shopping-item-checkbox",ITEM_ROW:".shopping-item"};function initShoppingCheckoff(){restoreCheckboxStates();document.querySelectorAll(SELECTORS.CHECKBOX).forEach(e=>{e.addEventListener("change",handleCheckboxChange)}),console.log("Shopping checkoff initialized")}function restoreCheckboxStates(){document.querySelectorAll(SELECTORS.CHECKBOX).forEach(e=>{const o=`shopping-checkoff-${e.dataset.itemId}`,t="true"===localStorage.getItem(o);t!==e.checked&&(e.checked=t,updateCheckboxUI(e,t))}),console.log("Checkbox states restored from LocalStorage")}async function handleCheckboxChange(e){const o=e.target,t=o.dataset.itemId,c=o.checked,n=`shopping-checkoff-${t}`;localStorage.setItem(n,c.toString()),updateCheckboxUI(o,c),console.debug(`Shopping item ${t} ${c?"checked":"unchecked"}`);try{await syncCheckoffToServer(t,c)}catch(e){console.warn("Failed to sync checkoff (offline), queuing for background sync:",e.message),await queueCheckoffMutation(t,c)}}function updateCheckboxUI(e,o){const t=e.closest(SELECTORS.ITEM_ROW);t&&(o?(t.classList.add("checked"),t.classList.add("opacity-50")):(t.classList.remove("checked"),t.classList.remove("opacity-50")))}async function syncCheckoffToServer(e,o){const t=`/shopping/item/${e}/checkoff`,c=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({is_collected:o})});if(!c.ok)throw new Error(`Server returned ${c.status}`);return console.debug("Checkoff synced to server:",e,o),c}async function queueCheckoffMutation(e,o){try{const t={url:`/shopping/item/${e}/checkoff`,method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:{is_collected:o}};if(window.offlineDB){if(await window.offlineDB.queueRequest(t),console.debug("Checkoff mutation queued for sync:",e),"serviceWorker"in navigator&&"sync"in ServiceWorkerRegistration.prototype){const e=await navigator.serviceWorker.ready;await e.sync.register("sync-offline-actions"),console.debug("Background sync registered")}}else console.error("offlineDB not available, mutation not queued")}catch(e){console.error("Failed to queue checkoff mutation:",e)}}function clearCheckoffStates(){const e=Object.keys(localStorage).filter(e=>e.startsWith("shopping-checkoff-"));e.forEach(e=>{localStorage.removeItem(e)}),console.debug(`Cleared ${e.length} checkoff states from LocalStorage`)}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",initShoppingCheckoff):initShoppingCheckoff(),"undefined"!=typeof window&&(window.shoppingCheckoff={initShoppingCheckoff:initShoppingCheckoff,clearCheckoffStates:clearCheckoffStates});