const DB_NAME="imkitchen-offline",DB_VERSION=1;function openDatabase(){return new Promise((e,t)=>{const n=indexedDB.open(DB_NAME,1);n.onerror=()=>{console.error("Failed to open IndexedDB:",n.error),t(n.error)},n.onsuccess=()=>{console.log("IndexedDB opened successfully"),e(n.result)},n.onupgradeneeded=e=>{const t=e.target.result;if(console.log("Upgrading IndexedDB schema to version",1),!t.objectStoreNames.contains("recipes")){const e=t.createObjectStore("recipes",{keyPath:"id"});e.createIndex("cached_at","cached_at",{unique:!1}),e.createIndex("title","title",{unique:!1})}if(!t.objectStoreNames.contains("meal_plans")){const e=t.createObjectStore("meal_plans",{keyPath:"id"});e.createIndex("user_id","user_id",{unique:!1}),e.createIndex("start_date","start_date",{unique:!1}),e.createIndex("cached_at","cached_at",{unique:!1})}if(!t.objectStoreNames.contains("shopping_lists")){const e=t.createObjectStore("shopping_lists",{keyPath:"id"});e.createIndex("week_start_date","week_start_date",{unique:!1}),e.createIndex("cached_at","cached_at",{unique:!1})}if(!t.objectStoreNames.contains("sync_queue")){const e=t.createObjectStore("sync_queue",{keyPath:"request_id",autoIncrement:!0});e.createIndex("queued_at","queued_at",{unique:!1}),e.createIndex("retry_count","retry_count",{unique:!1})}}})}async function get(e,t){const n=await openDatabase();try{return new Promise((o,r)=>{const a=n.transaction([e],"readonly"),c=a.objectStore(e).get(t);c.onsuccess=()=>{o(c.result||null)},c.onerror=()=>{console.error(`Failed to get ${e}[${t}]:`,c.error),r(c.error)},a.oncomplete=()=>n.close(),a.onerror=()=>{n.close(),r(a.error)},a.onabort=()=>{n.close(),r(new Error("Transaction aborted"))}})}catch(e){throw n.close(),e}}async function put(e,t){const n=await openDatabase();try{return new Promise((o,r)=>{const a=n.transaction([e],"readwrite"),c=a.objectStore(e).put(t);c.onsuccess=()=>{console.log(`Stored ${e}[${c.result}]`),o()},c.onerror=()=>{const t=c.error;t&&"QuotaExceededError"===t.name?(console.error(`Storage quota exceeded for ${e}`),showStorageQuotaWarning()):console.error(`Failed to put ${e}:`,t),r(t)},a.oncomplete=()=>n.close(),a.onerror=()=>{n.close(),r(a.error)},a.onabort=()=>{n.close(),r(new Error("Transaction aborted"))}})}catch(e){throw n.close(),e&&"QuotaExceededError"===e.name&&(console.error("Storage quota exceeded"),showStorageQuotaWarning()),e}}async function remove(e,t){const n=await openDatabase();try{return new Promise((o,r)=>{const a=n.transaction([e],"readwrite"),c=a.objectStore(e).delete(t);c.onsuccess=()=>{console.log(`Deleted ${e}[${t}]`),o()},c.onerror=()=>{console.error(`Failed to delete ${e}[${t}]:`,c.error),r(c.error)},a.oncomplete=()=>n.close(),a.onerror=()=>{n.close(),r(a.error)},a.onabort=()=>{n.close(),r(new Error("Transaction aborted"))}})}catch(e){throw n.close(),e}}async function getAll(e){const t=await openDatabase();return new Promise((n,o)=>{const r=t.transaction([e],"readonly"),a=r.objectStore(e).getAll();a.onsuccess=()=>{n(a.result||[])},a.onerror=()=>{console.error(`Failed to get all from ${e}:`,a.error),o(a.error)},r.oncomplete=()=>t.close()})}async function clear(e){const t=await openDatabase();return new Promise((n,o)=>{const r=t.transaction([e],"readwrite"),a=r.objectStore(e).clear();a.onsuccess=()=>{console.log(`Cleared ${e}`),n()},a.onerror=()=>{console.error(`Failed to clear ${e}:`,a.error),o(a.error)},r.oncomplete=()=>t.close()})}async function cacheRecipe(e){return put("recipes",{...e,cached_at:(new Date).toISOString()})}async function getCachedRecipe(e){return get("recipes",e)}async function getAllCachedRecipes(){return getAll("recipes")}async function cacheMealPlan(e){return put("meal_plans",{...e,cached_at:(new Date).toISOString()})}async function getCachedMealPlan(e){return get("meal_plans",e)}async function getActiveMealPlan(){const e=await getAll("meal_plans");return 0===e.length?null:(e.sort((e,t)=>new Date(t.start_date)-new Date(e.start_date)),e[0])}async function cacheShoppingList(e){return put("shopping_lists",{...e,cached_at:(new Date).toISOString()})}async function getCachedShoppingList(e){return get("shopping_lists",e)}async function getCurrentShoppingList(){const e=await getAll("shopping_lists");return 0===e.length?null:(e.sort((e,t)=>new Date(t.week_start_date)-new Date(e.start_date)),e[0])}async function queueRequest(e){const t=await openDatabase();return new Promise((n,o)=>{const r=t.transaction(["sync_queue"],"readwrite"),a=r.objectStore("sync_queue"),c={...e,retry_count:0,queued_at:(new Date).toISOString()},s=a.add(c);s.onsuccess=()=>{console.log("Request queued:",s.result),n(s.result)},s.onerror=()=>{console.error("Failed to queue request:",s.error),o(s.error)},r.oncomplete=()=>t.close()})}async function getQueuedRequests(){return getAll("sync_queue")}async function removeQueuedRequest(e){return remove("sync_queue",e)}async function clearSyncQueue(){return clear("sync_queue")}async function getCacheStats(){const[e,t,n,o]=await Promise.all([getAll("recipes"),getAll("meal_plans"),getAll("shopping_lists"),getAll("sync_queue")]);return{recipes:e.length,mealPlans:t.length,shoppingLists:n.length,queuedRequests:o.length,totalCached:e.length+t.length+n.length}}async function clearAllCache(){await Promise.all([clear("recipes"),clear("meal_plans"),clear("shopping_lists")]),console.log("All cached data cleared")}function showStorageQuotaWarning(){if(document.getElementById("storage-quota-warning"))return;const e=document.createElement("div");e.id="storage-quota-warning",e.className="fixed bottom-4 right-4 bg-yellow-50 border border-yellow-200 text-yellow-900 p-4 rounded-lg shadow-lg max-w-md z-50",e.innerHTML='\n    <div class="flex items-start">\n      <svg class="w-5 h-5 mr-2 text-yellow-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>\n      </svg>\n      <div class="flex-1">\n        <h3 class="font-medium">Storage Almost Full</h3>\n        <p class="text-sm mt-1">Your device storage is running low. Some offline data may not be saved. Consider clearing old cached recipes.</p>\n        <button onclick="this.closest(\'#storage-quota-warning\').remove()" class="mt-2 text-sm font-medium text-yellow-700 underline">Dismiss</button>\n      </div>\n    </div>\n  ',document.body.appendChild(e),setTimeout(()=>{e.parentNode&&e.remove()},1e4)}const offlineDB={openDatabase:openDatabase,get:get,put:put,remove:remove,getAll:getAll,clear:clear,cacheRecipe:cacheRecipe,getCachedRecipe:getCachedRecipe,getAllCachedRecipes:getAllCachedRecipes,cacheMealPlan:cacheMealPlan,getCachedMealPlan:getCachedMealPlan,getActiveMealPlan:getActiveMealPlan,cacheShoppingList:cacheShoppingList,getCachedShoppingList:getCachedShoppingList,getCurrentShoppingList:getCurrentShoppingList,queueRequest:queueRequest,getQueuedRequests:getQueuedRequests,removeQueuedRequest:removeQueuedRequest,clearSyncQueue:clearSyncQueue,getCacheStats:getCacheStats,clearAllCache:clearAllCache};"undefined"!=typeof window&&(window.offlineDB=offlineDB),"undefined"!=typeof self&&(self.offlineDB=offlineDB);