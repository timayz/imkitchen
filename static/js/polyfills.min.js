!function(){"use strict";window.Promise&&window.fetch&&window.IntersectionObserver&&Object.assign?console.info("No polyfills needed - browser supports modern features"):(console.warn("Loading polyfills for legacy browser support"),window.Promise||(console.warn("Promise API not supported - adding polyfill"),window.Promise=function(e){const t=[];let n,o=!1;this.then=function(e){return new Promise(function(r){function s(){try{const t=e?e(n):n;r(t)}catch(e){console.error("Promise error:",e)}}o?setTimeout(s,0):t.push(s)})},this.catch=function(e){return this.then(null,e)};try{e(function(e){o||(o=!0,n=e,t.forEach(function(e){setTimeout(function(){e(n)},0)}))},function(e){console.error("Promise rejected:",e)})}catch(e){console.error("Promise executor error:",e)}},Promise.resolve=function(e){return new Promise(function(t){t(e)})},Promise.reject=function(e){return new Promise(function(t,n){n(e)})}),window.fetch||(console.warn("Fetch API not supported - adding XMLHttpRequest fallback"),window.fetch=function(e,t){return t=t||{},new Promise(function(n,o){const r=new XMLHttpRequest;r.open(t.method||"GET",e),t.headers&&Object.keys(t.headers).forEach(function(e){r.setRequestHeader(e,t.headers[e])}),r.onload=function(){n({ok:r.status>=200&&r.status<300,status:r.status,statusText:r.statusText,text:function(){return Promise.resolve(r.responseText)},json:function(){return Promise.resolve(JSON.parse(r.responseText))},headers:{get:function(e){return r.getResponseHeader(e)}}})},r.onerror=function(){o(new TypeError("Network request failed"))},r.ontimeout=function(){o(new TypeError("Network request timed out"))},r.send(t.body||null)})}),window.IntersectionObserver||(console.warn("IntersectionObserver not supported - adding fallback"),window.IntersectionObserver=function(e){this.observe=function(t){setTimeout(function(){e([{isIntersecting:!0,target:t,intersectionRatio:1}])},100)},this.unobserve=function(){},this.disconnect=function(){}}),Object.assign||(console.warn("Object.assign not supported - adding polyfill"),Object.assign=function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");const t=Object(e);for(let e=1;e<arguments.length;e++){const n=arguments[e];if(null!=n)for(const e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])}return t}),Array.from||(Array.from=function(e){return Array.prototype.slice.call(e)}),Array.prototype.find||(Array.prototype.find=function(e){for(let t=0;t<this.length;t++)if(e(this[t],t,this))return this[t]}),String.prototype.includes||(String.prototype.includes=function(e){return-1!==this.indexOf(e)}),String.prototype.startsWith||(String.prototype.startsWith=function(e){return 0===this.indexOf(e)}),String.prototype.endsWith||(String.prototype.endsWith=function(e){return-1!==this.indexOf(e,this.length-e.length)}),Number.isNaN||(Number.isNaN=function(e){return"number"==typeof e&&isNaN(e)}),console.info("Polyfills loaded successfully"))}();