const PushSubscription={vapidPublicKey:null,serviceWorkerPath:"/sw.js",init(e,r="/sw.js"){this.vapidPublicKey=e,this.serviceWorkerPath=r},checkBrowserSupport(){if(!("Notification"in window))return{supported:!1,reason:"Notifications not supported",userMessage:"Push notifications are not supported in your browser. Please use Chrome, Firefox, Edge, or Safari 16+."};if(!("serviceWorker"in navigator))return{supported:!1,reason:"Service Workers not supported",userMessage:"Your browser does not support service workers. Please update to the latest version or use a modern browser."};if(!("PushManager"in window))return{supported:!1,reason:"Push API not supported",userMessage:"Push notifications are not supported in your browser. Safari users: please update to Safari 16+. Otherwise, use Chrome, Firefox, or Edge."};if(/^((?!chrome|android).)*safari/i.test(navigator.userAgent)){const e=navigator.userAgent.match(/version\/(\d+)/i);if(e&&parseInt(e[1])<16)return{supported:!1,reason:"Safari version too old",userMessage:"Push notifications require Safari 16 or later. Please update Safari or use Chrome, Firefox, or Edge."}}return{supported:!0,reason:"All APIs supported",userMessage:null}},urlBase64ToUint8Array(e){const r=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),o=window.atob(r),s=new Uint8Array(o.length);for(let e=0;e<o.length;++e)s[e]=o.charCodeAt(e);return s},async requestPermission(){if(!("Notification"in window))return console.error("This browser does not support notifications"),alert("Push notifications are not supported in your browser. Please try using a modern browser like Chrome, Firefox, or Edge."),"denied";try{return await Notification.requestPermission()}catch(e){return console.error("Error requesting notification permission:",e),"denied"}},async registerServiceWorker(){if(!("serviceWorker"in navigator))return console.error("Service workers are not supported"),alert("Your browser does not support service workers, which are required for push notifications. Please update to the latest version of your browser or use Chrome, Firefox, or Edge."),null;try{const e=await navigator.serviceWorker.register(this.serviceWorkerPath),r=navigator.serviceWorker.ready,o=new Promise((e,r)=>setTimeout(()=>r(new Error("Service worker ready timeout after 10s")),1e4));return await Promise.race([r,o]),e}catch(e){return console.error("Service worker registration failed:",e),e.message.includes("timeout")?alert("Service worker is taking too long to install. Please check the browser console for errors and try again."):"SecurityError"===e.name?alert("Failed to register service worker due to security restrictions. Push notifications require HTTPS."):alert("Failed to register service worker. Error: "+e.message),null}},async createPushSubscription(e){if(!e)return console.error("No service worker registration"),null;if(!("pushManager"in e))return console.error("Push messaging is not supported"),alert("Push messaging is not supported in your browser. Safari users: please update to Safari 16+ or use Chrome/Firefox/Edge for push notifications."),null;try{const r=this.urlBase64ToUint8Array(this.vapidPublicKey),o=await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:r});return console.log("Push subscription created"),o}catch(e){return console.error("Failed to create push subscription:",e),"NotAllowedError"===e.name?alert("Push notification permission was denied. Please allow notifications in your browser settings to enable this feature."):"NotSupportedError"===e.name?alert("Push notifications are not supported on this device or browser version. Please try using a desktop browser or update your mobile browser."):alert("Failed to enable push notifications. Please try again or contact support if the problem persists."),null}},arrayBufferToBase64(e){const r=new Uint8Array(e),o=r.byteLength;let s="";for(let e=0;e<o;e+=32768)s+=String.fromCharCode.apply(null,r.subarray(e,Math.min(e+32768,o)));return btoa(s).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")},async sendSubscriptionToServer(e){const r=e.getKey("p256dh"),o=e.getKey("auth"),s={endpoint:e.endpoint,p256dh_key:this.arrayBufferToBase64(r),auth_key:this.arrayBufferToBase64(o)};try{const e=await fetch("/api/notifications/subscribe",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(!e.ok)throw new Error(`Server responded with ${e.status}`);const r=await e.json();return console.log("Subscription sent to server:",r),r}catch(e){throw console.error("Failed to send subscription to server:",e),e}},async recordPermissionChange(e){try{const r=await fetch("/api/notifications/permission",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({permission_status:e})});if(!r.ok)throw new Error(`Server responded with ${r.status}`);const o=await r.json();return console.log("Permission change recorded:",o),o}catch(e){throw console.error("Failed to record permission change:",e),e}},async enablePushNotifications(){const e=this.checkBrowserSupport();if(!e.supported)return console.error("Browser not supported:",e.reason),alert(e.userMessage),{success:!1,reason:"unsupported_browser",message:e.reason};const r=await this.requestPermission();if("granted"!==r)return"denied"===r?(await this.recordPermissionChange("denied"),{success:!1,permission:"denied"}):{success:!1,permission:"default"};{await this.recordPermissionChange("granted");const e=await this.registerServiceWorker();if(!e)return console.error("Failed to register service worker"),{success:!1,reason:"service_worker_failed"};const r=await this.createPushSubscription(e);if(!r)return console.error("Failed to create push subscription"),{success:!1,reason:"subscription_failed"};try{return await this.sendSubscriptionToServer(r),{success:!0,permission:"granted"}}catch(e){return console.error("Failed to send subscription to server:",e),{success:!1,reason:"server_error",error:e}}}},async skipPermissionRequest(){return await this.recordPermissionChange("skipped"),{success:!0,skipped:!0}},async getNotificationStatus(){try{const e=await fetch("/api/notifications/status");if(!e.ok)throw new Error(`Server responded with ${e.status}`);return await e.json()}catch(e){throw console.error("Failed to get notification status:",e),e}}};"undefined"!=typeof module&&module.exports&&(module.exports=PushSubscription);