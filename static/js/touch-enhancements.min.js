const Haptic={isSupported:()=>"vibrate"in navigator,enabled:!0,loadPreference(){const e=localStorage.getItem("haptic_enabled");this.enabled=null===e||"true"===e},savePreference(e){this.enabled=e,localStorage.setItem("haptic_enabled",e.toString())},tap(){this.enabled&&this.isSupported()&&navigator.vibrate(50)},action(){this.enabled&&this.isSupported()&&navigator.vibrate(100)}},LongPress={threshold:300,timers:new Map,attach(e,t){let n=null,s=null;const i=i=>{const o=i.touches?i.touches[0]:i;s={x:o.clientX,y:o.clientY},n=setTimeout(()=>{Haptic.action(),t(e,i),n=null},this.threshold)},o=e=>{if(n&&s){const t=e.touches?e.touches[0]:e,i=Math.abs(t.clientX-s.x),o=Math.abs(t.clientY-s.y);(i>10||o>10)&&(clearTimeout(n),n=null)}},a=()=>{n&&(clearTimeout(n),n=null),s=null};e.addEventListener("touchstart",i,{passive:!0}),e.addEventListener("touchmove",o,{passive:!0}),e.addEventListener("touchend",a),e.addEventListener("touchcancel",a),this.timers.set(e,()=>{e.removeEventListener("touchstart",i),e.removeEventListener("touchmove",o),e.removeEventListener("touchend",a),e.removeEventListener("touchcancel",a)})},detach(e){const t=this.timers.get(e);t&&(t(),this.timers.delete(e))}},ContextMenu={activeMenu:null,show(e,t,n){this.hide(),e.style.position="fixed",e.style.left=`${t}px`,e.style.top=`${n}px`,e.style.display="block",e.classList.remove("hidden"),this.activeMenu=e;const s=t=>{e.contains(t.target)||this.hide()},i=()=>{this.hide()};setTimeout(()=>{document.addEventListener("click",s,{once:!0}),document.addEventListener("touchstart",s,{once:!0,passive:!0}),document.addEventListener("scroll",i,{once:!0,passive:!0})},100)},hide(){this.activeMenu&&(this.activeMenu.style.display="none",this.activeMenu.classList.add("hidden"),this.activeMenu=null)}};document.addEventListener("DOMContentLoaded",()=>{Haptic.loadPreference(),document.querySelectorAll('button, a[role="button"], .btn-primary, .btn-secondary').forEach(e=>{e.addEventListener("click",()=>Haptic.tap(),{passive:!0})}),document.querySelectorAll("form").forEach(e=>{e.addEventListener("submit",()=>Haptic.action(),{passive:!0})}),document.querySelectorAll('input[type="checkbox"], input[type="radio"]').forEach(e=>{e.addEventListener("change",()=>Haptic.tap(),{passive:!0})});const e=document.querySelectorAll(".recipe-card");e.length>0&&e.forEach(e=>{const t=e.dataset.recipeId||e.querySelector('a[href^="/recipes/"]')?.href.split("/").pop();if(!t)return;const n=document.createElement("div");n.className="hidden bg-white shadow-lg rounded-lg border border-gray-200 z-50",n.innerHTML=`\n      <div class="py-2 min-w-[160px]">\n        <a href="/recipes/${t}" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">\n          View Details\n        </a>\n        <a href="/recipes/${t}/edit" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">\n          Edit Recipe\n        </a>\n        <button onclick="if(confirm('Delete this recipe?')) location.href='/recipes/${t}/delete'"\n                class="block w-full text-left px-4 py-2 text-red-600 hover:bg-gray-100">\n          Delete\n        </button>\n      </div>\n    `,document.body.appendChild(n),LongPress.attach(e,(e,t)=>{t.preventDefault();const s=t.touches?t.touches[0]:t;ContextMenu.show(n,s.clientX,s.clientY)})}),document.querySelectorAll("[data-scroll-handler]").forEach(e=>{e.addEventListener("scroll",e=>{},{passive:!0})})}),"undefined"!=typeof module&&module.exports&&(module.exports={Haptic:Haptic,LongPress:LongPress,ContextMenu:ContextMenu});