if(importScripts("https://storage.googleapis.com/workbox-cdn/releases/7.1.0/workbox-sw.js"),workbox){console.log("Workbox loaded successfully"),workbox.core.setCacheNameDetails({prefix:"imkitchen",suffix:"v1"}),workbox.core.skipWaiting(),workbox.core.clientsClaim(),workbox.precaching.precacheAndRoute(self.__WB_MANIFEST||[]),workbox.routing.registerRoute(({request:e})=>"navigate"===e.mode,new workbox.strategies.NetworkFirst({cacheName:"pages-v1",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:50,maxAgeSeconds:604800}),new workbox.cacheableResponse.CacheableResponsePlugin({statuses:[0,200]})]})),workbox.routing.registerRoute(({request:e})=>"image"===e.destination,new workbox.strategies.CacheFirst({cacheName:"images-v1",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:100,maxAgeSeconds:2592e3})]})),workbox.routing.registerRoute(({url:e})=>e.pathname.startsWith("/api")||e.pathname.startsWith("/recipes")||e.pathname.startsWith("/plan")||e.pathname.startsWith("/shopping"),new workbox.strategies.NetworkFirst({cacheName:"api-v1",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:100,maxAgeSeconds:86400})]})),workbox.routing.registerRoute(({request:e})=>"style"===e.destination||"script"===e.destination||"font"===e.destination,new workbox.strategies.CacheFirst({cacheName:"static-v1",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:60,maxAgeSeconds:31536e3})]}));const e="/offline";async function checkStorageQuota(){if("storage"in navigator&&"estimate"in navigator.storage)try{const e=await navigator.storage.estimate(),t=e.usage||0,o=e.quota||0,n=o>0?t/o*100:0;return console.log(`Storage: ${(t/1024/1024).toFixed(2)} MB used of ${(o/1024/1024).toFixed(2)} MB (${n.toFixed(1)}%)`),n>90?console.warn("Storage quota critical: "+n.toFixed(1)+"% used. Consider clearing old caches."):n>75&&console.warn("Storage quota high: "+n.toFixed(1)+"% used."),e}catch(e){console.error("Failed to check storage quota:",e)}else console.log("Storage estimation API not available")}self.addEventListener("install",t=>{t.waitUntil(Promise.all([caches.open("pages-v1").then(t=>t.add(e)),checkStorageQuota()]))}),workbox.routing.setCatchHandler(({event:t})=>"navigate"===t.request.mode?caches.match(e):Response.error())}else console.error("Workbox failed to load");async function syncOfflineActions(){try{const e=await openSyncDatabase(),t=await getAllQueuedRequests(e);console.log(`Syncing ${t.length} queued requests`);for(const o of t)try{await replayRequest(o),await removeQueuedRequest(e,o.id),console.log("Successfully synced request:",o.id)}catch(t){console.error("Failed to sync request:",o.id,t),await incrementRetryCount(e,o.id)}console.log("Background sync completed")}catch(e){throw console.error("Background sync failed:",e),e}}function openSyncDatabase(){return new Promise((e,t)=>{const o=indexedDB.open("imkitchen-sync",1);o.onerror=()=>t(o.error),o.onsuccess=()=>e(o.result),o.onupgradeneeded=e=>{const t=e.target.result;if(!t.objectStoreNames.contains("queue")){const e=t.createObjectStore("queue",{keyPath:"id",autoIncrement:!0});e.createIndex("timestamp","timestamp",{unique:!1}),e.createIndex("retryCount","retryCount",{unique:!1})}}})}function getAllQueuedRequests(e){return new Promise((t,o)=>{const n=e.transaction(["queue"],"readonly").objectStore("queue").getAll();n.onsuccess=()=>t(n.result||[]),n.onerror=()=>o(n.error)})}async function replayRequest(e){const{url:t,method:o,body:n,headers:i}=e,r=await fetch(t,{method:o,headers:i||{},body:n?JSON.stringify(n):void 0});if(!r.ok)throw new Error(`Request failed with status ${r.status}`);return r}function removeQueuedRequest(e,t){return new Promise((o,n)=>{const i=e.transaction(["queue"],"readwrite").objectStore("queue").delete(t);i.onsuccess=()=>o(),i.onerror=()=>n(i.error)})}function incrementRetryCount(e,t){return new Promise((o,n)=>{const i=e.transaction(["queue"],"readwrite").objectStore("queue"),r=i.get(t);r.onsuccess=()=>{const e=r.result;e&&(e.retryCount=(e.retryCount||0)+1,e.retryCount>=3?(i.delete(t),console.warn("Max retries exceeded for request:",t)):i.put(e)),o()},r.onerror=()=>n(r.error)})}self.addEventListener("push",e=>{console.log("Push notification received:",e);let t={title:"Prep Reminder",body:"Time to start preparing your meal",icon:"/static/icons/icon-192.png",badge:"/static/icons/badge-72.png",data:{url:"/notifications"}};if(e.data)try{t=e.data.json()}catch(e){console.error("Failed to parse push data:",e)}const o={body:t.body,icon:t.icon||"/static/icons/icon-192.png",badge:t.badge||"/static/icons/badge-72.png",data:t.data||{url:"/notifications"},actions:t.actions||[{action:"view",title:"View Recipe"},{action:"dismiss",title:"Dismiss"}],vibrate:[200,100,200],requireInteraction:!1,tag:"prep-reminder"};e.waitUntil(self.registration.showNotification(t.title,o))}),self.addEventListener("notificationclick",e=>{console.log("Notification clicked:",e),e.notification.close();const t=e.notification.data?.url||"/notifications";e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(e=>{for(const o of e)if(o.url.includes(self.location.origin)&&"focus"in o)return o.focus(),void o.navigate(t);if(clients.openWindow)return clients.openWindow(t)}))}),self.addEventListener("notificationclose",e=>{console.log("Notification closed:",e)}),self.addEventListener("sync",e=>{console.log("Background sync triggered:",e.tag),"sync-offline-actions"===e.tag&&e.waitUntil(syncOfflineActions())});