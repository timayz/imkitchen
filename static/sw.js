if(importScripts("https://storage.googleapis.com/workbox-cdn/releases/7.1.0/workbox-sw.js"),workbox){console.log("Workbox loaded successfully"),workbox.core.setCacheNameDetails({prefix:"imkitchen",suffix:"v1"}),workbox.core.skipWaiting(),workbox.core.clientsClaim(),workbox.precaching.precacheAndRoute([{revision:"2092e500a50382606ad4d87cd0c5c85a",url:"/static/css/main.css"},{revision:"c5e0998b75e998fb544fa2da4b80757b",url:"/static/css/tailwind.css"},{revision:"9c0bf863e65d6c208a57bd2b63896df7",url:"/static/icons/apple-touch-icon.png"},{revision:"92b24651b31dd4e8c233330512d4fdf3",url:"/static/icons/icon-192-maskable.png"},{revision:"14aae3946b6c97d6b80693c6edef76a6",url:"/static/icons/icon-192.png"},{revision:"e7e8f5a5500290d14ac25e8ae14c4e1b",url:"/static/icons/icon-512-maskable.png"},{revision:"da087846670ad8ca9784a40e7febfd69",url:"/static/icons/icon-512.png"},{revision:"2c0121d0b07c2d3c9a3a22b207441dcd",url:"/static/icons/icon-maskable.svg"},{revision:"18e1cf596913c6fcced548f0ee5852b6",url:"/static/icons/icon.svg"},{revision:"a8feda6f7d2cbc7d651e6cd627dbb496",url:"/static/icons/shortcut-dashboard.png"},{revision:"a8feda6f7d2cbc7d651e6cd627dbb496",url:"/static/icons/shortcut-recipes.png"},{revision:"057f2441d71fb0c051c91277eb5e9273",url:"/static/js/feature-detection.js"},{revision:"8529e0b0fae9c0c1eb9e68a51460fde4",url:"/static/js/kitchen-mode.js"},{revision:"0a5885b62d77ac74960a072c82ed0652",url:"/static/js/meal-regeneration.js"},{revision:"e9074b9047b7aa91ecd3805736d7220b",url:"/static/js/meal-replacement.js"},{revision:"807bedac4a42f00e05efa3e221844bdb",url:"/static/js/offline-db.js"},{revision:"419306bf5ded7db1c82e91e241c5bdaa",url:"/static/js/offline-indicator.js"},{revision:"d7cc6c4feef0c898b6979516b46d40b8",url:"/static/js/polyfills.js"},{revision:"b2f0a84da170b864273b6318376db255",url:"/static/js/push-subscription.js"},{revision:"9faae8de3ae27a94a5aae5d090fc8cc0",url:"/static/js/pwa-install.js"},{revision:"a48cbf7788b0637e2e214b71aa8151bb",url:"/static/js/shopping-checkoff.js"},{revision:"555498175f096ea96e544b52db944d59",url:"/static/js/sw-register.js"},{revision:"0403b1a58b3b4d78c389d40f821f9dcb",url:"/static/js/sync-ui.js"},{revision:"bf08a792573cd249c76ee88a0de0f1ff",url:"/static/js/touch-enhancements.js"},{revision:"c10a1b3bf2335c6c61b5c4b35ef2eef5",url:"/static/js/twinspark.js"},{revision:"b29ea81655ba2a8d0a6972cc44982773",url:"/static/js/twinspark.min.js"},{revision:"17a371c907aa569828a81bdd2bde76bd",url:"/static/screenshots/dashboard-mobile.png"},{revision:"140e8a6cfb51ad453f54b23769b106d9",url:"/static/screenshots/dashboard-mobile.svg"},{revision:"758bb95bf894e397a88dbd982dec8f71",url:"/static/screenshots/meal-calendar-desktop.png"},{revision:"345c0e789c18b393c64560e9463cf1f9",url:"/static/screenshots/meal-calendar-desktop.svg"},{revision:"f7ea03ffd8722e7664e4d523995c68e6",url:"/static/screenshots/recipe-detail-mobile.png"},{revision:"36515dc1e40312ed29b96e7d9a1117e7",url:"/static/screenshots/recipe-detail-mobile.svg"}]||[]),workbox.routing.registerRoute(({request:e})=>"navigate"===e.mode,new workbox.strategies.NetworkFirst({cacheName:"pages-v1",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:50,maxAgeSeconds:604800}),new workbox.cacheableResponse.CacheableResponsePlugin({statuses:[0,200]})]})),workbox.routing.registerRoute(({request:e})=>"image"===e.destination,new workbox.strategies.CacheFirst({cacheName:"images-v1",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:100,maxAgeSeconds:2592e3})]})),workbox.routing.registerRoute(({url:e})=>e.pathname.startsWith("/api")||e.pathname.startsWith("/recipes")||e.pathname.startsWith("/plan")||e.pathname.startsWith("/shopping"),new workbox.strategies.NetworkFirst({cacheName:"api-v1",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:100,maxAgeSeconds:86400})]})),workbox.routing.registerRoute(({request:e})=>"style"===e.destination||"script"===e.destination||"font"===e.destination,new workbox.strategies.CacheFirst({cacheName:"static-v1",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:60,maxAgeSeconds:31536e3})]}));const e="/offline";async function checkStorageQuota(){if("storage"in navigator&&"estimate"in navigator.storage)try{const e=await navigator.storage.estimate(),t=e.usage||0,i=e.quota||0,o=i>0?t/i*100:0;return console.log(`Storage: ${(t/1024/1024).toFixed(2)} MB used of ${(i/1024/1024).toFixed(2)} MB (${o.toFixed(1)}%)`),o>90?console.warn("Storage quota critical: "+o.toFixed(1)+"% used. Consider clearing old caches."):o>75&&console.warn("Storage quota high: "+o.toFixed(1)+"% used."),e}catch(e){console.error("Failed to check storage quota:",e)}else console.log("Storage estimation API not available")}self.addEventListener("install",t=>{t.waitUntil(Promise.all([caches.open("pages-v1").then(t=>t.add(e)),checkStorageQuota()]))}),workbox.routing.setCatchHandler(({event:t})=>"navigate"===t.request.mode?caches.match(e):Response.error())}else console.error("Workbox failed to load");async function syncOfflineActions(){try{const e=await openSyncDatabase(),t=await getAllQueuedRequests(e);console.log(`Syncing ${t.length} queued requests`);for(const i of t)try{await replayRequest(i),await removeQueuedRequest(e,i.id),console.log("Successfully synced request:",i.id)}catch(t){console.error("Failed to sync request:",i.id,t),await incrementRetryCount(e,i.id)}console.log("Background sync completed")}catch(e){throw console.error("Background sync failed:",e),e}}function openSyncDatabase(){return new Promise((e,t)=>{const i=indexedDB.open("imkitchen-sync",1);i.onerror=()=>t(i.error),i.onsuccess=()=>e(i.result),i.onupgradeneeded=e=>{const t=e.target.result;if(!t.objectStoreNames.contains("queue")){const e=t.createObjectStore("queue",{keyPath:"id",autoIncrement:!0});e.createIndex("timestamp","timestamp",{unique:!1}),e.createIndex("retryCount","retryCount",{unique:!1})}}})}function getAllQueuedRequests(e){return new Promise((t,i)=>{const o=e.transaction(["queue"],"readonly").objectStore("queue").getAll();o.onsuccess=()=>t(o.result||[]),o.onerror=()=>i(o.error)})}async function replayRequest(e){const{url:t,method:i,body:o,headers:s}=e,a=await fetch(t,{method:i,headers:s||{},body:o?JSON.stringify(o):void 0});if(!a.ok)throw new Error(`Request failed with status ${a.status}`);return a}function removeQueuedRequest(e,t){return new Promise((i,o)=>{const s=e.transaction(["queue"],"readwrite").objectStore("queue").delete(t);s.onsuccess=()=>i(),s.onerror=()=>o(s.error)})}function incrementRetryCount(e,t){return new Promise((i,o)=>{const s=e.transaction(["queue"],"readwrite").objectStore("queue"),a=s.get(t);a.onsuccess=()=>{const e=a.result;e&&(e.retryCount=(e.retryCount||0)+1,e.retryCount>=3?(s.delete(t),console.warn("Max retries exceeded for request:",t)):s.put(e)),i()},a.onerror=()=>o(a.error)})}self.addEventListener("push",e=>{console.log("Push notification received:",e);let t={title:"Prep Reminder",body:"Time to start preparing your meal",icon:"/static/icons/icon-192.png",badge:"/static/icons/badge-72.png",data:{url:"/notifications"}};if(e.data)try{t=e.data.json()}catch(e){console.error("Failed to parse push data:",e)}const i={body:t.body,icon:t.icon||"/static/icons/icon-192.png",badge:t.badge||"/static/icons/badge-72.png",data:t.data||{url:"/notifications"},actions:t.actions||[{action:"view",title:"View Recipe"},{action:"dismiss",title:"Dismiss"}],vibrate:[200,100,200],requireInteraction:!1,tag:"prep-reminder"};e.waitUntil(self.registration.showNotification(t.title,i))}),self.addEventListener("notificationclick",e=>{console.log("Notification clicked:",e),e.notification.close();const t=e.notification.data?.url||"/notifications";e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(e=>{for(const i of e)if(i.url.includes(self.location.origin)&&"focus"in i)return i.focus(),void i.navigate(t);if(clients.openWindow)return clients.openWindow(t)}))}),self.addEventListener("notificationclose",e=>{console.log("Notification closed:",e)}),self.addEventListener("sync",e=>{console.log("Background sync triggered:",e.tag),"sync-offline-actions"===e.tag&&e.waitUntil(syncOfflineActions())});